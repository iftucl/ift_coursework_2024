dotenv.main
===========

.. py:module:: dotenv.main


Attributes
----------

.. autoapisummary::

   dotenv.main.StrPath
   dotenv.main.logger


Classes
-------

.. autoapisummary::

   dotenv.main.DotEnv


Functions
---------

.. autoapisummary::

   dotenv.main.with_warn_for_invalid_lines
   dotenv.main.get_key
   dotenv.main.rewrite
   dotenv.main.set_key
   dotenv.main.unset_key
   dotenv.main.resolve_variables
   dotenv.main.find_dotenv
   dotenv.main.load_dotenv
   dotenv.main.dotenv_values


Module Contents
---------------

.. py:data:: StrPath

.. py:data:: logger

.. py:function:: with_warn_for_invalid_lines(mappings: Iterator[dotenv.parser.Binding]) -> Iterator[dotenv.parser.Binding]

.. py:class:: DotEnv(dotenv_path: Optional[StrPath], stream: Optional[IO[str]] = None, verbose: bool = False, encoding: Optional[str] = None, interpolate: bool = True, override: bool = True)

   .. py:attribute:: dotenv_path
      :type:  Optional[StrPath]


   .. py:attribute:: stream
      :type:  Optional[IO[str]]
      :value: None



   .. py:attribute:: verbose
      :type:  bool
      :value: False



   .. py:attribute:: encoding
      :type:  Optional[str]
      :value: None



   .. py:attribute:: interpolate
      :type:  bool
      :value: True



   .. py:attribute:: override
      :type:  bool
      :value: True



   .. py:method:: dict() -> Dict[str, Optional[str]]

      Return dotenv as dict



   .. py:method:: parse() -> Iterator[Tuple[str, Optional[str]]]


   .. py:method:: set_as_environment_variables() -> bool

      Load the current dotenv as system environment variable.



   .. py:method:: get(key: str) -> Optional[str]


.. py:function:: get_key(dotenv_path: StrPath, key_to_get: str, encoding: Optional[str] = 'utf-8') -> Optional[str]

   Get the value of a given key from the given .env.

   Returns `None` if the key isn't found or doesn't have a value.


.. py:function:: rewrite(path: StrPath, encoding: Optional[str]) -> Iterator[Tuple[IO[str], IO[str]]]

.. py:function:: set_key(dotenv_path: StrPath, key_to_set: str, value_to_set: str, quote_mode: str = 'always', export: bool = False, encoding: Optional[str] = 'utf-8') -> Tuple[Optional[bool], str, str]

   Adds or Updates a key/value to the given .env

   If the .env path given doesn't exist, fails instead of risking creating
   an orphan .env somewhere in the filesystem


.. py:function:: unset_key(dotenv_path: StrPath, key_to_unset: str, quote_mode: str = 'always', encoding: Optional[str] = 'utf-8') -> Tuple[Optional[bool], str]

   Removes a given key from the given `.env` file.

   If the .env path given doesn't exist, fails.
   If the given key doesn't exist in the .env, fails.


.. py:function:: resolve_variables(values: Iterable[Tuple[str, Optional[str]]], override: bool) -> Mapping[str, Optional[str]]

.. py:function:: find_dotenv(filename: str = '.env', raise_error_if_not_found: bool = False, usecwd: bool = False) -> str

   Search in increasingly higher folders for the given file

   Returns path to the file if found, or an empty string otherwise


.. py:function:: load_dotenv(dotenv_path: Optional[StrPath] = None, stream: Optional[IO[str]] = None, verbose: bool = False, override: bool = False, interpolate: bool = True, encoding: Optional[str] = 'utf-8') -> bool

   Parse a .env file and then load all the variables found as environment variables.

   :param dotenv_path: Absolute or relative path to .env file.
   :param stream: Text stream (such as `io.StringIO`) with .env content, used if
                  `dotenv_path` is `None`.
   :param verbose: Whether to output a warning the .env file is missing.
   :param override: Whether to override the system environment variables with the variables
                    from the `.env` file.
   :param encoding: Encoding to be used to read the file.

   :returns: True if at least one environment variable is set else False
   :rtype: Bool

   If both `dotenv_path` and `stream` are `None`, `find_dotenv()` is used to find the
   .env file.


.. py:function:: dotenv_values(dotenv_path: Optional[StrPath] = None, stream: Optional[IO[str]] = None, verbose: bool = False, interpolate: bool = True, encoding: Optional[str] = 'utf-8') -> Dict[str, Optional[str]]

   Parse a .env file and return its content as a dict.

   The returned dict will have `None` values for keys without values in the .env file.
   For example, `foo=bar` results in `{"foo": "bar"}` whereas `foo` alone results in
   `{"foo": None}`

   :param dotenv_path: Absolute or relative path to the .env file.
   :param stream: `StringIO` object with .env content, used if `dotenv_path` is `None`.
   :param verbose: Whether to output a warning if the .env file is missing.
   :param encoding: Encoding to be used to read the file.

   If both `dotenv_path` and `stream` are `None`, `find_dotenv()` is used to find the
   .env file.


