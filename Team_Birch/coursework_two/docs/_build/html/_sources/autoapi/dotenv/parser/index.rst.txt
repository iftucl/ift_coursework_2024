dotenv.parser
=============

.. py:module:: dotenv.parser


Exceptions
----------

.. autoapisummary::

   dotenv.parser.Error


Classes
-------

.. autoapisummary::

   dotenv.parser.Original
   dotenv.parser.Binding
   dotenv.parser.Position
   dotenv.parser.Reader


Functions
---------

.. autoapisummary::

   dotenv.parser.make_regex
   dotenv.parser.decode_escapes
   dotenv.parser.parse_key
   dotenv.parser.parse_unquoted_value
   dotenv.parser.parse_value
   dotenv.parser.parse_binding
   dotenv.parser.parse_stream


Module Contents
---------------

.. py:function:: make_regex(string: str, extra_flags: int = 0) -> Pattern[str]

.. py:class:: Original

   Bases: :py:obj:`NamedTuple`


   .. py:attribute:: string
      :type:  str


   .. py:attribute:: line
      :type:  int


.. py:class:: Binding

   Bases: :py:obj:`NamedTuple`


   .. py:attribute:: key
      :type:  Optional[str]


   .. py:attribute:: value
      :type:  Optional[str]


   .. py:attribute:: original
      :type:  Original


   .. py:attribute:: error
      :type:  bool


.. py:class:: Position(chars: int, line: int)

   .. py:attribute:: chars


   .. py:attribute:: line


   .. py:method:: start() -> Position
      :classmethod:



   .. py:method:: set(other: Position) -> None


   .. py:method:: advance(string: str) -> None


.. py:exception:: Error

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


.. py:class:: Reader(stream: IO[str])

   .. py:attribute:: string


   .. py:attribute:: position


   .. py:attribute:: mark


   .. py:method:: has_next() -> bool


   .. py:method:: set_mark() -> None


   .. py:method:: get_marked() -> Original


   .. py:method:: peek(count: int) -> str


   .. py:method:: read(count: int) -> str


   .. py:method:: read_regex(regex: Pattern[str]) -> Sequence[str]


.. py:function:: decode_escapes(regex: Pattern[str], string: str) -> str

.. py:function:: parse_key(reader: Reader) -> Optional[str]

.. py:function:: parse_unquoted_value(reader: Reader) -> str

.. py:function:: parse_value(reader: Reader) -> str

.. py:function:: parse_binding(reader: Reader) -> Binding

.. py:function:: parse_stream(stream: IO[str]) -> Iterator[Binding]

