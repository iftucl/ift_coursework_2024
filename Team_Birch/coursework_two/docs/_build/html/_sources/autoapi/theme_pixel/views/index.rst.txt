theme_pixel.views
=================

.. py:module:: theme_pixel.views


Classes
-------

.. autoapisummary::

   theme_pixel.views.DateEncoder
   theme_pixel.views.UserLoginView
   theme_pixel.views.UserPasswordResetView
   theme_pixel.views.UserPasswordResetConfirmView
   theme_pixel.views.UserPasswordChangeView


Functions
---------

.. autoapisummary::

   theme_pixel.views.index
   theme_pixel.views.abouts_us
   theme_pixel.views.contact_us
   theme_pixel.views.landing_freelancer
   theme_pixel.views.blank_page
   theme_pixel.views.logout_view
   theme_pixel.views.register
   theme_pixel.views.tables
   theme_pixel.views.details
   theme_pixel.views.filter
   theme_pixel.views.chart
   theme_pixel.views.accordion
   theme_pixel.views.alerts
   theme_pixel.views.badges
   theme_pixel.views.bootstrap_carousels
   theme_pixel.views.breadcrumbs
   theme_pixel.views.buttons
   theme_pixel.views.cards
   theme_pixel.views.dropdowns
   theme_pixel.views.forms
   theme_pixel.views.modals
   theme_pixel.views.navs
   theme_pixel.views.pagination
   theme_pixel.views.popovers
   theme_pixel.views.progress_bars
   theme_pixel.views.tabs
   theme_pixel.views.toasts
   theme_pixel.views.tooltips
   theme_pixel.views.typography


Module Contents
---------------

.. py:class:: DateEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)

   Bases: :py:obj:`json.JSONEncoder`


   Extensible JSON <https://json.org> encoder for Python data structures.

   Supports the following objects and types by default:

   +-------------------+---------------+
   | Python            | JSON          |
   +===================+===============+
   | dict              | object        |
   +-------------------+---------------+
   | list, tuple       | array         |
   +-------------------+---------------+
   | str               | string        |
   +-------------------+---------------+
   | int, float        | number        |
   +-------------------+---------------+
   | True              | true          |
   +-------------------+---------------+
   | False             | false         |
   +-------------------+---------------+
   | None              | null          |
   +-------------------+---------------+

   To extend this to recognize other objects, subclass and implement a
   ``.default()`` method with another method that returns a serializable
   object for ``o`` if possible, otherwise it should call the superclass
   implementation (to raise ``TypeError``).



   .. py:method:: default(obj)

      Implement this method in a subclass such that it returns
      a serializable object for ``o``, or calls the base implementation
      (to raise a ``TypeError``).

      For example, to support arbitrary iterators, you could
      implement default like this::

          def default(self, o):
              try:
                  iterable = iter(o)
              except TypeError:
                  pass
              else:
                  return list(iterable)
              # Let the base class default method raise the TypeError
              return super().default(o)




.. py:function:: index(request)

.. py:function:: abouts_us(request)

.. py:function:: contact_us(request)

.. py:function:: landing_freelancer(request)

.. py:function:: blank_page(request)

.. py:class:: UserLoginView

   Bases: :py:obj:`django.contrib.auth.views.LoginView`


   .. py:attribute:: template_name
      :value: 'accounts/sign-in.html'



   .. py:attribute:: form_class


.. py:function:: logout_view(request)

.. py:function:: register(request)

.. py:class:: UserPasswordResetView

   Bases: :py:obj:`django.contrib.auth.views.PasswordResetView`


   .. py:attribute:: template_name
      :value: 'accounts/password_reset.html'



   .. py:attribute:: form_class


.. py:class:: UserPasswordResetConfirmView

   Bases: :py:obj:`django.contrib.auth.views.PasswordResetConfirmView`


   .. py:attribute:: template_name
      :value: 'accounts/password_reset_confirm.html'



   .. py:attribute:: form_class


.. py:class:: UserPasswordChangeView

   Bases: :py:obj:`django.contrib.auth.views.PasswordChangeView`


   .. py:attribute:: template_name
      :value: 'accounts/password_change.html'



   .. py:attribute:: form_class


.. py:function:: tables(request)

.. py:function:: details(request)

.. py:function:: filter(request)

.. py:function:: chart(request)

.. py:function:: accordion(request)

.. py:function:: alerts(request)

.. py:function:: badges(request)

.. py:function:: bootstrap_carousels(request)

.. py:function:: breadcrumbs(request)

.. py:function:: buttons(request)

.. py:function:: cards(request)

.. py:function:: dropdowns(request)

.. py:function:: forms(request)

.. py:function:: modals(request)

.. py:function:: navs(request)

.. py:function:: pagination(request)

.. py:function:: popovers(request)

.. py:function:: progress_bars(request)

.. py:function:: tabs(request)

.. py:function:: toasts(request)

.. py:function:: tooltips(request)

.. py:function:: typography(request)

