packaging.version
=================

.. py:module:: packaging.version

.. autoapi-nested-parse::

   .. testsetup::

       from packaging.version import parse, Version



Attributes
----------

.. autoapisummary::

   packaging.version.VERSION_PATTERN


Exceptions
----------

.. autoapisummary::

   packaging.version.InvalidVersion


Classes
-------

.. autoapisummary::

   packaging.version.Version


Functions
---------

.. autoapisummary::

   packaging.version.parse


Module Contents
---------------

.. py:function:: parse(version: str) -> Version

   Parse the given version string.

   >>> parse('1.0.dev1')
   <Version('1.0.dev1')>

   :param version: The version string to parse.
   :raises InvalidVersion: When the version string is not a valid version.


.. py:exception:: InvalidVersion

   Bases: :py:obj:`ValueError`


   Raised when a version string is not a valid version.

   >>> Version("invalid")
   Traceback (most recent call last):
       ...
   packaging.version.InvalidVersion: Invalid version: 'invalid'


.. py:data:: VERSION_PATTERN
   :value: Multiline-String

   .. raw:: html

      <details><summary>Show Value</summary>

   .. code-block:: python

      """
          v?
          (?:
              (?:(?P<epoch>[0-9]+)!)?                           # epoch
              (?P<release>[0-9]+(?:\.[0-9]+)*)                  # release segment
              (?P<pre>                                          # pre-release
                  [-_\.]?
                  (?P<pre_l>alpha|a|beta|b|preview|pre|c|rc)
                  [-_\.]?
                  (?P<pre_n>[0-9]+)?
              )?
              (?P<post>                                         # post release
                  (?:-(?P<post_n1>[0-9]+))
                  |
                  (?:
                      [-_\.]?
                      (?P<post_l>post|rev|r)
                      [-_\.]?
                      (?P<post_n2>[0-9]+)?
                  )
              )?
              (?P<dev>                                          # dev release
                  [-_\.]?
                  (?P<dev_l>dev)
                  [-_\.]?
                  (?P<dev_n>[0-9]+)?
              )?
          )
          (?:\+(?P<local>[a-z0-9]+(?:[-_\.][a-z0-9]+)*))?       # local version
      """

   .. raw:: html

      </details>



   A string containing the regular expression used to match a valid version.

   The pattern is not anchored at either end, and is intended for embedding in larger
   expressions (for example, matching a version number as part of a file name). The
   regular expression should be compiled with the ``re.VERBOSE`` and ``re.IGNORECASE``
   flags set.

   :meta hide-value:

.. py:class:: Version(version: str)

   Bases: :py:obj:`_BaseVersion`


   This class abstracts handling of a project's versions.

   A :class:`Version` instance is comparison aware and can be compared and
   sorted using the standard Python interfaces.

   >>> v1 = Version("1.0a5")
   >>> v2 = Version("1.0")
   >>> v1
   <Version('1.0a5')>
   >>> v2
   <Version('1.0')>
   >>> v1 < v2
   True
   >>> v1 == v2
   False
   >>> v1 > v2
   False
   >>> v1 >= v2
   False
   >>> v1 <= v2
   True


   .. py:property:: epoch
      :type: int


      The epoch of the version.

      >>> Version("2.0.0").epoch
      0
      >>> Version("1!2.0.0").epoch
      1


   .. py:property:: release
      :type: tuple[int, Ellipsis]


      The components of the "release" segment of the version.

      >>> Version("1.2.3").release
      (1, 2, 3)
      >>> Version("2.0.0").release
      (2, 0, 0)
      >>> Version("1!2.0.0.post0").release
      (2, 0, 0)

      Includes trailing zeroes but not the epoch or any pre-release / development /
      post-release suffixes.


   .. py:property:: pre
      :type: tuple[str, int] | None


      The pre-release segment of the version.

      >>> print(Version("1.2.3").pre)
      None
      >>> Version("1.2.3a1").pre
      ('a', 1)
      >>> Version("1.2.3b1").pre
      ('b', 1)
      >>> Version("1.2.3rc1").pre
      ('rc', 1)


   .. py:property:: post
      :type: int | None


      The post-release number of the version.

      >>> print(Version("1.2.3").post)
      None
      >>> Version("1.2.3.post1").post
      1


   .. py:property:: dev
      :type: int | None


      The development number of the version.

      >>> print(Version("1.2.3").dev)
      None
      >>> Version("1.2.3.dev1").dev
      1


   .. py:property:: local
      :type: str | None


      The local version segment of the version.

      >>> print(Version("1.2.3").local)
      None
      >>> Version("1.2.3+abc").local
      'abc'


   .. py:property:: public
      :type: str


      The public portion of the version.

      >>> Version("1.2.3").public
      '1.2.3'
      >>> Version("1.2.3+abc").public
      '1.2.3'
      >>> Version("1!1.2.3dev1+abc").public
      '1!1.2.3.dev1'


   .. py:property:: base_version
      :type: str


      The "base version" of the version.

      >>> Version("1.2.3").base_version
      '1.2.3'
      >>> Version("1.2.3+abc").base_version
      '1.2.3'
      >>> Version("1!1.2.3dev1+abc").base_version
      '1!1.2.3'

      The "base version" is the public version of the project without any pre or post
      release markers.


   .. py:property:: is_prerelease
      :type: bool


      Whether this version is a pre-release.

      >>> Version("1.2.3").is_prerelease
      False
      >>> Version("1.2.3a1").is_prerelease
      True
      >>> Version("1.2.3b1").is_prerelease
      True
      >>> Version("1.2.3rc1").is_prerelease
      True
      >>> Version("1.2.3dev1").is_prerelease
      True


   .. py:property:: is_postrelease
      :type: bool


      Whether this version is a post-release.

      >>> Version("1.2.3").is_postrelease
      False
      >>> Version("1.2.3.post1").is_postrelease
      True


   .. py:property:: is_devrelease
      :type: bool


      Whether this version is a development release.

      >>> Version("1.2.3").is_devrelease
      False
      >>> Version("1.2.3.dev1").is_devrelease
      True


   .. py:property:: major
      :type: int


      The first item of :attr:`release` or ``0`` if unavailable.

      >>> Version("1.2.3").major
      1


   .. py:property:: minor
      :type: int


      The second item of :attr:`release` or ``0`` if unavailable.

      >>> Version("1.2.3").minor
      2
      >>> Version("1").minor
      0


   .. py:property:: micro
      :type: int


      The third item of :attr:`release` or ``0`` if unavailable.

      >>> Version("1.2.3").micro
      3
      >>> Version("1").micro
      0


