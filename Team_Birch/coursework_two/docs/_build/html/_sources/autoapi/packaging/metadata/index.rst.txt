packaging.metadata
==================

.. py:module:: packaging.metadata


Attributes
----------

.. autoapisummary::

   packaging.metadata.T
   packaging.metadata.ExceptionGroup


Exceptions
----------

.. autoapisummary::

   packaging.metadata.InvalidMetadata


Classes
-------

.. autoapisummary::

   packaging.metadata.RawMetadata
   packaging.metadata.Metadata


Functions
---------

.. autoapisummary::

   packaging.metadata.parse_email


Module Contents
---------------

.. py:data:: T

.. py:data:: ExceptionGroup

.. py:exception:: InvalidMetadata(field: str, message: str)

   Bases: :py:obj:`ValueError`


   A metadata field contains invalid data.


   .. py:attribute:: field
      :type:  str

      The name of the field that contains invalid data.


.. py:class:: RawMetadata

   Bases: :py:obj:`TypedDict`


   A dictionary of raw core metadata.

   Each field in core metadata maps to a key of this dictionary (when data is
   provided). The key is lower-case and underscores are used instead of dashes
   compared to the equivalent core metadata field. Any core metadata field that
   can be specified multiple times or can hold multiple values in a single
   field have a key with a plural name. See :class:`Metadata` whose attributes
   match the keys of this dictionary.

   Core metadata fields that can be specified multiple times are stored as a
   list or dict depending on which is appropriate for the field. Any fields
   which hold multiple values in a single field are stored as a list.



   .. py:attribute:: metadata_version
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: version
      :type:  str


   .. py:attribute:: platforms
      :type:  list[str]


   .. py:attribute:: summary
      :type:  str


   .. py:attribute:: description
      :type:  str


   .. py:attribute:: keywords
      :type:  list[str]


   .. py:attribute:: home_page
      :type:  str


   .. py:attribute:: author
      :type:  str


   .. py:attribute:: author_email
      :type:  str


   .. py:attribute:: license
      :type:  str


   .. py:attribute:: supported_platforms
      :type:  list[str]


   .. py:attribute:: download_url
      :type:  str


   .. py:attribute:: classifiers
      :type:  list[str]


   .. py:attribute:: requires
      :type:  list[str]


   .. py:attribute:: provides
      :type:  list[str]


   .. py:attribute:: obsoletes
      :type:  list[str]


   .. py:attribute:: maintainer
      :type:  str


   .. py:attribute:: maintainer_email
      :type:  str


   .. py:attribute:: requires_dist
      :type:  list[str]


   .. py:attribute:: provides_dist
      :type:  list[str]


   .. py:attribute:: obsoletes_dist
      :type:  list[str]


   .. py:attribute:: requires_python
      :type:  str


   .. py:attribute:: requires_external
      :type:  list[str]


   .. py:attribute:: project_urls
      :type:  dict[str, str]


   .. py:attribute:: description_content_type
      :type:  str


   .. py:attribute:: provides_extra
      :type:  list[str]


   .. py:attribute:: dynamic
      :type:  list[str]


   .. py:attribute:: license_expression
      :type:  str


   .. py:attribute:: license_files
      :type:  list[str]


.. py:function:: parse_email(data: bytes | str) -> tuple[RawMetadata, dict[str, list[str]]]

   Parse a distribution's metadata stored as email headers (e.g. from ``METADATA``).

   This function returns a two-item tuple of dicts. The first dict is of
   recognized fields from the core metadata specification. Fields that can be
   parsed and translated into Python's built-in types are converted
   appropriately. All other fields are left as-is. Fields that are allowed to
   appear multiple times are stored as lists.

   The second dict contains all other fields from the metadata. This includes
   any unrecognized fields. It also includes any fields which are expected to
   be parsed into a built-in type but were not formatted appropriately. Finally,
   any fields that are expected to appear only once but are repeated are
   included in this dict.



.. py:class:: Metadata

   Representation of distribution metadata.

   Compared to :class:`RawMetadata`, this class provides objects representing
   metadata fields instead of only using built-in types. Any invalid metadata
   will cause :exc:`InvalidMetadata` to be raised (with a
   :py:attr:`~BaseException.__cause__` attribute as appropriate).


   .. py:method:: from_raw(data: RawMetadata, *, validate: bool = True) -> Metadata
      :classmethod:


      Create an instance from :class:`RawMetadata`.

      If *validate* is true, all metadata will be validated. All exceptions
      related to validation will be gathered and raised as an :class:`ExceptionGroup`.



   .. py:method:: from_email(data: bytes | str, *, validate: bool = True) -> Metadata
      :classmethod:


      Parse metadata from email headers.

      If *validate* is true, the metadata will be validated. All exceptions
      related to validation will be gathered and raised as an :class:`ExceptionGroup`.



   .. py:attribute:: metadata_version
      :type:  _Validator[_MetadataVersion]

      :external:ref:`core-metadata-metadata-version`
      (required; validated to be a valid metadata version)


   .. py:attribute:: name
      :type:  _Validator[str]

      :external:ref:`core-metadata-name`
      (required; validated using :func:`~packaging.utils.canonicalize_name` and its
      *validate* parameter)


   .. py:attribute:: version
      :type:  _Validator[packaging.version.Version]

      :external:ref:`core-metadata-version` (required)


   .. py:attribute:: dynamic
      :type:  _Validator[list[str] | None]

      :external:ref:`core-metadata-dynamic`
      (validated against core metadata field names and lowercased)


   .. py:attribute:: platforms
      :type:  _Validator[list[str] | None]

      :external:ref:`core-metadata-platform`


   .. py:attribute:: supported_platforms
      :type:  _Validator[list[str] | None]

      :external:ref:`core-metadata-supported-platform`


   .. py:attribute:: summary
      :type:  _Validator[str | None]

      :external:ref:`core-metadata-summary` (validated to contain no newlines)


   .. py:attribute:: description
      :type:  _Validator[str | None]

      :external:ref:`core-metadata-description`


   .. py:attribute:: description_content_type
      :type:  _Validator[str | None]

      :external:ref:`core-metadata-description-content-type` (validated)


   .. py:attribute:: keywords
      :type:  _Validator[list[str] | None]

      :external:ref:`core-metadata-keywords`


   .. py:attribute:: home_page
      :type:  _Validator[str | None]

      :external:ref:`core-metadata-home-page`


   .. py:attribute:: download_url
      :type:  _Validator[str | None]

      :external:ref:`core-metadata-download-url`


   .. py:attribute:: author
      :type:  _Validator[str | None]

      :external:ref:`core-metadata-author`


   .. py:attribute:: author_email
      :type:  _Validator[str | None]

      :external:ref:`core-metadata-author-email`


   .. py:attribute:: maintainer
      :type:  _Validator[str | None]

      :external:ref:`core-metadata-maintainer`


   .. py:attribute:: maintainer_email
      :type:  _Validator[str | None]

      :external:ref:`core-metadata-maintainer-email`


   .. py:attribute:: license
      :type:  _Validator[str | None]

      :external:ref:`core-metadata-license`


   .. py:attribute:: license_expression
      :type:  _Validator[packaging.licenses.NormalizedLicenseExpression | None]

      :external:ref:`core-metadata-license-expression`


   .. py:attribute:: license_files
      :type:  _Validator[list[str] | None]

      :external:ref:`core-metadata-license-file`


   .. py:attribute:: classifiers
      :type:  _Validator[list[str] | None]

      :external:ref:`core-metadata-classifier`


   .. py:attribute:: requires_dist
      :type:  _Validator[list[packaging.requirements.Requirement] | None]

      :external:ref:`core-metadata-requires-dist`


   .. py:attribute:: requires_python
      :type:  _Validator[packaging.specifiers.SpecifierSet | None]

      :external:ref:`core-metadata-requires-python`


   .. py:attribute:: requires_external
      :type:  _Validator[list[str] | None]

      :external:ref:`core-metadata-requires-external`


   .. py:attribute:: project_urls
      :type:  _Validator[dict[str, str] | None]

      :external:ref:`core-metadata-project-url`


   .. py:attribute:: provides_extra
      :type:  _Validator[list[packaging.utils.NormalizedName] | None]

      :external:ref:`core-metadata-provides-extra`


   .. py:attribute:: provides_dist
      :type:  _Validator[list[str] | None]

      :external:ref:`core-metadata-provides-dist`


   .. py:attribute:: obsoletes_dist
      :type:  _Validator[list[str] | None]

      :external:ref:`core-metadata-obsoletes-dist`


   .. py:attribute:: requires
      :type:  _Validator[list[str] | None]

      ``Requires`` (deprecated)


   .. py:attribute:: provides
      :type:  _Validator[list[str] | None]

      ``Provides`` (deprecated)


   .. py:attribute:: obsoletes
      :type:  _Validator[list[str] | None]

      ``Obsoletes`` (deprecated)


