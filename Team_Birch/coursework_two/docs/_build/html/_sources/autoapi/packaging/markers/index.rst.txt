packaging.markers
=================

.. py:module:: packaging.markers


Attributes
----------

.. autoapisummary::

   packaging.markers.EvaluateContext


Exceptions
----------

.. autoapisummary::

   packaging.markers.InvalidMarker
   packaging.markers.UndefinedComparison
   packaging.markers.UndefinedEnvironmentName


Classes
-------

.. autoapisummary::

   packaging.markers.Marker


Functions
---------

.. autoapisummary::

   packaging.markers.default_environment


Module Contents
---------------

.. py:data:: EvaluateContext

.. py:exception:: InvalidMarker

   Bases: :py:obj:`ValueError`


   An invalid marker was found, users should refer to PEP 508.


.. py:exception:: UndefinedComparison

   Bases: :py:obj:`ValueError`


   An invalid operation was attempted on a value that doesn't support it.


.. py:exception:: UndefinedEnvironmentName

   Bases: :py:obj:`ValueError`


   A name was attempted to be used that does not exist inside of the
   environment.


.. py:function:: default_environment() -> Environment

.. py:class:: Marker(marker: str)

   .. py:method:: evaluate(environment: dict[str, str] | None = None, context: EvaluateContext = 'metadata') -> bool

      Evaluate a marker.

      Return the boolean from evaluating the given marker against the
      environment. environment is an optional argument to override all or
      part of the determined environment. The *context* parameter specifies what
      context the markers are being evaluated for, which influences what markers
      are considered valid. Acceptable values are "metadata" (for core metadata;
      default), "lock_file", and "requirement" (i.e. all other situations).

      The environment is determined from the current Python process.



