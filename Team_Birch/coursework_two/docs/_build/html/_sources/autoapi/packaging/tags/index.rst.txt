packaging.tags
==============

.. py:module:: packaging.tags


Attributes
----------

.. autoapisummary::

   packaging.tags.logger
   packaging.tags.PythonVersion
   packaging.tags.AppleVersion
   packaging.tags.INTERPRETER_SHORT_NAMES


Classes
-------

.. autoapisummary::

   packaging.tags.Tag


Functions
---------

.. autoapisummary::

   packaging.tags.parse_tag
   packaging.tags.cpython_tags
   packaging.tags.generic_tags
   packaging.tags.compatible_tags
   packaging.tags.mac_platforms
   packaging.tags.ios_platforms
   packaging.tags.android_platforms
   packaging.tags.platform_tags
   packaging.tags.interpreter_name
   packaging.tags.interpreter_version
   packaging.tags.sys_tags


Module Contents
---------------

.. py:data:: logger

.. py:data:: PythonVersion

.. py:data:: AppleVersion

.. py:data:: INTERPRETER_SHORT_NAMES
   :type:  dict[str, str]

.. py:class:: Tag(interpreter: str, abi: str, platform: str)

   A representation of the tag triple for a wheel.

   Instances are considered immutable and thus are hashable. Equality checking
   is also supported.


   .. py:property:: interpreter
      :type: str



   .. py:property:: abi
      :type: str



   .. py:property:: platform
      :type: str



.. py:function:: parse_tag(tag: str) -> frozenset[Tag]

   Parses the provided tag (e.g. `py3-none-any`) into a frozenset of Tag instances.

   Returning a set is required due to the possibility that the tag is a
   compressed tag set.


.. py:function:: cpython_tags(python_version: PythonVersion | None = None, abis: Iterable[str] | None = None, platforms: Iterable[str] | None = None, *, warn: bool = False) -> Iterator[Tag]

   Yields the tags for a CPython interpreter.

   The tags consist of:
   - cp<python_version>-<abi>-<platform>
   - cp<python_version>-abi3-<platform>
   - cp<python_version>-none-<platform>
   - cp<less than python_version>-abi3-<platform>  # Older Python versions down to 3.2.

   If python_version only specifies a major version then user-provided ABIs and
   the 'none' ABItag will be used.

   If 'abi3' or 'none' are specified in 'abis' then they will be yielded at
   their normal position and not at the beginning.


.. py:function:: generic_tags(interpreter: str | None = None, abis: Iterable[str] | None = None, platforms: Iterable[str] | None = None, *, warn: bool = False) -> Iterator[Tag]

   Yields the tags for a generic interpreter.

   The tags consist of:
   - <interpreter>-<abi>-<platform>

   The "none" ABI will be added if it was not explicitly provided.


.. py:function:: compatible_tags(python_version: PythonVersion | None = None, interpreter: str | None = None, platforms: Iterable[str] | None = None) -> Iterator[Tag]

   Yields the sequence of tags that are compatible with a specific version of Python.

   The tags consist of:
   - py*-none-<platform>
   - <interpreter>-none-any  # ... if `interpreter` is provided.
   - py*-none-any


.. py:function:: mac_platforms(version: AppleVersion | None = None, arch: str | None = None) -> Iterator[str]

   Yields the platform tags for a macOS system.

   The `version` parameter is a two-item tuple specifying the macOS version to
   generate platform tags for. The `arch` parameter is the CPU architecture to
   generate platform tags for. Both parameters default to the appropriate value
   for the current system.


.. py:function:: ios_platforms(version: AppleVersion | None = None, multiarch: str | None = None) -> Iterator[str]

   Yields the platform tags for an iOS system.

   :param version: A two-item tuple specifying the iOS version to generate
       platform tags for. Defaults to the current iOS version.
   :param multiarch: The CPU architecture+ABI to generate platform tags for -
       (the value used by `sys.implementation._multiarch` e.g.,
       `arm64_iphoneos` or `x84_64_iphonesimulator`). Defaults to the current
       multiarch value.


.. py:function:: android_platforms(api_level: int | None = None, abi: str | None = None) -> Iterator[str]

   Yields the :attr:`~Tag.platform` tags for Android. If this function is invoked on
   non-Android platforms, the ``api_level`` and ``abi`` arguments are required.

   :param int api_level: The maximum `API level
       <https://developer.android.com/tools/releases/platforms>`__ to return. Defaults
       to the current system's version, as returned by ``platform.android_ver``.
   :param str abi: The `Android ABI <https://developer.android.com/ndk/guides/abis>`__,
       e.g. ``arm64_v8a``. Defaults to the current system's ABI , as returned by
       ``sysconfig.get_platform``. Hyphens and periods will be replaced with
       underscores.


.. py:function:: platform_tags() -> Iterator[str]

   Provides the platform tags for this installation.


.. py:function:: interpreter_name() -> str

   Returns the name of the running interpreter.

   Some implementations have a reserved, two-letter abbreviation which will
   be returned when appropriate.


.. py:function:: interpreter_version(*, warn: bool = False) -> str

   Returns the version of the running interpreter.


.. py:function:: sys_tags(*, warn: bool = False) -> Iterator[Tag]

   Returns the sequence of tag triples for the running interpreter.

   The order of the sequence corresponds to priority order for the
   interpreter, from most to least important.


