packaging.specifiers
====================

.. py:module:: packaging.specifiers

.. autoapi-nested-parse::

   .. testsetup::

       from packaging.specifiers import Specifier, SpecifierSet, InvalidSpecifier
       from packaging.version import Version



Attributes
----------

.. autoapisummary::

   packaging.specifiers.UnparsedVersion
   packaging.specifiers.UnparsedVersionVar
   packaging.specifiers.CallableOperator


Exceptions
----------

.. autoapisummary::

   packaging.specifiers.InvalidSpecifier


Classes
-------

.. autoapisummary::

   packaging.specifiers.BaseSpecifier
   packaging.specifiers.Specifier
   packaging.specifiers.SpecifierSet


Module Contents
---------------

.. py:data:: UnparsedVersion

.. py:data:: UnparsedVersionVar

.. py:data:: CallableOperator

.. py:exception:: InvalidSpecifier

   Bases: :py:obj:`ValueError`


   Raised when attempting to create a :class:`Specifier` with a specifier
   string that is invalid.

   >>> Specifier("lolwat")
   Traceback (most recent call last):
       ...
   packaging.specifiers.InvalidSpecifier: Invalid specifier: 'lolwat'


.. py:class:: BaseSpecifier

   .. py:property:: prereleases
      :type: bool | None

      :abstractmethod:


      Whether or not pre-releases as a whole are allowed.

      This can be set to either ``True`` or ``False`` to explicitly enable or disable
      prereleases or it can be set to ``None`` (the default) to use default semantics.


   .. py:method:: contains(item: str, prereleases: bool | None = None) -> bool
      :abstractmethod:


      Determines if the given item is contained within this specifier.



   .. py:method:: filter(iterable: Iterable[UnparsedVersionVar], prereleases: bool | None = None) -> Iterator[UnparsedVersionVar]
      :abstractmethod:


      Takes an iterable of items and filters them so that only items which
      are contained within this specifier are allowed in it.



.. py:class:: Specifier(spec: str = '', prereleases: bool | None = None)

   Bases: :py:obj:`BaseSpecifier`


   This class abstracts handling of version specifiers.

   .. tip::

       It is generally not required to instantiate this manually. You should instead
       prefer to work with :class:`SpecifierSet` instead, which can parse
       comma-separated version specifiers (which is what package metadata contains).


   .. py:property:: prereleases
      :type: bool


      Whether or not pre-releases as a whole are allowed.

      This can be set to either ``True`` or ``False`` to explicitly enable or disable
      prereleases or it can be set to ``None`` (the default) to use default semantics.


   .. py:property:: operator
      :type: str


      The operator of this specifier.

      >>> Specifier("==1.2.3").operator
      '=='


   .. py:property:: version
      :type: str


      The version of this specifier.

      >>> Specifier("==1.2.3").version
      '1.2.3'


   .. py:method:: contains(item: UnparsedVersion, prereleases: bool | None = None) -> bool

      Return whether or not the item is contained in this specifier.

      :param item:
          The item to check for, which can be a version string or a
          :class:`Version` instance.
      :param prereleases:
          Whether or not to match prereleases with this Specifier. If set to
          ``None`` (the default), it uses :attr:`prereleases` to determine
          whether or not prereleases are allowed.

      >>> Specifier(">=1.2.3").contains("1.2.3")
      True
      >>> Specifier(">=1.2.3").contains(Version("1.2.3"))
      True
      >>> Specifier(">=1.2.3").contains("1.0.0")
      False
      >>> Specifier(">=1.2.3").contains("1.3.0a1")
      False
      >>> Specifier(">=1.2.3", prereleases=True).contains("1.3.0a1")
      True
      >>> Specifier(">=1.2.3").contains("1.3.0a1", prereleases=True)
      True



   .. py:method:: filter(iterable: Iterable[UnparsedVersionVar], prereleases: bool | None = None) -> Iterator[UnparsedVersionVar]

      Filter items in the given iterable, that match the specifier.

      :param iterable:
          An iterable that can contain version strings and :class:`Version` instances.
          The items in the iterable will be filtered according to the specifier.
      :param prereleases:
          Whether or not to allow prereleases in the returned iterator. If set to
          ``None`` (the default), it will be intelligently decide whether to allow
          prereleases or not (based on the :attr:`prereleases` attribute, and
          whether the only versions matching are prereleases).

      This method is smarter than just ``filter(Specifier().contains, [...])``
      because it implements the rule from :pep:`440` that a prerelease item
      SHOULD be accepted if no other versions match the given specifier.

      >>> list(Specifier(">=1.2.3").filter(["1.2", "1.3", "1.5a1"]))
      ['1.3']
      >>> list(Specifier(">=1.2.3").filter(["1.2", "1.2.3", "1.3", Version("1.4")]))
      ['1.2.3', '1.3', <Version('1.4')>]
      >>> list(Specifier(">=1.2.3").filter(["1.2", "1.5a1"]))
      ['1.5a1']
      >>> list(Specifier(">=1.2.3").filter(["1.3", "1.5a1"], prereleases=True))
      ['1.3', '1.5a1']
      >>> list(Specifier(">=1.2.3", prereleases=True).filter(["1.3", "1.5a1"]))
      ['1.3', '1.5a1']



.. py:class:: SpecifierSet(specifiers: str | Iterable[Specifier] = '', prereleases: bool | None = None)

   Bases: :py:obj:`BaseSpecifier`


   This class abstracts handling of a set of version specifiers.

   It can be passed a single specifier (``>=3.0``), a comma-separated list of
   specifiers (``>=3.0,!=3.1``), or no specifier at all.


   .. py:property:: prereleases
      :type: bool | None


      Whether or not pre-releases as a whole are allowed.

      This can be set to either ``True`` or ``False`` to explicitly enable or disable
      prereleases or it can be set to ``None`` (the default) to use default semantics.


   .. py:method:: contains(item: UnparsedVersion, prereleases: bool | None = None, installed: bool | None = None) -> bool

      Return whether or not the item is contained in this SpecifierSet.

      :param item:
          The item to check for, which can be a version string or a
          :class:`Version` instance.
      :param prereleases:
          Whether or not to match prereleases with this SpecifierSet. If set to
          ``None`` (the default), it uses :attr:`prereleases` to determine
          whether or not prereleases are allowed.

      >>> SpecifierSet(">=1.0.0,!=1.0.1").contains("1.2.3")
      True
      >>> SpecifierSet(">=1.0.0,!=1.0.1").contains(Version("1.2.3"))
      True
      >>> SpecifierSet(">=1.0.0,!=1.0.1").contains("1.0.1")
      False
      >>> SpecifierSet(">=1.0.0,!=1.0.1").contains("1.3.0a1")
      False
      >>> SpecifierSet(">=1.0.0,!=1.0.1", prereleases=True).contains("1.3.0a1")
      True
      >>> SpecifierSet(">=1.0.0,!=1.0.1").contains("1.3.0a1", prereleases=True)
      True



   .. py:method:: filter(iterable: Iterable[UnparsedVersionVar], prereleases: bool | None = None) -> Iterator[UnparsedVersionVar]

      Filter items in the given iterable, that match the specifiers in this set.

      :param iterable:
          An iterable that can contain version strings and :class:`Version` instances.
          The items in the iterable will be filtered according to the specifier.
      :param prereleases:
          Whether or not to allow prereleases in the returned iterator. If set to
          ``None`` (the default), it will be intelligently decide whether to allow
          prereleases or not (based on the :attr:`prereleases` attribute, and
          whether the only versions matching are prereleases).

      This method is smarter than just ``filter(SpecifierSet(...).contains, [...])``
      because it implements the rule from :pep:`440` that a prerelease item
      SHOULD be accepted if no other versions match the given specifier.

      >>> list(SpecifierSet(">=1.2.3").filter(["1.2", "1.3", "1.5a1"]))
      ['1.3']
      >>> list(SpecifierSet(">=1.2.3").filter(["1.2", "1.3", Version("1.4")]))
      ['1.3', <Version('1.4')>]
      >>> list(SpecifierSet(">=1.2.3").filter(["1.2", "1.5a1"]))
      []
      >>> list(SpecifierSet(">=1.2.3").filter(["1.3", "1.5a1"], prereleases=True))
      ['1.3', '1.5a1']
      >>> list(SpecifierSet(">=1.2.3", prereleases=True).filter(["1.3", "1.5a1"]))
      ['1.3', '1.5a1']

      An "empty" SpecifierSet will filter items based on the presence of prerelease
      versions in the set.

      >>> list(SpecifierSet("").filter(["1.3", "1.5a1"]))
      ['1.3']
      >>> list(SpecifierSet("").filter(["1.5a1"]))
      ['1.5a1']
      >>> list(SpecifierSet("", prereleases=True).filter(["1.3", "1.5a1"]))
      ['1.3', '1.5a1']
      >>> list(SpecifierSet("").filter(["1.3", "1.5a1"], prereleases=True))
      ['1.3', '1.5a1']



