sqlparse.sql
============

.. py:module:: sqlparse.sql

.. autoapi-nested-parse::

   This module contains classes representing syntactical elements of SQL.



Classes
-------

.. autoapisummary::

   sqlparse.sql.NameAliasMixin
   sqlparse.sql.Token
   sqlparse.sql.TokenList
   sqlparse.sql.Statement
   sqlparse.sql.Identifier
   sqlparse.sql.IdentifierList
   sqlparse.sql.TypedLiteral
   sqlparse.sql.Parenthesis
   sqlparse.sql.SquareBrackets
   sqlparse.sql.Assignment
   sqlparse.sql.If
   sqlparse.sql.For
   sqlparse.sql.Comparison
   sqlparse.sql.Comment
   sqlparse.sql.Where
   sqlparse.sql.Over
   sqlparse.sql.Having
   sqlparse.sql.Case
   sqlparse.sql.Function
   sqlparse.sql.Begin
   sqlparse.sql.Operation
   sqlparse.sql.Values
   sqlparse.sql.Command


Module Contents
---------------

.. py:class:: NameAliasMixin

   Implements get_real_name and get_alias.


   .. py:method:: get_real_name()

      Returns the real name (object name) of this identifier.



   .. py:method:: get_alias()

      Returns the alias for this identifier or ``None``.



.. py:class:: Token(ttype, value)

   Base class for all other classes in this module.

   It represents a single token and has two instance attributes:
   ``value`` is the unchanged value of the token and ``ttype`` is
   the type of the token.


   .. py:attribute:: value
      :value: ''



   .. py:attribute:: ttype


   .. py:attribute:: parent
      :value: None



   .. py:attribute:: is_group
      :value: False



   .. py:attribute:: is_keyword


   .. py:attribute:: is_whitespace


   .. py:attribute:: is_newline


   .. py:attribute:: normalized
      :value: ''



   .. py:method:: flatten()

      Resolve subgroups.



   .. py:method:: match(ttype, values, regex=False)

      Checks whether the token matches the given arguments.

      *ttype* is a token type. If this token doesn't match the given token
      type.
      *values* is a list of possible values for this token. The values
      are OR'ed together so if only one of the values matches ``True``
      is returned. Except for keyword tokens the comparison is
      case-sensitive. For convenience it's OK to pass in a single string.
      If *regex* is ``True`` (default is ``False``) the given values are
      treated as regular expressions.



   .. py:method:: within(group_cls)

      Returns ``True`` if this token is within *group_cls*.

      Use this method for example to check if an identifier is within
      a function: ``t.within(sql.Function)``.



   .. py:method:: is_child_of(other)

      Returns ``True`` if this token is a direct child of *other*.



   .. py:method:: has_ancestor(other)

      Returns ``True`` if *other* is in this tokens ancestry.



.. py:class:: TokenList(tokens=None)

   Bases: :py:obj:`Token`


   A group of tokens.

   It has an additional instance attribute ``tokens`` which holds a
   list of child-tokens.


   .. py:attribute:: tokens
      :value: []



   .. py:attribute:: is_group
      :value: True



   .. py:method:: get_token_at_offset(offset)

      Returns the token that is on position offset.



   .. py:method:: flatten()

      Generator yielding ungrouped tokens.

      This method is recursively called for all child tokens.



   .. py:method:: get_sublists()


   .. py:method:: token_first(skip_ws=True, skip_cm=False)

      Returns the first child token.

      If *skip_ws* is ``True`` (the default), whitespace
      tokens are ignored.

      if *skip_cm* is ``True`` (default: ``False``), comments are
      ignored too.



   .. py:method:: token_next_by(i=None, m=None, t=None, idx=-1, end=None)


   .. py:method:: token_not_matching(funcs, idx)


   .. py:method:: token_matching(funcs, idx)


   .. py:method:: token_prev(idx, skip_ws=True, skip_cm=False)

      Returns the previous token relative to *idx*.

      If *skip_ws* is ``True`` (the default) whitespace tokens are ignored.
      If *skip_cm* is ``True`` comments are ignored.
      ``None`` is returned if there's no previous token.



   .. py:method:: token_next(idx, skip_ws=True, skip_cm=False, _reverse=False)

      Returns the next token relative to *idx*.

      If *skip_ws* is ``True`` (the default) whitespace tokens are ignored.
      If *skip_cm* is ``True`` comments are ignored.
      ``None`` is returned if there's no next token.



   .. py:method:: token_index(token, start=0)

      Return list index of token.



   .. py:method:: group_tokens(grp_cls, start, end, include_end=True, extend=False)

      Replace tokens by an instance of *grp_cls*.



   .. py:method:: insert_before(where, token)

      Inserts *token* before *where*.



   .. py:method:: insert_after(where, token, skip_ws=True)

      Inserts *token* after *where*.



   .. py:method:: has_alias()

      Returns ``True`` if an alias is present.



   .. py:method:: get_alias()

      Returns the alias for this identifier or ``None``.



   .. py:method:: get_name()

      Returns the name of this identifier.

      This is either it's alias or it's real name. The returned valued can
      be considered as the name under which the object corresponding to
      this identifier is known within the current statement.



   .. py:method:: get_real_name()

      Returns the real name (object name) of this identifier.



   .. py:method:: get_parent_name()

      Return name of the parent object if any.

      A parent object is identified by the first occurring dot.



.. py:class:: Statement(tokens=None)

   Bases: :py:obj:`TokenList`


   Represents a SQL statement.


   .. py:method:: get_type()

      Returns the type of a statement.

      The returned value is a string holding an upper-cased reprint of
      the first DML or DDL keyword. If the first token in this group
      isn't a DML or DDL keyword "UNKNOWN" is returned.

      Whitespaces and comments at the beginning of the statement
      are ignored.



.. py:class:: Identifier(tokens=None)

   Bases: :py:obj:`NameAliasMixin`, :py:obj:`TokenList`


   Represents an identifier.

   Identifiers may have aliases or typecasts.


   .. py:method:: is_wildcard()

      Return ``True`` if this identifier contains a wildcard.



   .. py:method:: get_typecast()

      Returns the typecast or ``None`` of this object as a string.



   .. py:method:: get_ordering()

      Returns the ordering or ``None`` as uppercase string.



   .. py:method:: get_array_indices()

      Returns an iterator of index token lists



.. py:class:: IdentifierList(tokens=None)

   Bases: :py:obj:`TokenList`


   A list of :class:`~sqlparse.sql.Identifier`'s.


   .. py:method:: get_identifiers()

      Returns the identifiers.

      Whitespaces and punctuations are not included in this generator.



.. py:class:: TypedLiteral(tokens=None)

   Bases: :py:obj:`TokenList`


   A typed literal, such as "date '2001-09-28'" or "interval '2 hours'".


   .. py:attribute:: M_OPEN


   .. py:attribute:: M_CLOSE


   .. py:attribute:: M_EXTEND


.. py:class:: Parenthesis(tokens=None)

   Bases: :py:obj:`TokenList`


   Tokens between parenthesis.


   .. py:attribute:: M_OPEN


   .. py:attribute:: M_CLOSE


.. py:class:: SquareBrackets(tokens=None)

   Bases: :py:obj:`TokenList`


   Tokens between square brackets


   .. py:attribute:: M_OPEN


   .. py:attribute:: M_CLOSE


.. py:class:: Assignment(tokens=None)

   Bases: :py:obj:`TokenList`


   An assignment like 'var := val;'


.. py:class:: If(tokens=None)

   Bases: :py:obj:`TokenList`


   An 'if' clause with possible 'else if' or 'else' parts.


   .. py:attribute:: M_OPEN


   .. py:attribute:: M_CLOSE


.. py:class:: For(tokens=None)

   Bases: :py:obj:`TokenList`


   A 'FOR' loop.


   .. py:attribute:: M_OPEN


   .. py:attribute:: M_CLOSE


.. py:class:: Comparison(tokens=None)

   Bases: :py:obj:`TokenList`


   A comparison used for example in WHERE clauses.


   .. py:property:: left


   .. py:property:: right


.. py:class:: Comment(tokens=None)

   Bases: :py:obj:`TokenList`


   A comment.


   .. py:method:: is_multiline()


.. py:class:: Where(tokens=None)

   Bases: :py:obj:`TokenList`


   A WHERE clause.


   .. py:attribute:: M_OPEN


   .. py:attribute:: M_CLOSE


.. py:class:: Over(tokens=None)

   Bases: :py:obj:`TokenList`


   An OVER clause.


   .. py:attribute:: M_OPEN


.. py:class:: Having(tokens=None)

   Bases: :py:obj:`TokenList`


   A HAVING clause.


   .. py:attribute:: M_OPEN


   .. py:attribute:: M_CLOSE


.. py:class:: Case(tokens=None)

   Bases: :py:obj:`TokenList`


   A CASE statement with one or more WHEN and possibly an ELSE part.


   .. py:attribute:: M_OPEN


   .. py:attribute:: M_CLOSE


   .. py:method:: get_cases(skip_ws=False)

      Returns a list of 2-tuples (condition, value).

      If an ELSE exists condition is None.



.. py:class:: Function(tokens=None)

   Bases: :py:obj:`NameAliasMixin`, :py:obj:`TokenList`


   A function or procedure call.


   .. py:method:: get_parameters()

      Return a list of parameters.



   .. py:method:: get_window()

      Return the window if it exists.



.. py:class:: Begin(tokens=None)

   Bases: :py:obj:`TokenList`


   A BEGIN/END block.


   .. py:attribute:: M_OPEN


   .. py:attribute:: M_CLOSE


.. py:class:: Operation(tokens=None)

   Bases: :py:obj:`TokenList`


   Grouping of operations


.. py:class:: Values(tokens=None)

   Bases: :py:obj:`TokenList`


   Grouping of values


.. py:class:: Command(tokens=None)

   Bases: :py:obj:`TokenList`


   Grouping of CLI commands.


