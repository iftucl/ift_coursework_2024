prettytable.prettytable
=======================

.. py:module:: prettytable.prettytable


Attributes
----------

.. autoapisummary::

   prettytable.prettytable.TYPE_CHECKING
   prettytable.prettytable.BASE_ALIGN_VALUE
   prettytable.prettytable.RowType
   prettytable.prettytable.AlignType
   prettytable.prettytable.VAlignType
   prettytable.prettytable.HeaderStyleType


Classes
-------

.. autoapisummary::

   prettytable.prettytable.HRuleStyle
   prettytable.prettytable.VRuleStyle
   prettytable.prettytable.TableStyle
   prettytable.prettytable.OptionsType
   prettytable.prettytable.PrettyTable
   prettytable.prettytable.TableHandler


Functions
---------

.. autoapisummary::

   prettytable.prettytable.from_csv
   prettytable.prettytable.from_db_cursor
   prettytable.prettytable.from_json
   prettytable.prettytable.from_html
   prettytable.prettytable.from_html_one
   prettytable.prettytable.from_mediawiki


Module Contents
---------------

.. py:data:: TYPE_CHECKING
   :value: False


.. py:class:: HRuleStyle

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: FRAME
      :value: 0



   .. py:attribute:: ALL
      :value: 1



   .. py:attribute:: NONE
      :value: 2



   .. py:attribute:: HEADER
      :value: 3



.. py:class:: VRuleStyle

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: FRAME
      :value: 0



   .. py:attribute:: ALL
      :value: 1



   .. py:attribute:: NONE
      :value: 2



.. py:class:: TableStyle

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: DEFAULT
      :value: 10



   .. py:attribute:: MSWORD_FRIENDLY
      :value: 11



   .. py:attribute:: PLAIN_COLUMNS
      :value: 12



   .. py:attribute:: MARKDOWN
      :value: 13



   .. py:attribute:: ORGMODE
      :value: 14



   .. py:attribute:: DOUBLE_BORDER
      :value: 15



   .. py:attribute:: SINGLE_BORDER
      :value: 16



   .. py:attribute:: RANDOM
      :value: 20



.. py:data:: BASE_ALIGN_VALUE
   :type:  Final
   :value: 'base_align_value'


.. py:data:: RowType
   :type:  typing_extensions.TypeAlias

.. py:data:: AlignType
   :type:  typing_extensions.TypeAlias

.. py:data:: VAlignType
   :type:  typing_extensions.TypeAlias

.. py:data:: HeaderStyleType
   :type:  typing_extensions.TypeAlias

.. py:class:: OptionsType

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: title
      :type:  str | None


   .. py:attribute:: start
      :type:  int


   .. py:attribute:: end
      :type:  int | None


   .. py:attribute:: fields
      :type:  collections.abc.Sequence[str | None] | None


   .. py:attribute:: header
      :type:  bool


   .. py:attribute:: use_header_width
      :type:  bool


   .. py:attribute:: border
      :type:  bool


   .. py:attribute:: preserve_internal_border
      :type:  bool


   .. py:attribute:: sortby
      :type:  str | None


   .. py:attribute:: reversesort
      :type:  bool


   .. py:attribute:: sort_key
      :type:  collections.abc.Callable[[RowType], _typeshed.SupportsRichComparison]


   .. py:attribute:: row_filter
      :type:  collections.abc.Callable[[RowType], bool]


   .. py:attribute:: attributes
      :type:  dict[str, str]


   .. py:attribute:: format
      :type:  bool


   .. py:attribute:: hrules
      :type:  HRuleStyle


   .. py:attribute:: vrules
      :type:  VRuleStyle


   .. py:attribute:: int_format
      :type:  str | dict[str, str] | None


   .. py:attribute:: float_format
      :type:  str | dict[str, str] | None


   .. py:attribute:: custom_format
      :type:  collections.abc.Callable[[str, Any], str] | dict[str, collections.abc.Callable[[str, Any], str]] | None


   .. py:attribute:: min_table_width
      :type:  int | None


   .. py:attribute:: max_table_width
      :type:  int | None


   .. py:attribute:: padding_width
      :type:  int


   .. py:attribute:: left_padding_width
      :type:  int | None


   .. py:attribute:: right_padding_width
      :type:  int | None


   .. py:attribute:: vertical_char
      :type:  str


   .. py:attribute:: horizontal_char
      :type:  str


   .. py:attribute:: horizontal_align_char
      :type:  str


   .. py:attribute:: junction_char
      :type:  str


   .. py:attribute:: header_style
      :type:  HeaderStyleType


   .. py:attribute:: xhtml
      :type:  bool


   .. py:attribute:: print_empty
      :type:  bool


   .. py:attribute:: oldsortslice
      :type:  bool


   .. py:attribute:: top_junction_char
      :type:  str


   .. py:attribute:: bottom_junction_char
      :type:  str


   .. py:attribute:: right_junction_char
      :type:  str


   .. py:attribute:: left_junction_char
      :type:  str


   .. py:attribute:: top_right_junction_char
      :type:  str


   .. py:attribute:: top_left_junction_char
      :type:  str


   .. py:attribute:: bottom_right_junction_char
      :type:  str


   .. py:attribute:: bottom_left_junction_char
      :type:  str


   .. py:attribute:: align
      :type:  dict[str, AlignType]


   .. py:attribute:: valign
      :type:  dict[str, VAlignType]


   .. py:attribute:: min_width
      :type:  int | dict[str, int] | None


   .. py:attribute:: max_width
      :type:  int | dict[str, int] | None


   .. py:attribute:: none_format
      :type:  str | dict[str, str | None] | None


   .. py:attribute:: escape_header
      :type:  bool


   .. py:attribute:: escape_data
      :type:  bool


   .. py:attribute:: break_on_hyphens
      :type:  bool


.. py:class:: PrettyTable(field_names: collections.abc.Sequence[str] | None = None, **kwargs)

   .. py:attribute:: orgmode
      :type:  bool


   .. py:attribute:: encoding


   .. py:property:: align

      Controls alignment of fields
      Arguments:

      align - alignment, one of "l", "c", or "r"


   .. py:property:: valign

      Controls vertical alignment of fields
      Arguments:

      valign - vertical alignment, one of "t", "m", or "b"


   .. py:property:: max_width

      Controls maximum width of fields
      Arguments:

      max_width - maximum width integer


   .. py:property:: min_width

      Controls minimum width of fields
      Arguments:

      min_width - minimum width integer


   .. py:property:: int_format

      Controls formatting of integer data
      Arguments:

      int_format - integer format string


   .. py:property:: float_format

      Controls formatting of floating point data
      Arguments:

      float_format - floating point format string


   .. py:property:: custom_format

      Controls formatting of any column using callable
      Arguments:

      custom_format - Dictionary of field_name and callable


   .. py:property:: rows
      :type: list[RowType]



   .. py:property:: dividers
      :type: list[bool]



   .. py:property:: xhtml
      :type: bool


      Print <br/> tags if True, <br> tags if False


   .. py:property:: none_format


   .. py:property:: field_names

      List or tuple of field names

      When setting field_names, if there are already field names the new list
      of field names must be the same length. Columns are renamed and row data
      remains unchanged.


   .. py:property:: min_table_width
      :type: int | None



   .. py:property:: max_table_width
      :type: int | None



   .. py:property:: fields
      :type: collections.abc.Sequence[str | None] | None


      List or tuple of field names to include in displays


   .. py:property:: title
      :type: str | None


      Optional table title

      Arguments:

      title - table title


   .. py:property:: start
      :type: int


      Start index of the range of rows to print

      Arguments:

      start - index of first data row to include in output


   .. py:property:: end
      :type: int | None


      End index of the range of rows to print

      Arguments:

      end - index of last data row to include in output PLUS ONE (list slice style)


   .. py:property:: sortby
      :type: str | None


      Name of field by which to sort rows

      Arguments:

      sortby - field name to sort by


   .. py:property:: reversesort
      :type: bool


      Controls direction of sorting (ascending vs descending)

      Arguments:

      reveresort - set to True to sort by descending order, or False to sort by
          ascending order


   .. py:property:: sort_key
      :type: collections.abc.Callable[[RowType], _typeshed.SupportsRichComparison]


      Sorting key function, applied to data points before sorting

      Arguments:

      sort_key - a function which takes one argument and returns something to be
      sorted


   .. py:property:: row_filter
      :type: collections.abc.Callable[[RowType], bool]


      Filter function, applied to data points

      Arguments:

      row_filter - a function which takes one argument and returns a Boolean


   .. py:property:: header
      :type: bool


      Controls printing of table header with field names

      Arguments:

      header - print a header showing field names (True or False)


   .. py:property:: use_header_width
      :type: bool


      Controls whether header is included in computing width

      Arguments:

      use_header_width - respect width of fieldname in header to calculate column
          width (True or False)


   .. py:property:: header_style
      :type: HeaderStyleType


      Controls stylisation applied to field names in header

      Arguments:

      header_style - stylisation to apply to field names in header
          ("cap", "title", "upper", "lower" or None)


   .. py:property:: border
      :type: bool


      Controls printing of border around table

      Arguments:

      border - print a border around the table (True or False)


   .. py:property:: preserve_internal_border
      :type: bool


      Controls printing of border inside table

      Arguments:

      preserve_internal_border - print a border inside the table even if
          border is disabled (True or False)


   .. py:property:: hrules
      :type: HRuleStyle


      Controls printing of horizontal rules after rows

      Arguments:

      hrules - horizontal rules style.  Allowed values: HRuleStyle


   .. py:property:: vrules
      :type: VRuleStyle


      Controls printing of vertical rules between columns

      Arguments:

      vrules - vertical rules style.  Allowed values: VRuleStyle


   .. py:property:: padding_width
      :type: int


      The number of empty spaces between a column's edge and its content

      Arguments:

      padding_width - number of spaces, must be a positive integer


   .. py:property:: left_padding_width
      :type: int | None


      The number of empty spaces between a column's left edge and its content

      Arguments:

      left_padding - number of spaces, must be a positive integer


   .. py:property:: right_padding_width
      :type: int | None


      The number of empty spaces between a column's right edge and its content

      Arguments:

      right_padding - number of spaces, must be a positive integer


   .. py:property:: vertical_char
      :type: str


      The character used when printing table borders to draw vertical lines

      Arguments:

      vertical_char - single character string used to draw vertical lines


   .. py:property:: horizontal_char
      :type: str


      The character used when printing table borders to draw horizontal lines

      Arguments:

      horizontal_char - single character string used to draw horizontal lines


   .. py:property:: horizontal_align_char
      :type: str


      The character used to indicate column alignment in horizontal lines

      Arguments:

      horizontal_align_char - single character string used to indicate alignment


   .. py:property:: junction_char
      :type: str


      The character used when printing table borders to draw line junctions

      Arguments:

      junction_char - single character string used to draw line junctions


   .. py:property:: top_junction_char
      :type: str


      The character used when printing table borders to draw top line junctions

      Arguments:

      top_junction_char - single character string used to draw top line junctions


   .. py:property:: bottom_junction_char
      :type: str


      The character used when printing table borders to draw bottom line junctions

      Arguments:

      bottom_junction_char -
          single character string used to draw bottom line junctions


   .. py:property:: right_junction_char
      :type: str


      The character used when printing table borders to draw right line junctions

      Arguments:

      right_junction_char -
          single character string used to draw right line junctions


   .. py:property:: left_junction_char
      :type: str


      The character used when printing table borders to draw left line junctions

      Arguments:

      left_junction_char - single character string used to draw left line junctions


   .. py:property:: top_right_junction_char
      :type: str


      The character used when printing table borders to draw top-right line junctions

      Arguments:

      top_right_junction_char -
          single character string used to draw top-right line junctions


   .. py:property:: top_left_junction_char
      :type: str


      The character used when printing table borders to draw top-left line junctions

      Arguments:

      top_left_junction_char -
          single character string used to draw top-left line junctions


   .. py:property:: bottom_right_junction_char
      :type: str


      



      The character used when printing table borders
         to draw bottom-right line junctions

      Arguments:

      bottom_right_junction_char -
          single character string used to draw bottom-right line junctions


   .. py:property:: bottom_left_junction_char
      :type: str


      



      The character used when printing table borders
         to draw bottom-left line junctions

      Arguments:

      bottom_left_junction_char -
          single character string used to draw bottom-left line junctions


   .. py:property:: format
      :type: bool


      Controls whether or not HTML tables are formatted to match styling options

      Arguments:

      format - True or False


   .. py:property:: print_empty
      :type: bool


      Controls whether or not empty tables produce a header and frame or just an
      empty string

      Arguments:

      print_empty - True or False


   .. py:property:: attributes
      :type: dict[str, str]


      A dictionary of HTML attribute name/value pairs to be included in the
      <table> tag when printing HTML

      Arguments:

      attributes - dictionary of attributes


   .. py:property:: oldsortslice
      :type: bool


      oldsortslice - Slice rows before sorting in the "old style"


   .. py:property:: escape_header
      :type: bool


      Escapes the text within a header (True or False)


   .. py:property:: escape_data
      :type: bool


      Escapes the text within a data field (True or False)


   .. py:property:: break_on_hyphens
      :type: bool


      Break longlines on hyphens (True or False)


   .. py:method:: set_style(style: TableStyle) -> None


   .. py:method:: add_rows(rows: collections.abc.Sequence[RowType], *, divider: bool = False) -> None

      Add rows to the table

      Arguments:

      rows - rows of data, should be an iterable of lists, each list with as many
      elements as the table has fields

      divider - add row divider after the row block



   .. py:method:: add_row(row: RowType, *, divider: bool = False) -> None

      Add a row to the table

      Arguments:

      row - row of data, should be a list with as many elements as the table
      has fields



   .. py:method:: del_row(row_index: int) -> None

      Delete a row from the table

      Arguments:

      row_index - The index of the row you want to delete.  Indexing starts at 0.



   .. py:method:: add_divider() -> None

      Add a divider to the table



   .. py:method:: add_column(fieldname: str, column: collections.abc.Sequence[Any], align: AlignType = 'c', valign: VAlignType = 't') -> None

      Add a column to the table.

      Arguments:

      fieldname - name of the field to contain the new column of data
      column - column of data, should be a list with as many elements as the
      table has rows
      align - desired alignment for this column - "l" for left, "c" for centre and
          "r" for right
      valign - desired vertical alignment for new columns - "t" for top,
          "m" for middle and "b" for bottom



   .. py:method:: add_autoindex(fieldname: str = 'Index') -> None

      Add an auto-incrementing index column to the table.
      Arguments:
      fieldname - name of the field to contain the new column of data



   .. py:method:: del_column(fieldname: str) -> None

      Delete a column from the table

      Arguments:

      fieldname - The field name of the column you want to delete.



   .. py:method:: clear_rows() -> None

      Delete all rows from the table but keep the current field names



   .. py:method:: clear() -> None

      Delete all rows and field names from the table, maintaining nothing but
      styling options



   .. py:method:: copy() -> typing_extensions.Self


   .. py:method:: get_formatted_string(out_format: str = 'text', **kwargs) -> str

      Return string representation of specified format of table in current state.

      Arguments:
      out_format - resulting table format
      kwargs - passed through to function that performs formatting



   .. py:method:: get_string(**kwargs) -> str

      Return string representation of table in current state.

      Arguments:

      title - optional table title
      start - index of first data row to include in output
      end - index of last data row to include in output PLUS ONE (list slice style)
      fields - names of fields (columns) to include
      header - print a header showing field names (True or False)
      use_header_width - reflect width of header (True or False)
      border - print a border around the table (True or False)
      preserve_internal_border - print a border inside the table even if
          border is disabled (True or False)
      hrules - controls printing of horizontal rules after rows.
          Allowed values: HRuleStyle
      vrules - controls printing of vertical rules between columns.
          Allowed values: VRuleStyle
      int_format - controls formatting of integer data
      float_format - controls formatting of floating point data
      custom_format - controls formatting of any column using callable
      padding_width - number of spaces on either side of column data (only used if
          left and right paddings are None)
      left_padding_width - number of spaces on left hand side of column data
      right_padding_width - number of spaces on right hand side of column data
      vertical_char - single character string used to draw vertical lines
      horizontal_char - single character string used to draw horizontal lines
      horizontal_align_char - single character string used to indicate alignment
      junction_char - single character string used to draw line junctions
      junction_char - single character string used to draw line junctions
      top_junction_char - single character string used to draw top line junctions
      bottom_junction_char -
          single character string used to draw bottom line junctions
      right_junction_char - single character string used to draw right line junctions
      left_junction_char - single character string used to draw left line junctions
      top_right_junction_char -
          single character string used to draw top-right line junctions
      top_left_junction_char -
          single character string used to draw top-left line junctions
      bottom_right_junction_char -
          single character string used to draw bottom-right line junctions
      bottom_left_junction_char -
          single character string used to draw bottom-left line junctions
      sortby - name of field to sort rows by
      sort_key - sorting key function, applied to data points before sorting
      reversesort - True or False to sort in descending or ascending order
      row_filter - filter function applied on rows
      print empty - if True, stringify just the header for an empty table,
          if False return an empty string



   .. py:method:: paginate(page_length: int = 58, line_break: str = '\x0c', **kwargs) -> str


   .. py:method:: get_csv_string(**kwargs) -> str

      Return string representation of CSV formatted table in the current state

      Keyword arguments are first interpreted as table formatting options, and
      then any unused keyword arguments are passed to csv.writer(). For
      example, get_csv_string(header=False, delimiter='       ') would use
      header as a PrettyTable formatting option (skip the header row) and
      delimiter as a csv.writer keyword argument.



   .. py:method:: get_json_string(**kwargs) -> str

      Return string representation of JSON formatted table in the current state

      Keyword arguments are first interpreted as table formatting options, and
      then any unused keyword arguments are passed to json.dumps(). For
      example, get_json_string(header=False, indent=2) would use header as
      a PrettyTable formatting option (skip the header row) and indent as a
      json.dumps keyword argument.



   .. py:method:: get_html_string(**kwargs) -> str

      Return string representation of HTML formatted version of table in current
      state.

      Arguments:

      title - optional table title
      start - index of first data row to include in output
      end - index of last data row to include in output PLUS ONE (list slice style)
      fields - names of fields (columns) to include
      header - print a header showing field names (True or False)
      escape_header - escapes the text within a header (True or False)
      border - print a border around the table (True or False)
      preserve_internal_border - print a border inside the table even if
          border is disabled (True or False)
      hrules - controls printing of horizontal rules after rows.
          Allowed values: HRuleStyle
      vrules - controls printing of vertical rules between columns.
          Allowed values: VRuleStyle
      int_format - controls formatting of integer data
      float_format - controls formatting of floating point data
      custom_format - controls formatting of any column using callable
      padding_width - number of spaces on either side of column data (only used if
          left and right paddings are None)
      left_padding_width - number of spaces on left hand side of column data
      right_padding_width - number of spaces on right hand side of column data
      sortby - name of field to sort rows by
      sort_key - sorting key function, applied to data points before sorting
      row_filter - filter function applied on rows
      attributes - dictionary of name/value pairs to include as HTML attributes in the
          <table> tag
      format - Controls whether or not HTML tables are formatted to match
          styling options (True or False)
      escape_data - escapes the text within a data field (True or False)
      xhtml - print <br/> tags if True, <br> tags if False
      break_on_hyphens - Whether long lines are broken on hypens or not, default: True



   .. py:method:: get_latex_string(**kwargs) -> str

      Return string representation of LaTex formatted version of table in current
      state.

      Arguments:

      start - index of first data row to include in output
      end - index of last data row to include in output PLUS ONE (list slice style)
      fields - names of fields (columns) to include
      header - print a header showing field names (True or False)
      border - print a border around the table (True or False)
      preserve_internal_border - print a border inside the table even if
          border is disabled (True or False)
      hrules - controls printing of horizontal rules after rows.
          Allowed values: HRuleStyle
      vrules - controls printing of vertical rules between columns.
          Allowed values: VRuleStyle
      int_format - controls formatting of integer data
      float_format - controls formatting of floating point data
      sortby - name of field to sort rows by
      sort_key - sorting key function, applied to data points before sorting
      row_filter - filter function applied on rows
      format - Controls whether or not HTML tables are formatted to match
          styling options (True or False)



   .. py:method:: get_mediawiki_string(**kwargs) -> str

      Return string representation of the table in MediaWiki table markup.
      The generated markup follows simple MediaWiki syntax. For example:
          {| class="wikitable"
          |+ Optional caption
          |-
          ! Header1 !! Header2 !! Header3
          |-
          | Data1 || Data2 || Data3
          |-
          | Data4 || Data5 || Data6
          |}



.. py:function:: from_csv(fp, field_names: collections.abc.Sequence[str] | None = None, **kwargs) -> PrettyTable

.. py:function:: from_db_cursor(cursor: sqlite3.Cursor, **kwargs) -> PrettyTable | None

.. py:function:: from_json(json_string: str | bytes, **kwargs) -> PrettyTable

.. py:class:: TableHandler(**kwargs)

   Bases: :py:obj:`html.parser.HTMLParser`


   Find tags and other markup and call handler functions.

   Usage:
       p = HTMLParser()
       p.feed(data)
       ...
       p.close()

   Start tags are handled by calling self.handle_starttag() or
   self.handle_startendtag(); end tags by self.handle_endtag().  The
   data between tags is passed from the parser to the derived class
   by calling self.handle_data() with the data as argument (the data
   may be split up in arbitrary chunks).  If convert_charrefs is
   True the character references are converted automatically to the
   corresponding Unicode character (and self.handle_data() is no
   longer split in chunks), otherwise they are passed by calling
   self.handle_entityref() or self.handle_charref() with the string
   containing respectively the named or numeric reference as the
   argument.


   .. py:attribute:: kwargs


   .. py:attribute:: tables
      :type:  list[PrettyTable]
      :value: []



   .. py:attribute:: last_row
      :type:  list[str]
      :value: []



   .. py:attribute:: rows
      :type:  list[tuple[list[str], bool]]
      :value: []



   .. py:attribute:: max_row_width
      :value: 0



   .. py:attribute:: active
      :type:  str | None
      :value: None



   .. py:attribute:: last_content
      :value: ''



   .. py:attribute:: is_last_row_header
      :value: False



   .. py:attribute:: colspan
      :value: 0



   .. py:method:: handle_starttag(tag: str, attrs: list[tuple[str, str | None]]) -> None


   .. py:method:: handle_endtag(tag: str) -> None


   .. py:method:: handle_data(data: str) -> None


   .. py:method:: generate_table(rows: list[tuple[list[str], bool]]) -> PrettyTable

      Generates from a list of rows a PrettyTable object.



   .. py:method:: make_fields_unique(fields: list[str]) -> None

      iterates over the row and make each field unique



.. py:function:: from_html(html_code: str, **kwargs) -> list[PrettyTable]

   Generates a list of PrettyTables from a string of HTML code. Each <table> in
   the HTML becomes one PrettyTable object.


.. py:function:: from_html_one(html_code: str, **kwargs) -> PrettyTable

   Generates a PrettyTable from a string of HTML code which contains only a
   single <table>


.. py:function:: from_mediawiki(wiki_text: str, **kwargs) -> PrettyTable

   Returns a PrettyTable instance from simple MediaWiki table markup.
   Note that the table should have a header row.
   Arguments:
   wiki_text -- Multiline string containing MediaWiki table markup
   (Enter within '''   ''')


