simplejson.decoder
==================

.. py:module:: simplejson.decoder

.. autoapi-nested-parse::

   Implementation of JSONDecoder



Classes
-------

.. autoapisummary::

   simplejson.decoder.JSONDecoder


Module Contents
---------------

.. py:class:: JSONDecoder(encoding=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None, allow_nan=False)

   Bases: :py:obj:`object`


   Simple JSON <http://json.org> decoder

   Performs the following translations in decoding by default:

   +---------------+-------------------+
   | JSON          | Python            |
   +===============+===================+
   | object        | dict              |
   +---------------+-------------------+
   | array         | list              |
   +---------------+-------------------+
   | string        | str, unicode      |
   +---------------+-------------------+
   | number (int)  | int, long         |
   +---------------+-------------------+
   | number (real) | float             |
   +---------------+-------------------+
   | true          | True              |
   +---------------+-------------------+
   | false         | False             |
   +---------------+-------------------+
   | null          | None              |
   +---------------+-------------------+

   When allow_nan=True, it also understands
   ``NaN``, ``Infinity``, and ``-Infinity`` as
   their corresponding ``float`` values, which is outside the JSON spec.



   .. py:attribute:: encoding
      :value: None



   .. py:attribute:: object_hook
      :value: None



   .. py:attribute:: object_pairs_hook
      :value: None



   .. py:attribute:: parse_float


   .. py:attribute:: parse_int


   .. py:attribute:: parse_constant
      :value: None



   .. py:attribute:: strict
      :value: True



   .. py:attribute:: parse_object


   .. py:attribute:: parse_array


   .. py:attribute:: parse_string


   .. py:attribute:: memo


   .. py:attribute:: scan_once


   .. py:method:: decode(s, _w=WHITESPACE.match, _PY3=PY3)

      Return the Python representation of ``s`` (a ``str`` or ``unicode``
      instance containing a JSON document)




   .. py:method:: raw_decode(s, idx=0, _w=WHITESPACE.match, _PY3=PY3)

      Decode a JSON document from ``s`` (a ``str`` or ``unicode``
      beginning with a JSON document) and return a 2-tuple of the Python
      representation and the index in ``s`` where the document ended.
      Optionally, ``idx`` can be used to specify an offset in ``s`` where
      the JSON document begins.

      This can be used to decode a JSON document from a string that may
      have extraneous data at the end.




