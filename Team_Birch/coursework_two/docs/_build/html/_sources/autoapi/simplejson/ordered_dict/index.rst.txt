simplejson.ordered_dict
=======================

.. py:module:: simplejson.ordered_dict

.. autoapi-nested-parse::

   Drop-in replacement for collections.OrderedDict by Raymond Hettinger

   http://code.activestate.com/recipes/576693/



Classes
-------

.. autoapisummary::

   simplejson.ordered_dict.OrderedDict


Module Contents
---------------

.. py:class:: OrderedDict(*args, **kwds)

   Bases: :py:obj:`dict`, :py:obj:`UserDict.DictMixin`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:method:: clear()

      D.clear() -> None.  Remove all items from D.



   .. py:method:: popitem(last=True)

      Remove and return a (key, value) pair as a 2-tuple.

      Pairs are returned in LIFO (last-in, first-out) order.
      Raises KeyError if the dict is empty.



   .. py:method:: keys()

      D.keys() -> a set-like object providing a view on D's keys



   .. py:attribute:: setdefault

      Insert key with a value of default if key is not in the dictionary.

      Return the value for key if key is in the dictionary, else default.


   .. py:attribute:: update

      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
      In either case, this is followed by: for k in F:  D[k] = F[k]


   .. py:attribute:: pop

      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

      If the key is not found, return the default if given; otherwise,
      raise a KeyError.


   .. py:attribute:: values

      D.values() -> an object providing a view on D's values


   .. py:attribute:: items

      D.items() -> a set-like object providing a view on D's items


   .. py:attribute:: iterkeys


   .. py:attribute:: itervalues


   .. py:attribute:: iteritems


   .. py:method:: copy()

      D.copy() -> a shallow copy of D



   .. py:method:: fromkeys(iterable, value=None)
      :classmethod:



