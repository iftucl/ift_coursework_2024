jinja2.utils
============

.. py:module:: jinja2.utils


Attributes
----------

.. autoapisummary::

   jinja2.utils.F
   jinja2.utils.missing
   jinja2.utils.internal_code
   jinja2.utils.concat


Classes
-------

.. autoapisummary::

   jinja2.utils.LRUCache
   jinja2.utils.Cycler
   jinja2.utils.Joiner
   jinja2.utils.Namespace


Functions
---------

.. autoapisummary::

   jinja2.utils.pass_context
   jinja2.utils.pass_eval_context
   jinja2.utils.pass_environment
   jinja2.utils.internalcode
   jinja2.utils.is_undefined
   jinja2.utils.consume
   jinja2.utils.clear_caches
   jinja2.utils.import_string
   jinja2.utils.open_if_exists
   jinja2.utils.object_type_repr
   jinja2.utils.pformat
   jinja2.utils.urlize
   jinja2.utils.generate_lorem_ipsum
   jinja2.utils.url_quote
   jinja2.utils.select_autoescape
   jinja2.utils.htmlsafe_json_dumps


Module Contents
---------------

.. py:data:: F

.. py:data:: missing
   :type:  Any

   Special singleton representing missing values for the runtime.

.. py:data:: internal_code
   :type:  MutableSet[types.CodeType]

.. py:data:: concat

.. py:function:: pass_context(f: F) -> F

   Pass the :class:`~jinja2.runtime.Context` as the first argument
   to the decorated function when called while rendering a template.

   Can be used on functions, filters, and tests.

   If only ``Context.eval_context`` is needed, use
   :func:`pass_eval_context`. If only ``Context.environment`` is
   needed, use :func:`pass_environment`.

   .. versionadded:: 3.0.0
       Replaces ``contextfunction`` and ``contextfilter``.


.. py:function:: pass_eval_context(f: F) -> F

   Pass the :class:`~jinja2.nodes.EvalContext` as the first argument
   to the decorated function when called while rendering a template.
   See :ref:`eval-context`.

   Can be used on functions, filters, and tests.

   If only ``EvalContext.environment`` is needed, use
   :func:`pass_environment`.

   .. versionadded:: 3.0.0
       Replaces ``evalcontextfunction`` and ``evalcontextfilter``.


.. py:function:: pass_environment(f: F) -> F

   Pass the :class:`~jinja2.Environment` as the first argument to
   the decorated function when called while rendering a template.

   Can be used on functions, filters, and tests.

   .. versionadded:: 3.0.0
       Replaces ``environmentfunction`` and ``environmentfilter``.


.. py:function:: internalcode(f: F) -> F

   Marks the function as internally used


.. py:function:: is_undefined(obj: Any) -> bool

   Check if the object passed is undefined.  This does nothing more than
   performing an instance check against :class:`Undefined` but looks nicer.
   This can be used for custom filters or tests that want to react to
   undefined variables.  For example a custom default filter can look like
   this::

       def default(var, default=''):
           if is_undefined(var):
               return default
           return var


.. py:function:: consume(iterable: Iterable[Any]) -> None

   Consumes an iterable without doing anything with it.


.. py:function:: clear_caches() -> None

   Jinja keeps internal caches for environments and lexers.  These are
   used so that Jinja doesn't have to recreate environments and lexers all
   the time.  Normally you don't have to care about that but if you are
   measuring memory consumption you may want to clean the caches.


.. py:function:: import_string(import_name: str, silent: bool = False) -> Any

   Imports an object based on a string.  This is useful if you want to
   use import paths as endpoints or something similar.  An import path can
   be specified either in dotted notation (``xml.sax.saxutils.escape``)
   or with a colon as object delimiter (``xml.sax.saxutils:escape``).

   If the `silent` is True the return value will be `None` if the import
   fails.

   :return: imported object


.. py:function:: open_if_exists(filename: str, mode: str = 'rb') -> Optional[IO[Any]]

   Returns a file descriptor for the filename if that file exists,
   otherwise ``None``.


.. py:function:: object_type_repr(obj: Any) -> str

   Returns the name of the object's type.  For some recognized
   singletons the name of the object is returned instead. (For
   example for `None` and `Ellipsis`).


.. py:function:: pformat(obj: Any) -> str

   Format an object using :func:`pprint.pformat`.


.. py:function:: urlize(text: str, trim_url_limit: Optional[int] = None, rel: Optional[str] = None, target: Optional[str] = None, extra_schemes: Optional[Iterable[str]] = None) -> str

   Convert URLs in text into clickable links.

   This may not recognize links in some situations. Usually, a more
   comprehensive formatter, such as a Markdown library, is a better
   choice.

   Works on ``http://``, ``https://``, ``www.``, ``mailto:``, and email
   addresses. Links with trailing punctuation (periods, commas, closing
   parentheses) and leading punctuation (opening parentheses) are
   recognized excluding the punctuation. Email addresses that include
   header fields are not recognized (for example,
   ``mailto:address@example.com?cc=copy@example.com``).

   :param text: Original text containing URLs to link.
   :param trim_url_limit: Shorten displayed URL values to this length.
   :param target: Add the ``target`` attribute to links.
   :param rel: Add the ``rel`` attribute to links.
   :param extra_schemes: Recognize URLs that start with these schemes
       in addition to the default behavior.

   .. versionchanged:: 3.0
       The ``extra_schemes`` parameter was added.

   .. versionchanged:: 3.0
       Generate ``https://`` links for URLs without a scheme.

   .. versionchanged:: 3.0
       The parsing rules were updated. Recognize email addresses with
       or without the ``mailto:`` scheme. Validate IP addresses. Ignore
       parentheses and brackets in more cases.


.. py:function:: generate_lorem_ipsum(n: int = 5, html: bool = True, min: int = 20, max: int = 100) -> str

   Generate some lorem ipsum for the template.


.. py:function:: url_quote(obj: Any, charset: str = 'utf-8', for_qs: bool = False) -> str

   Quote a string for use in a URL using the given charset.

   :param obj: String or bytes to quote. Other types are converted to
       string then encoded to bytes using the given charset.
   :param charset: Encode text to bytes using this charset.
   :param for_qs: Quote "/" and use "+" for spaces.


.. py:class:: LRUCache(capacity: int)

   A simple LRU Cache implementation.


   .. py:attribute:: capacity


   .. py:method:: copy() -> typing_extensions.Self

      Return a shallow copy of the instance.



   .. py:method:: get(key: Any, default: Any = None) -> Any

      Return an item from the cache dict or `default`



   .. py:method:: setdefault(key: Any, default: Any = None) -> Any

      Set `default` if the key is not in the cache otherwise
      leave unchanged. Return the value of this key.



   .. py:method:: clear() -> None

      Clear the cache.



   .. py:method:: items() -> Iterable[Tuple[Any, Any]]

      Return a list of items.



   .. py:method:: values() -> Iterable[Any]

      Return a list of all values.



   .. py:method:: keys() -> Iterable[Any]

      Return a list of all keys ordered by most recent usage.



.. py:function:: select_autoescape(enabled_extensions: Collection[str] = ('html', 'htm', 'xml'), disabled_extensions: Collection[str] = (), default_for_string: bool = True, default: bool = False) -> Callable[[Optional[str]], bool]

   Intelligently sets the initial value of autoescaping based on the
   filename of the template.  This is the recommended way to configure
   autoescaping if you do not want to write a custom function yourself.

   If you want to enable it for all templates created from strings or
   for all templates with `.html` and `.xml` extensions::

       from jinja2 import Environment, select_autoescape
       env = Environment(autoescape=select_autoescape(
           enabled_extensions=('html', 'xml'),
           default_for_string=True,
       ))

   Example configuration to turn it on at all times except if the template
   ends with `.txt`::

       from jinja2 import Environment, select_autoescape
       env = Environment(autoescape=select_autoescape(
           disabled_extensions=('txt',),
           default_for_string=True,
           default=True,
       ))

   The `enabled_extensions` is an iterable of all the extensions that
   autoescaping should be enabled for.  Likewise `disabled_extensions` is
   a list of all templates it should be disabled for.  If a template is
   loaded from a string then the default from `default_for_string` is used.
   If nothing matches then the initial value of autoescaping is set to the
   value of `default`.

   For security reasons this function operates case insensitive.

   .. versionadded:: 2.9


.. py:function:: htmlsafe_json_dumps(obj: Any, dumps: Optional[Callable[Ellipsis, str]] = None, **kwargs: Any) -> markupsafe.Markup

   Serialize an object to a string of JSON with :func:`json.dumps`,
   then replace HTML-unsafe characters with Unicode escapes and mark
   the result safe with :class:`~markupsafe.Markup`.

   This is available in templates as the ``|tojson`` filter.

   The following characters are escaped: ``<``, ``>``, ``&``, ``'``.

   The returned string is safe to render in HTML documents and
   ``<script>`` tags. The exception is in HTML attributes that are
   double quoted; either use single quotes or the ``|forceescape``
   filter.

   :param obj: The object to serialize to JSON.
   :param dumps: The ``dumps`` function to use. Defaults to
       ``env.policies["json.dumps_function"]``, which defaults to
       :func:`json.dumps`.
   :param kwargs: Extra arguments to pass to ``dumps``. Merged onto
       ``env.policies["json.dumps_kwargs"]``.

   .. versionchanged:: 3.0
       The ``dumper`` parameter is renamed to ``dumps``.

   .. versionadded:: 2.9


.. py:class:: Cycler(*items: Any)

   Cycle through values by yield them one at a time, then restarting
   once the end is reached. Available as ``cycler`` in templates.

   Similar to ``loop.cycle``, but can be used outside loops or across
   multiple loops. For example, render a list of folders and files in a
   list, alternating giving them "odd" and "even" classes.

   .. code-block:: html+jinja

       {% set row_class = cycler("odd", "even") %}
       <ul class="browser">
       {% for folder in folders %}
         <li class="folder {{ row_class.next() }}">{{ folder }}
       {% endfor %}
       {% for file in files %}
         <li class="file {{ row_class.next() }}">{{ file }}
       {% endfor %}
       </ul>

   :param items: Each positional argument will be yielded in the order
       given for each cycle.

   .. versionadded:: 2.1


   .. py:attribute:: items
      :value: ()



   .. py:attribute:: pos
      :value: 0



   .. py:method:: reset() -> None

      Resets the current item to the first item.



   .. py:property:: current
      :type: Any


      Return the current item. Equivalent to the item that will be
      returned next time :meth:`next` is called.


   .. py:method:: next() -> Any

      Return the current item, then advance :attr:`current` to the
      next item.



.. py:class:: Joiner(sep: str = ', ')

   A joining helper for templates.


   .. py:attribute:: sep
      :value: ', '



   .. py:attribute:: used
      :value: False



.. py:class:: Namespace(**kwargs: Any)

   A namespace object that can hold arbitrary attributes.  It may be
   initialized from a dictionary or with keyword arguments.


