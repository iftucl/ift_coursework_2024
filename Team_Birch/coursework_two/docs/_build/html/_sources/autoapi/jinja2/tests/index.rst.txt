jinja2.tests
============

.. py:module:: jinja2.tests

.. autoapi-nested-parse::

   Built-in template tests used with the ``is`` operator.



Attributes
----------

.. autoapisummary::

   jinja2.tests.TESTS


Functions
---------

.. autoapisummary::

   jinja2.tests.test_odd
   jinja2.tests.test_even
   jinja2.tests.test_divisibleby
   jinja2.tests.test_defined
   jinja2.tests.test_undefined
   jinja2.tests.test_filter
   jinja2.tests.test_test
   jinja2.tests.test_none
   jinja2.tests.test_boolean
   jinja2.tests.test_false
   jinja2.tests.test_true
   jinja2.tests.test_integer
   jinja2.tests.test_float
   jinja2.tests.test_lower
   jinja2.tests.test_upper
   jinja2.tests.test_string
   jinja2.tests.test_mapping
   jinja2.tests.test_number
   jinja2.tests.test_sequence
   jinja2.tests.test_sameas
   jinja2.tests.test_iterable
   jinja2.tests.test_escaped
   jinja2.tests.test_in


Module Contents
---------------

.. py:function:: test_odd(value: int) -> bool

   Return true if the variable is odd.


.. py:function:: test_even(value: int) -> bool

   Return true if the variable is even.


.. py:function:: test_divisibleby(value: int, num: int) -> bool

   Check if a variable is divisible by a number.


.. py:function:: test_defined(value: Any) -> bool

   Return true if the variable is defined:

   .. sourcecode:: jinja

       {% if variable is defined %}
           value of variable: {{ variable }}
       {% else %}
           variable is not defined
       {% endif %}

   See the :func:`default` filter for a simple way to set undefined
   variables.


.. py:function:: test_undefined(value: Any) -> bool

   Like :func:`defined` but the other way round.


.. py:function:: test_filter(env: jinja2.environment.Environment, value: str) -> bool

   Check if a filter exists by name. Useful if a filter may be
   optionally available.

   .. code-block:: jinja

       {% if 'markdown' is filter %}
           {{ value | markdown }}
       {% else %}
           {{ value }}
       {% endif %}

   .. versionadded:: 3.0


.. py:function:: test_test(env: jinja2.environment.Environment, value: str) -> bool

   Check if a test exists by name. Useful if a test may be
   optionally available.

   .. code-block:: jinja

       {% if 'loud' is test %}
           {% if value is loud %}
               {{ value|upper }}
           {% else %}
               {{ value|lower }}
           {% endif %}
       {% else %}
           {{ value }}
       {% endif %}

   .. versionadded:: 3.0


.. py:function:: test_none(value: Any) -> bool

   Return true if the variable is none.


.. py:function:: test_boolean(value: Any) -> bool

   Return true if the object is a boolean value.

   .. versionadded:: 2.11


.. py:function:: test_false(value: Any) -> bool

   Return true if the object is False.

   .. versionadded:: 2.11


.. py:function:: test_true(value: Any) -> bool

   Return true if the object is True.

   .. versionadded:: 2.11


.. py:function:: test_integer(value: Any) -> bool

   Return true if the object is an integer.

   .. versionadded:: 2.11


.. py:function:: test_float(value: Any) -> bool

   Return true if the object is a float.

   .. versionadded:: 2.11


.. py:function:: test_lower(value: str) -> bool

   Return true if the variable is lowercased.


.. py:function:: test_upper(value: str) -> bool

   Return true if the variable is uppercased.


.. py:function:: test_string(value: Any) -> bool

   Return true if the object is a string.


.. py:function:: test_mapping(value: Any) -> bool

   Return true if the object is a mapping (dict etc.).

   .. versionadded:: 2.6


.. py:function:: test_number(value: Any) -> bool

   Return true if the variable is a number.


.. py:function:: test_sequence(value: Any) -> bool

   Return true if the variable is a sequence. Sequences are variables
   that are iterable.


.. py:function:: test_sameas(value: Any, other: Any) -> bool

   Check if an object points to the same memory address than another
   object:

   .. sourcecode:: jinja

       {% if foo.attribute is sameas false %}
           the foo attribute really is the `False` singleton
       {% endif %}


.. py:function:: test_iterable(value: Any) -> bool

   Check if it's possible to iterate over an object.


.. py:function:: test_escaped(value: Any) -> bool

   Check if the value is escaped.


.. py:function:: test_in(value: Any, seq: Container[Any]) -> bool

   Check if value is in seq.

   .. versionadded:: 2.10


.. py:data:: TESTS

