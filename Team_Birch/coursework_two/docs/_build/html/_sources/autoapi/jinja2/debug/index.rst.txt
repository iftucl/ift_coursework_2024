jinja2.debug
============

.. py:module:: jinja2.debug


Functions
---------

.. autoapisummary::

   jinja2.debug.rewrite_traceback_stack
   jinja2.debug.fake_traceback
   jinja2.debug.get_template_locals


Module Contents
---------------

.. py:function:: rewrite_traceback_stack(source: Optional[str] = None) -> BaseException

   Rewrite the current exception to replace any tracebacks from
   within compiled template code with tracebacks that look like they
   came from the template source.

   This must be called within an ``except`` block.

   :param source: For ``TemplateSyntaxError``, the original source if
       known.
   :return: The original exception with the rewritten traceback.


.. py:function:: fake_traceback(exc_value: BaseException, tb: Optional[types.TracebackType], filename: str, lineno: int) -> types.TracebackType

   Produce a new traceback object that looks like it came from the
   template source instead of the compiled code. The filename, line
   number, and location name will point to the template, and the local
   variables will be the current template context.

   :param exc_value: The original exception to be re-raised to create
       the new traceback.
   :param tb: The original traceback to get the local variables and
       code info from.
   :param filename: The template filename.
   :param lineno: The line number in the template source.


.. py:function:: get_template_locals(real_locals: Mapping[str, Any]) -> Dict[str, Any]

   Based on the runtime locals, get the context that would be
   available at that point in the template.


