jinja2.meta
===========

.. py:module:: jinja2.meta

.. autoapi-nested-parse::

   Functions that expose information about templates that might be
   interesting for introspection.



Classes
-------

.. autoapisummary::

   jinja2.meta.TrackingCodeGenerator


Functions
---------

.. autoapisummary::

   jinja2.meta.find_undeclared_variables
   jinja2.meta.find_referenced_templates


Module Contents
---------------

.. py:class:: TrackingCodeGenerator(environment: jinja2.environment.Environment)

   Bases: :py:obj:`jinja2.compiler.CodeGenerator`


   We abuse the code generator for introspection.


   .. py:attribute:: undeclared_identifiers
      :type:  Set[str]


   .. py:method:: write(x: str) -> None

      Don't write.



   .. py:method:: enter_frame(frame: jinja2.compiler.Frame) -> None

      Remember all undeclared identifiers.



.. py:function:: find_undeclared_variables(ast: jinja2.nodes.Template) -> Set[str]

   Returns a set of all variables in the AST that will be looked up from
   the context at runtime.  Because at compile time it's not known which
   variables will be used depending on the path the execution takes at
   runtime, all variables are returned.

   >>> from jinja2 import Environment, meta
   >>> env = Environment()
   >>> ast = env.parse('{% set foo = 42 %}{{ bar + foo }}')
   >>> meta.find_undeclared_variables(ast) == {'bar'}
   True

   .. admonition:: Implementation

      Internally the code generator is used for finding undeclared variables.
      This is good to know because the code generator might raise a
      :exc:`TemplateAssertionError` during compilation and as a matter of
      fact this function can currently raise that exception as well.


.. py:function:: find_referenced_templates(ast: jinja2.nodes.Template) -> Iterator[Optional[str]]

   Finds all the referenced templates from the AST.  This will return an
   iterator over all the hardcoded template extensions, inclusions and
   imports.  If dynamic inheritance or inclusion is used, `None` will be
   yielded.

   >>> from jinja2 import Environment, meta
   >>> env = Environment()
   >>> ast = env.parse('{% extends "layout.html" %}{% include helper %}')
   >>> list(meta.find_referenced_templates(ast))
   ['layout.html', None]

   This function is useful for dependency tracking.  For example if you want
   to rebuild parts of the website after a layout template has changed.


