jinja2.exceptions
=================

.. py:module:: jinja2.exceptions


Exceptions
----------

.. autoapisummary::

   jinja2.exceptions.TemplateError
   jinja2.exceptions.TemplateNotFound
   jinja2.exceptions.TemplatesNotFound
   jinja2.exceptions.TemplateSyntaxError
   jinja2.exceptions.TemplateAssertionError
   jinja2.exceptions.TemplateRuntimeError
   jinja2.exceptions.UndefinedError
   jinja2.exceptions.SecurityError
   jinja2.exceptions.FilterArgumentError


Module Contents
---------------

.. py:exception:: TemplateError(message: Optional[str] = None)

   Bases: :py:obj:`Exception`


   Baseclass for all template errors.


   .. py:property:: message
      :type: Optional[str]



.. py:exception:: TemplateNotFound(name: Optional[Union[str, jinja2.runtime.Undefined]], message: Optional[str] = None)

   Bases: :py:obj:`OSError`, :py:obj:`LookupError`, :py:obj:`TemplateError`


   Raised if a template does not exist.

   .. versionchanged:: 2.11
       If the given name is :class:`Undefined` and no message was
       provided, an :exc:`UndefinedError` is raised.


   .. py:attribute:: message
      :type:  Optional[str]
      :value: None



   .. py:attribute:: name


   .. py:attribute:: templates


.. py:exception:: TemplatesNotFound(names: Sequence[Union[str, jinja2.runtime.Undefined]] = (), message: Optional[str] = None)

   Bases: :py:obj:`TemplateNotFound`


   Like :class:`TemplateNotFound` but raised if multiple templates
   are selected.  This is a subclass of :class:`TemplateNotFound`
   exception, so just catching the base exception will catch both.

   .. versionchanged:: 2.11
       If a name in the list of names is :class:`Undefined`, a message
       about it being undefined is shown rather than the empty string.

   .. versionadded:: 2.2


   .. py:attribute:: templates
      :value: []



.. py:exception:: TemplateSyntaxError(message: str, lineno: int, name: Optional[str] = None, filename: Optional[str] = None)

   Bases: :py:obj:`TemplateError`


   Raised to tell the user that there is a problem with the template.


   .. py:attribute:: lineno


   .. py:attribute:: name
      :value: None



   .. py:attribute:: filename
      :value: None



   .. py:attribute:: source
      :type:  Optional[str]
      :value: None



   .. py:attribute:: translated
      :value: False



.. py:exception:: TemplateAssertionError(message: str, lineno: int, name: Optional[str] = None, filename: Optional[str] = None)

   Bases: :py:obj:`TemplateSyntaxError`


   Like a template syntax error, but covers cases where something in the
   template caused an error at compile time that wasn't necessarily caused
   by a syntax error.  However it's a direct subclass of
   :exc:`TemplateSyntaxError` and has the same attributes.


.. py:exception:: TemplateRuntimeError(message: Optional[str] = None)

   Bases: :py:obj:`TemplateError`


   A generic runtime error in the template engine.  Under some situations
   Jinja may raise this exception.


.. py:exception:: UndefinedError(message: Optional[str] = None)

   Bases: :py:obj:`TemplateRuntimeError`


   Raised if a template tries to operate on :class:`Undefined`.


.. py:exception:: SecurityError(message: Optional[str] = None)

   Bases: :py:obj:`TemplateRuntimeError`


   Raised if a template tries to do something insecure if the
   sandbox is enabled.


.. py:exception:: FilterArgumentError(message: Optional[str] = None)

   Bases: :py:obj:`TemplateRuntimeError`


   This error is raised if a filter was called with inappropriate
   arguments


