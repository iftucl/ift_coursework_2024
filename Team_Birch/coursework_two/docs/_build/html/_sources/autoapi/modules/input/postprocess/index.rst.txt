modules.input.postprocess
=========================

.. py:module:: modules.input.postprocess

.. autoapi-nested-parse::

   Handles normalization, validation, and postprocessing of extracted CSR indicator values.



Attributes
----------

.. autoapisummary::

   modules.input.postprocess.logger
   modules.input.postprocess.UNIT_NORMALIZATION
   modules.input.postprocess.SCALE_MULTIPLIERS
   modules.input.postprocess.GALLON_TO_CUBIC_METERS
   modules.input.postprocess.BLOCKED_UNITS


Functions
---------

.. autoapisummary::

   modules.input.postprocess.normalize_unit_and_number
   modules.input.postprocess.extract_numeric
   modules.input.postprocess.validate_value
   modules.input.postprocess.postprocess_value


Module Contents
---------------

.. py:data:: logger

.. py:data:: UNIT_NORMALIZATION

.. py:data:: SCALE_MULTIPLIERS

.. py:data:: GALLON_TO_CUBIC_METERS
   :value: 0.00378541


.. py:data:: BLOCKED_UNITS

.. py:function:: normalize_unit_and_number(raw_value: str, expected_unit: str) -> str

   Normalizes raw extracted values to expected units.

   :param raw_value: Raw extracted string.
   :type raw_value: str
   :param expected_unit: Expected standardized unit.
   :type expected_unit: str

   :returns: Normalized value or "N/A" if invalid.
   :rtype: str


.. py:function:: extract_numeric(value: str) -> float

   Extracts numeric value from a string.

   :param value: Input value as string.
   :type value: str

   :returns: Extracted numeric value or None if parsing fails.
   :rtype: float


.. py:function:: validate_value(value: str, rules: dict) -> dict

   Validates a numeric value against defined rules.

   :param value: Value to validate.
   :type value: str
   :param rules: Validation rule set with min, max, warn_above keys.
   :type rules: dict

   :returns: Validation result containing flags and numeric value.
   :rtype: dict


.. py:function:: postprocess_value(raw_value: str, expected_unit: str, validation_rules: dict, expected_type: str = 'float', aim: str = 'reduction') -> dict

   Postprocesses and validates an extracted CSR indicator value.

   :param raw_value: Raw extracted value string.
   :type raw_value: str
   :param expected_unit: Expected unit for normalization.
   :type expected_unit: str
   :param validation_rules: Validation rules for the value.
   :type validation_rules: dict
   :param expected_type: Expected data type ("float" or "int"). Defaults to "float".
   :type expected_type: str, optional
   :param aim: Aim of the indicator ("reduction" or "increase"). Defaults to "reduction".
   :type aim: str, optional

   :returns: Processed result including normalized value, validation status, and warnings.
   :rtype: dict


