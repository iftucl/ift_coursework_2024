modules.input.emissions_parser
==============================

.. py:module:: modules.input.emissions_parser

.. autoapi-nested-parse::

   Handles extraction of CSR indicators from PDF files using DeepSeek API.

   Includes text parsing, relevance detection, DeepSeek querying, postprocessing, and CSV output.



Attributes
----------

.. autoapisummary::

   modules.input.emissions_parser.logger
   modules.input.emissions_parser.UNIT_PATTERN
   modules.input.emissions_parser.session


Functions
---------

.. autoapisummary::

   modules.input.emissions_parser.build_alias_map
   modules.input.emissions_parser.build_indicator_labels
   modules.input.emissions_parser.extract_keywords
   modules.input.emissions_parser.is_relevant_chunk
   modules.input.emissions_parser.query_deepseek
   modules.input.emissions_parser.extract_indicators_from_bytes


Module Contents
---------------

.. py:data:: logger

.. py:data:: UNIT_PATTERN

.. py:function:: build_alias_map(indicator_config)

   Builds a mapping from indicator aliases to canonical indicator names.

   :param indicator_config: List of indicator group configurations.
   :type indicator_config: list

   :returns: Mapping from alias (lowercase) to canonical indicator name.
   :rtype: dict


.. py:function:: build_indicator_labels(indicator_config)

   Builds a flat list of all indicator names and aliases.

   :param indicator_config: List of indicator group configurations.
   :type indicator_config: list

   :returns: List of indicator names and aliases.
   :rtype: list


.. py:function:: extract_keywords(indicator_config: list) -> set

   Extracts all indicator names and aliases into a set of lowercase keywords.

   :param indicator_config: List of indicator group configurations.
   :type indicator_config: list

   :returns: Set of keywords for indicator matching.
   :rtype: set


.. py:function:: is_relevant_chunk(text: str, keywords: set) -> bool

   Determines if a text chunk is relevant based on presence of keywords and units.

   :param text: Text chunk to evaluate.
   :type text: str
   :param keywords: Set of indicator keywords.
   :type keywords: set

   :returns: True if the chunk is relevant, False otherwise.
   :rtype: bool


.. py:data:: session

.. py:function:: query_deepseek(api_key: str, pdf_text: str, indicator_config: list, extract_header: bool = False) -> str

   Sends extracted PDF text to DeepSeek API for CSR indicator extraction.

   :param api_key: DeepSeek API key.
   :type api_key: str
   :param pdf_text: Text extracted from the PDF.
   :type pdf_text: str
   :param indicator_config: Indicator configuration for prompts.
   :type indicator_config: list
   :param extract_header: Whether to only extract header metadata. Defaults to False.
   :type extract_header: bool, optional

   :returns: DeepSeek API extracted text response.
   :rtype: str


.. py:function:: extract_indicators_from_bytes(company_name: str, pdf_bytes: io.BytesIO, config_path: pathlib.Path, output_csv: pathlib.Path, log_path: pathlib.Path, source_filename: str = 'unknown_file.pdf')

   Extracts CSR indicators from a PDF byte stream and saves results to CSV.

   :param company_name: Company name for labeling extracted data.
   :type company_name: str
   :param pdf_bytes: Byte stream of the PDF file.
   :type pdf_bytes: BytesIO
   :param config_path: Path to the indicators configuration YAML.
   :type config_path: Path
   :param output_csv: Path to save extracted CSV output.
   :type output_csv: Path
   :param log_path: Path to save extraction logs.
   :type log_path: Path
   :param source_filename: Source file name for lineage tracking. Defaults to "unknown_file.pdf".
   :type source_filename: str, optional

   :returns:     - Dictionary mapping indicator names to extracted values.
                 - List of extracted lineage records for audit purposes.
   :rtype: tuple[dict, list]


