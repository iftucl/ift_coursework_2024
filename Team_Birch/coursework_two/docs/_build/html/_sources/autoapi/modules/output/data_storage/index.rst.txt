modules.output.data_storage
===========================

.. py:module:: modules.output.data_storage

.. autoapi-nested-parse::

   This script ensures the existence of a PostgreSQL table `csr_reporting.company_indicators`,
   creates it if missing, and then loads data from `company_indicators.csv` into the table.

   Workflow:
   1. Connects to the PostgreSQL database using environment variables from `.env`.
   2. Checks if the schema and table exist using `information_schema`.
   3. Creates the schema and table if they don't exist.
   4. Reads the cleaned CSR indicator data from a CSV file.
   5. Standardizes column names for SQL compatibility.
   6. Uses SQLAlchemy to insert the DataFrame into PostgreSQL using `to_sql`.



Attributes
----------

.. autoapisummary::

   modules.output.data_storage.schema_name
   modules.output.data_storage.table_name
   modules.output.data_storage.check_table_exists_query
   modules.output.data_storage.conn
   modules.output.data_storage.cur
   modules.output.data_storage.table_exists
   modules.output.data_storage.engine
   modules.output.data_storage.csv_path
   modules.output.data_storage.df


Module Contents
---------------

.. py:data:: schema_name
   :value: 'csr_reporting'


.. py:data:: table_name
   :value: 'company_indicators'


.. py:data:: check_table_exists_query
   :value: Multiline-String

   .. raw:: html

      <details><summary>Show Value</summary>

   .. code-block:: python

      """
      SELECT EXISTS (
          SELECT 1 
          FROM information_schema.tables 
          WHERE table_schema = 'csr_reporting' 
          AND table_name = 'company_indicators'
      );
      """

   .. raw:: html

      </details>



.. py:data:: conn

.. py:data:: cur

.. py:data:: table_exists

.. py:data:: engine
   :value: None


.. py:data:: csv_path
   :value: 'company_indicators.csv'


.. py:data:: df
   :value: None


