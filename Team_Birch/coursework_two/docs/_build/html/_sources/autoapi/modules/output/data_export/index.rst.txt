modules.output.data_export
==========================

.. py:module:: modules.output.data_export

.. autoapi-nested-parse::

   This script connects to a PostgreSQL database, exports two tables as CSVs,
   cleans and merges them based on company identifiers, and saves the merged output.

   Steps:
   1. Connects to PostgreSQL using environment variables via `dotenv`.
   2. Exports:
       - `csr_reporting.company_reports` to `company_reports.csv`
       - `csr_reporting.company_static` to `company_static.csv`
   3. Cleans `symbol` and `security` columns to ensure consistent casing and whitespace.
   4. Merges static metadata (`company_static`) with dynamic reports (`company_reports`) on symbol + security.
   5. Drops duplicates and saves the final merged data as `company_information.csv`.



Attributes
----------

.. autoapisummary::

   modules.output.data_export.conn
   modules.output.data_export.query1
   modules.output.data_export.df1
   modules.output.data_export.query2
   modules.output.data_export.df2
   modules.output.data_export.df1_cleaned
   modules.output.data_export.df1_cleaned
   modules.output.data_export.df1_subset
   modules.output.data_export.merged_df
   modules.output.data_export.df


Module Contents
---------------

.. py:data:: conn

.. py:data:: query1
   :value: 'SELECT * FROM csr_reporting.company_reports'


.. py:data:: df1
   :value: None


.. py:data:: query2
   :value: 'SELECT * FROM csr_reporting.company_static'


.. py:data:: df2
   :value: None


.. py:data:: df1_cleaned

.. py:data:: df1_cleaned

.. py:data:: df1_subset

.. py:data:: merged_df

.. py:data:: df

