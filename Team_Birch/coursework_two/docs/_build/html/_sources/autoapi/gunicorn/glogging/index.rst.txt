gunicorn.glogging
=================

.. py:module:: gunicorn.glogging


Attributes
----------

.. autoapisummary::

   gunicorn.glogging.SYSLOG_FACILITIES
   gunicorn.glogging.CONFIG_DEFAULTS


Classes
-------

.. autoapisummary::

   gunicorn.glogging.SafeAtoms
   gunicorn.glogging.Logger


Functions
---------

.. autoapisummary::

   gunicorn.glogging.loggers
   gunicorn.glogging.parse_syslog_address


Module Contents
---------------

.. py:data:: SYSLOG_FACILITIES

.. py:data:: CONFIG_DEFAULTS

.. py:function:: loggers()

   get list of all loggers


.. py:class:: SafeAtoms(atoms)

   Bases: :py:obj:`dict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


.. py:function:: parse_syslog_address(addr)

.. py:class:: Logger(cfg)

   Bases: :py:obj:`object`


   .. py:attribute:: LOG_LEVELS


   .. py:attribute:: loglevel
      :value: 20



   .. py:attribute:: error_fmt
      :value: '%(asctime)s [%(process)d] [%(levelname)s] %(message)s'



   .. py:attribute:: datefmt
      :value: '[%Y-%m-%d %H:%M:%S %z]'



   .. py:attribute:: access_fmt
      :value: '%(message)s'



   .. py:attribute:: syslog_fmt
      :value: '[%(process)d] %(message)s'



   .. py:attribute:: atoms_wrapper_class


   .. py:attribute:: error_log


   .. py:attribute:: access_log


   .. py:attribute:: error_handlers
      :value: []



   .. py:attribute:: access_handlers
      :value: []



   .. py:attribute:: logfile
      :value: None



   .. py:attribute:: lock


   .. py:attribute:: cfg


   .. py:method:: setup(cfg)


   .. py:method:: critical(msg, *args, **kwargs)


   .. py:method:: error(msg, *args, **kwargs)


   .. py:method:: warning(msg, *args, **kwargs)


   .. py:method:: info(msg, *args, **kwargs)


   .. py:method:: debug(msg, *args, **kwargs)


   .. py:method:: exception(msg, *args, **kwargs)


   .. py:method:: log(lvl, msg, *args, **kwargs)


   .. py:method:: atoms(resp, req, environ, request_time)

      Gets atoms for log formatting.



   .. py:method:: access(resp, req, environ, request_time)

      See http://httpd.apache.org/docs/2.0/logs.html#combined
      for format details



   .. py:method:: now()

      return date in Apache Common Log Format



   .. py:method:: reopen_files()


   .. py:method:: close_on_exec()


