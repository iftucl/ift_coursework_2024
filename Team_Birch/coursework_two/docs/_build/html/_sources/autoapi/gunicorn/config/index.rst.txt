gunicorn.config
===============

.. py:module:: gunicorn.config


Attributes
----------

.. autoapisummary::

   gunicorn.config.KNOWN_SETTINGS
   gunicorn.config.PLATFORM
   gunicorn.config.Setting


Classes
-------

.. autoapisummary::

   gunicorn.config.Config
   gunicorn.config.SettingMeta
   gunicorn.config.Setting
   gunicorn.config.ConfigFile
   gunicorn.config.WSGIApp
   gunicorn.config.Bind
   gunicorn.config.Backlog
   gunicorn.config.Workers
   gunicorn.config.WorkerClass
   gunicorn.config.WorkerThreads
   gunicorn.config.WorkerConnections
   gunicorn.config.MaxRequests
   gunicorn.config.MaxRequestsJitter
   gunicorn.config.Timeout
   gunicorn.config.GracefulTimeout
   gunicorn.config.Keepalive
   gunicorn.config.LimitRequestLine
   gunicorn.config.LimitRequestFields
   gunicorn.config.LimitRequestFieldSize
   gunicorn.config.Reload
   gunicorn.config.ReloadEngine
   gunicorn.config.ReloadExtraFiles
   gunicorn.config.Spew
   gunicorn.config.ConfigCheck
   gunicorn.config.PrintConfig
   gunicorn.config.PreloadApp
   gunicorn.config.Sendfile
   gunicorn.config.ReusePort
   gunicorn.config.Chdir
   gunicorn.config.Daemon
   gunicorn.config.Env
   gunicorn.config.Pidfile
   gunicorn.config.WorkerTmpDir
   gunicorn.config.User
   gunicorn.config.Group
   gunicorn.config.Umask
   gunicorn.config.Initgroups
   gunicorn.config.TmpUploadDir
   gunicorn.config.SecureSchemeHeader
   gunicorn.config.ForwardedAllowIPS
   gunicorn.config.AccessLog
   gunicorn.config.DisableRedirectAccessToSyslog
   gunicorn.config.AccessLogFormat
   gunicorn.config.ErrorLog
   gunicorn.config.Loglevel
   gunicorn.config.CaptureOutput
   gunicorn.config.LoggerClass
   gunicorn.config.LogConfig
   gunicorn.config.LogConfigDict
   gunicorn.config.LogConfigJson
   gunicorn.config.SyslogTo
   gunicorn.config.Syslog
   gunicorn.config.SyslogPrefix
   gunicorn.config.SyslogFacility
   gunicorn.config.EnableStdioInheritance
   gunicorn.config.StatsdHost
   gunicorn.config.DogstatsdTags
   gunicorn.config.StatsdPrefix
   gunicorn.config.Procname
   gunicorn.config.DefaultProcName
   gunicorn.config.PythonPath
   gunicorn.config.Paste
   gunicorn.config.OnStarting
   gunicorn.config.OnReload
   gunicorn.config.WhenReady
   gunicorn.config.Prefork
   gunicorn.config.Postfork
   gunicorn.config.PostWorkerInit
   gunicorn.config.WorkerInt
   gunicorn.config.WorkerAbort
   gunicorn.config.PreExec
   gunicorn.config.PreRequest
   gunicorn.config.PostRequest
   gunicorn.config.ChildExit
   gunicorn.config.WorkerExit
   gunicorn.config.NumWorkersChanged
   gunicorn.config.OnExit
   gunicorn.config.NewSSLContext
   gunicorn.config.ProxyProtocol
   gunicorn.config.ProxyAllowFrom
   gunicorn.config.KeyFile
   gunicorn.config.CertFile
   gunicorn.config.SSLVersion
   gunicorn.config.CertReqs
   gunicorn.config.CACerts
   gunicorn.config.SuppressRaggedEOFs
   gunicorn.config.DoHandshakeOnConnect
   gunicorn.config.Ciphers
   gunicorn.config.PasteGlobalConf
   gunicorn.config.StripHeaderSpaces


Functions
---------

.. autoapisummary::

   gunicorn.config.make_settings
   gunicorn.config.auto_int
   gunicorn.config.validate_bool
   gunicorn.config.validate_dict
   gunicorn.config.validate_pos_int
   gunicorn.config.validate_ssl_version
   gunicorn.config.validate_string
   gunicorn.config.validate_file_exists
   gunicorn.config.validate_list_string
   gunicorn.config.validate_list_of_existing_files
   gunicorn.config.validate_string_to_list
   gunicorn.config.validate_class
   gunicorn.config.validate_callable
   gunicorn.config.validate_user
   gunicorn.config.validate_group
   gunicorn.config.validate_post_request
   gunicorn.config.validate_chdir
   gunicorn.config.validate_statsd_address
   gunicorn.config.validate_reload_engine
   gunicorn.config.get_default_config_file


Module Contents
---------------

.. py:data:: KNOWN_SETTINGS
   :value: []


.. py:data:: PLATFORM
   :value: 'darwin'


.. py:function:: make_settings(ignore=None)

.. py:function:: auto_int(_, x)

.. py:class:: Config(usage=None, prog=None)

   Bases: :py:obj:`object`


   .. py:attribute:: settings


   .. py:attribute:: usage
      :value: None



   .. py:attribute:: prog


   .. py:attribute:: env_orig


   .. py:method:: set(name, value)


   .. py:method:: get_cmd_args_from_env()


   .. py:method:: parser()


   .. py:property:: worker_class_str


   .. py:property:: worker_class


   .. py:property:: address


   .. py:property:: uid


   .. py:property:: gid


   .. py:property:: proc_name


   .. py:property:: logger_class


   .. py:property:: is_ssl


   .. py:property:: ssl_options


   .. py:property:: env


   .. py:property:: sendfile


   .. py:property:: reuse_port


   .. py:property:: paste_global_conf


.. py:class:: SettingMeta

   Bases: :py:obj:`type`


   .. py:method:: fmt_desc(desc)


.. py:class:: Setting

   Bases: :py:obj:`object`


   .. py:attribute:: name
      :value: None



   .. py:attribute:: value
      :value: None



   .. py:attribute:: section
      :value: None



   .. py:attribute:: cli
      :value: None



   .. py:attribute:: validator
      :value: None



   .. py:attribute:: type
      :value: None



   .. py:attribute:: meta
      :value: None



   .. py:attribute:: action
      :value: None



   .. py:attribute:: default
      :value: None



   .. py:attribute:: short
      :value: None



   .. py:attribute:: desc
      :value: None



   .. py:attribute:: nargs
      :value: None



   .. py:attribute:: const
      :value: None



   .. py:method:: add_option(parser)


   .. py:method:: copy()


   .. py:method:: get()


   .. py:method:: set(val)


.. py:data:: Setting

.. py:function:: validate_bool(val)

.. py:function:: validate_dict(val)

.. py:function:: validate_pos_int(val)

.. py:function:: validate_ssl_version(val)

.. py:function:: validate_string(val)

.. py:function:: validate_file_exists(val)

.. py:function:: validate_list_string(val)

.. py:function:: validate_list_of_existing_files(val)

.. py:function:: validate_string_to_list(val)

.. py:function:: validate_class(val)

.. py:function:: validate_callable(arity)

.. py:function:: validate_user(val)

.. py:function:: validate_group(val)

.. py:function:: validate_post_request(val)

.. py:function:: validate_chdir(val)

.. py:function:: validate_statsd_address(val)

.. py:function:: validate_reload_engine(val)

.. py:function:: get_default_config_file()

.. py:class:: ConfigFile

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'config'



   .. py:attribute:: section
      :value: 'Config File'



   .. py:attribute:: cli
      :value: ['-c', '--config']



   .. py:attribute:: meta
      :value: 'CONFIG'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: './gunicorn.conf.py'



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        :ref:`The Gunicorn config file<configuration_file>`.
         
                 A string of the form ``PATH``, ``file:PATH``, or ``python:MODULE_NAME``.
         
                 Only has an effect when specified on the command line or as part of an
                 application specific configuration.
         
                 By default, a file named ``gunicorn.conf.py`` will be read from the same
                 directory where gunicorn is being run.
         
                 .. versionchanged:: 19.4
                    Loading the config from a Python module requires the ``python:``
                    prefix.
                 """

      .. raw:: html

         </details>




.. py:class:: WSGIApp

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'wsgi_app'



   .. py:attribute:: section
      :value: 'Config File'



   .. py:attribute:: meta
      :value: 'STRING'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: None



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        A WSGI application path in pattern ``$(MODULE_NAME):$(VARIABLE_NAME)``.
         
                 .. versionadded:: 20.1.0
                 """

      .. raw:: html

         </details>




.. py:class:: Bind

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'bind'



   .. py:attribute:: action
      :value: 'append'



   .. py:attribute:: section
      :value: 'Server Socket'



   .. py:attribute:: cli
      :value: ['-b', '--bind']



   .. py:attribute:: meta
      :value: 'ADDRESS'



   .. py:attribute:: validator


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        The socket to bind.
         
                 A string of the form: ``HOST``, ``HOST:PORT``, ``unix:PATH``,
                 ``fd://FD``. An IP is a valid ``HOST``.
         
                 .. versionchanged:: 20.0
                    Support for ``fd://FD`` got added.
         
                 Multiple addresses can be bound. ex.::
         
                     $ gunicorn -b 127.0.0.1:8000 -b [::1]:8000 test:app
         
                 will bind the `test:app` application on localhost both on ipv6
                 and ipv4 interfaces.
         
                 If the ``PORT`` environment variable is defined, the default
                 is ``['0.0.0.0:$PORT']``. If it is not defined, the default
                 is ``['127.0.0.1:8000']``.
                 """

      .. raw:: html

         </details>




.. py:class:: Backlog

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'backlog'



   .. py:attribute:: section
      :value: 'Server Socket'



   .. py:attribute:: cli
      :value: ['--backlog']



   .. py:attribute:: meta
      :value: 'INT'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:attribute:: default
      :value: 2048



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        The maximum number of pending connections.
         
                 This refers to the number of clients that can be waiting to be served.
                 Exceeding this number results in the client getting an error when
                 attempting to connect. It should only affect servers under significant
                 load.
         
                 Must be a positive integer. Generally set in the 64-2048 range.
                 """

      .. raw:: html

         </details>




.. py:class:: Workers

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'workers'



   .. py:attribute:: section
      :value: 'Worker Processes'



   .. py:attribute:: cli
      :value: ['-w', '--workers']



   .. py:attribute:: meta
      :value: 'INT'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        The number of worker processes for handling requests.
         
                 A positive integer generally in the ``2-4 x $(NUM_CORES)`` range.
                 You'll want to vary this a bit to find the best for your particular
                 application's work load.
         
                 By default, the value of the ``WEB_CONCURRENCY`` environment variable,
                 which is set by some Platform-as-a-Service providers such as Heroku. If
                 it is not defined, the default is ``1``.
                 """

      .. raw:: html

         </details>




.. py:class:: WorkerClass

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'worker_class'



   .. py:attribute:: section
      :value: 'Worker Processes'



   .. py:attribute:: cli
      :value: ['-k', '--worker-class']



   .. py:attribute:: meta
      :value: 'STRING'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: 'sync'



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        The type of workers to use.
         
                 The default class (``sync``) should handle most "normal" types of
                 workloads. You'll want to read :doc:`design` for information on when
                 you might want to choose one of the other worker classes. Required
                 libraries may be installed using setuptools' ``extras_require`` feature.
         
                 A string referring to one of the following bundled classes:
         
                 * ``sync``
                 * ``eventlet`` - Requires eventlet >= 0.24.1 (or install it via
                   ``pip install gunicorn[eventlet]``)
                 * ``gevent``   - Requires gevent >= 1.4 (or install it via
                   ``pip install gunicorn[gevent]``)
                 * ``tornado``  - Requires tornado >= 0.2 (or install it via
                   ``pip install gunicorn[tornado]``)
                 * ``gthread``  - Python 2 requires the futures package to be installed
                   (or install it via ``pip install gunicorn[gthread]``)
         
                 Optionally, you can provide your own worker by giving Gunicorn a
                 Python path to a subclass of ``gunicorn.workers.base.Worker``.
                 This alternative syntax will load the gevent class:
                 ``gunicorn.workers.ggevent.GeventWorker``.
                 """

      .. raw:: html

         </details>




.. py:class:: WorkerThreads

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'threads'



   .. py:attribute:: section
      :value: 'Worker Processes'



   .. py:attribute:: cli
      :value: ['--threads']



   .. py:attribute:: meta
      :value: 'INT'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:attribute:: default
      :value: 1



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        The number of worker threads for handling requests.
         
                 Run each worker with the specified number of threads.
         
                 A positive integer generally in the ``2-4 x $(NUM_CORES)`` range.
                 You'll want to vary this a bit to find the best for your particular
                 application's work load.
         
                 If it is not defined, the default is ``1``.
         
                 This setting only affects the Gthread worker type.
         
                 .. note::
                    If you try to use the ``sync`` worker type and set the ``threads``
                    setting to more than 1, the ``gthread`` worker type will be used
                    instead.
                 """

      .. raw:: html

         </details>




.. py:class:: WorkerConnections

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'worker_connections'



   .. py:attribute:: section
      :value: 'Worker Processes'



   .. py:attribute:: cli
      :value: ['--worker-connections']



   .. py:attribute:: meta
      :value: 'INT'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:attribute:: default
      :value: 1000



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        The maximum number of simultaneous clients.
         
                 This setting only affects the ``gthread``, ``eventlet`` and ``gevent`` worker types.
                 """

      .. raw:: html

         </details>




.. py:class:: MaxRequests

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'max_requests'



   .. py:attribute:: section
      :value: 'Worker Processes'



   .. py:attribute:: cli
      :value: ['--max-requests']



   .. py:attribute:: meta
      :value: 'INT'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:attribute:: default
      :value: 0



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        The maximum number of requests a worker will process before restarting.
         
                 Any value greater than zero will limit the number of requests a worker
                 will process before automatically restarting. This is a simple method
                 to help limit the damage of memory leaks.
         
                 If this is set to zero (the default) then the automatic worker
                 restarts are disabled.
                 """

      .. raw:: html

         </details>




.. py:class:: MaxRequestsJitter

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'max_requests_jitter'



   .. py:attribute:: section
      :value: 'Worker Processes'



   .. py:attribute:: cli
      :value: ['--max-requests-jitter']



   .. py:attribute:: meta
      :value: 'INT'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:attribute:: default
      :value: 0



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        The maximum jitter to add to the *max_requests* setting.
         
                 The jitter causes the restart per worker to be randomized by
                 ``randint(0, max_requests_jitter)``. This is intended to stagger worker
                 restarts to avoid all workers restarting at the same time.
         
                 .. versionadded:: 19.2
                 """

      .. raw:: html

         </details>




.. py:class:: Timeout

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'timeout'



   .. py:attribute:: section
      :value: 'Worker Processes'



   .. py:attribute:: cli
      :value: ['-t', '--timeout']



   .. py:attribute:: meta
      :value: 'INT'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:attribute:: default
      :value: 30



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Workers silent for more than this many seconds are killed and restarted.
         
                 Value is a positive number or 0. Setting it to 0 has the effect of
                 infinite timeouts by disabling timeouts for all workers entirely.
         
                 Generally, the default of thirty seconds should suffice. Only set this
                 noticeably higher if you're sure of the repercussions for sync workers.
                 For the non sync workers it just means that the worker process is still
                 communicating and is not tied to the length of time required to handle a
                 single request.
                 """

      .. raw:: html

         </details>




.. py:class:: GracefulTimeout

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'graceful_timeout'



   .. py:attribute:: section
      :value: 'Worker Processes'



   .. py:attribute:: cli
      :value: ['--graceful-timeout']



   .. py:attribute:: meta
      :value: 'INT'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:attribute:: default
      :value: 30



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Timeout for graceful workers restart.
         
                 After receiving a restart signal, workers have this much time to finish
                 serving requests. Workers still alive after the timeout (starting from
                 the receipt of the restart signal) are force killed.
                 """

      .. raw:: html

         </details>




.. py:class:: Keepalive

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'keepalive'



   .. py:attribute:: section
      :value: 'Worker Processes'



   .. py:attribute:: cli
      :value: ['--keep-alive']



   .. py:attribute:: meta
      :value: 'INT'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:attribute:: default
      :value: 2



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        The number of seconds to wait for requests on a Keep-Alive connection.
         
                 Generally set in the 1-5 seconds range for servers with direct connection
                 to the client (e.g. when you don't have separate load balancer). When
                 Gunicorn is deployed behind a load balancer, it often makes sense to
                 set this to a higher value.
         
                 .. note::
                    ``sync`` worker does not support persistent connections and will
                    ignore this option.
                 """

      .. raw:: html

         </details>




.. py:class:: LimitRequestLine

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'limit_request_line'



   .. py:attribute:: section
      :value: 'Security'



   .. py:attribute:: cli
      :value: ['--limit-request-line']



   .. py:attribute:: meta
      :value: 'INT'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:attribute:: default
      :value: 4094



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        The maximum size of HTTP request line in bytes.
         
                 This parameter is used to limit the allowed size of a client's
                 HTTP request-line. Since the request-line consists of the HTTP
                 method, URI, and protocol version, this directive places a
                 restriction on the length of a request-URI allowed for a request
                 on the server. A server needs this value to be large enough to
                 hold any of its resource names, including any information that
                 might be passed in the query part of a GET request. Value is a number
                 from 0 (unlimited) to 8190.
         
                 This parameter can be used to prevent any DDOS attack.
                 """

      .. raw:: html

         </details>




.. py:class:: LimitRequestFields

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'limit_request_fields'



   .. py:attribute:: section
      :value: 'Security'



   .. py:attribute:: cli
      :value: ['--limit-request-fields']



   .. py:attribute:: meta
      :value: 'INT'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:attribute:: default
      :value: 100



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Limit the number of HTTP headers fields in a request.
         
                 This parameter is used to limit the number of headers in a request to
                 prevent DDOS attack. Used with the *limit_request_field_size* it allows
                 more safety. By default this value is 100 and can't be larger than
                 32768.
                 """

      .. raw:: html

         </details>




.. py:class:: LimitRequestFieldSize

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'limit_request_field_size'



   .. py:attribute:: section
      :value: 'Security'



   .. py:attribute:: cli
      :value: ['--limit-request-field_size']



   .. py:attribute:: meta
      :value: 'INT'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:attribute:: default
      :value: 8190



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Limit the allowed size of an HTTP request header field.
         
                 Value is a positive number or 0. Setting it to 0 will allow unlimited
                 header field sizes.
         
                 .. warning::
                    Setting this parameter to a very high or unlimited value can open
                    up for DDOS attacks.
                 """

      .. raw:: html

         </details>




.. py:class:: Reload

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'reload'



   .. py:attribute:: section
      :value: 'Debugging'



   .. py:attribute:: cli
      :value: ['--reload']



   .. py:attribute:: validator


   .. py:attribute:: action
      :value: 'store_true'



   .. py:attribute:: default
      :value: False



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Restart workers when code changes.
         
                 This setting is intended for development. It will cause workers to be
                 restarted whenever application code changes.
         
                 The reloader is incompatible with application preloading. When using a
                 paste configuration be sure that the server block does not import any
                 application code or the reload will not work as designed.
         
                 The default behavior is to attempt inotify with a fallback to file
                 system polling. Generally, inotify should be preferred if available
                 because it consumes less system resources.
         
                 .. note::
                    In order to use the inotify reloader, you must have the ``inotify``
                    package installed.
                 """

      .. raw:: html

         </details>




.. py:class:: ReloadEngine

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'reload_engine'



   .. py:attribute:: section
      :value: 'Debugging'



   .. py:attribute:: cli
      :value: ['--reload-engine']



   .. py:attribute:: meta
      :value: 'STRING'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: 'auto'



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        The implementation that should be used to power :ref:`reload`.
         
                 Valid engines are:
         
                 * ``'auto'``
                 * ``'poll'``
                 * ``'inotify'`` (requires inotify)
         
                 .. versionadded:: 19.7
                 """

      .. raw:: html

         </details>




.. py:class:: ReloadExtraFiles

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'reload_extra_files'



   .. py:attribute:: action
      :value: 'append'



   .. py:attribute:: section
      :value: 'Debugging'



   .. py:attribute:: cli
      :value: ['--reload-extra-file']



   .. py:attribute:: meta
      :value: 'FILES'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: []



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Extends :ref:`reload` option to also watch and reload on additional files
                 (e.g., templates, configurations, specifications, etc.).
         
                 .. versionadded:: 19.8
                 """

      .. raw:: html

         </details>




.. py:class:: Spew

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'spew'



   .. py:attribute:: section
      :value: 'Debugging'



   .. py:attribute:: cli
      :value: ['--spew']



   .. py:attribute:: validator


   .. py:attribute:: action
      :value: 'store_true'



   .. py:attribute:: default
      :value: False



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Install a trace function that spews every line executed by the server.
         
                 This is the nuclear option.
                 """

      .. raw:: html

         </details>




.. py:class:: ConfigCheck

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'check_config'



   .. py:attribute:: section
      :value: 'Debugging'



   .. py:attribute:: cli
      :value: ['--check-config']



   .. py:attribute:: validator


   .. py:attribute:: action
      :value: 'store_true'



   .. py:attribute:: default
      :value: False



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Check the configuration and exit. The exit status is 0 if the
                 configuration is correct, and 1 if the configuration is incorrect.
                 """

      .. raw:: html

         </details>




.. py:class:: PrintConfig

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'print_config'



   .. py:attribute:: section
      :value: 'Debugging'



   .. py:attribute:: cli
      :value: ['--print-config']



   .. py:attribute:: validator


   .. py:attribute:: action
      :value: 'store_true'



   .. py:attribute:: default
      :value: False



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Print the configuration settings as fully resolved. Implies :ref:`check-config`.
                 """

      .. raw:: html

         </details>




.. py:class:: PreloadApp

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'preload_app'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['--preload']



   .. py:attribute:: validator


   .. py:attribute:: action
      :value: 'store_true'



   .. py:attribute:: default
      :value: False



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Load application code before the worker processes are forked.
         
                 By preloading an application you can save some RAM resources as well as
                 speed up server boot times. Although, if you defer application loading
                 to each worker process, you can reload your application code easily by
                 restarting workers.
                 """

      .. raw:: html

         </details>




.. py:class:: Sendfile

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'sendfile'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['--no-sendfile']



   .. py:attribute:: validator


   .. py:attribute:: action
      :value: 'store_const'



   .. py:attribute:: const
      :value: False



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Disables the use of ``sendfile()``.
         
                 If not set, the value of the ``SENDFILE`` environment variable is used
                 to enable or disable its usage.
         
                 .. versionadded:: 19.2
                 .. versionchanged:: 19.4
                    Swapped ``--sendfile`` with ``--no-sendfile`` to actually allow
                    disabling.
                 .. versionchanged:: 19.6
                    added support for the ``SENDFILE`` environment variable
                 """

      .. raw:: html

         </details>




.. py:class:: ReusePort

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'reuse_port'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['--reuse-port']



   .. py:attribute:: validator


   .. py:attribute:: action
      :value: 'store_true'



   .. py:attribute:: default
      :value: False



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Set the ``SO_REUSEPORT`` flag on the listening socket.
         
                 .. versionadded:: 19.8
                 """

      .. raw:: html

         </details>




.. py:class:: Chdir

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'chdir'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['--chdir']



   .. py:attribute:: validator


   .. py:attribute:: default


   .. py:attribute:: default_doc
      :value: "``'.'``"



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Change directory to specified directory before loading apps.
                 """

      .. raw:: html

         </details>




.. py:class:: Daemon

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'daemon'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['-D', '--daemon']



   .. py:attribute:: validator


   .. py:attribute:: action
      :value: 'store_true'



   .. py:attribute:: default
      :value: False



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Daemonize the Gunicorn process.
         
                 Detaches the server from the controlling terminal and enters the
                 background.
                 """

      .. raw:: html

         </details>




.. py:class:: Env

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'raw_env'



   .. py:attribute:: action
      :value: 'append'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['-e', '--env']



   .. py:attribute:: meta
      :value: 'ENV'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: []



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Set environment variables in the execution environment.
         
                 Should be a list of strings in the ``key=value`` format.
         
                 For example on the command line:
         
                 .. code-block:: console
         
                     $ gunicorn -b 127.0.0.1:8000 --env FOO=1 test:app
         
                 Or in the configuration file:
         
                 .. code-block:: python
         
                     raw_env = ["FOO=1"]
                 """

      .. raw:: html

         </details>




.. py:class:: Pidfile

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'pidfile'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['-p', '--pid']



   .. py:attribute:: meta
      :value: 'FILE'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: None



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        A filename to use for the PID file.
         
                 If not set, no PID file will be written.
                 """

      .. raw:: html

         </details>




.. py:class:: WorkerTmpDir

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'worker_tmp_dir'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['--worker-tmp-dir']



   .. py:attribute:: meta
      :value: 'DIR'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: None



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        A directory to use for the worker heartbeat temporary file.
         
                 If not set, the default temporary directory will be used.
         
                 .. note::
                    The current heartbeat system involves calling ``os.fchmod`` on
                    temporary file handlers and may block a worker for arbitrary time
                    if the directory is on a disk-backed filesystem.
         
                    See :ref:`blocking-os-fchmod` for more detailed information
                    and a solution for avoiding this problem.
                 """

      .. raw:: html

         </details>




.. py:class:: User

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'user'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['-u', '--user']



   .. py:attribute:: meta
      :value: 'USER'



   .. py:attribute:: validator


   .. py:attribute:: default


   .. py:attribute:: default_doc
      :value: '``os.geteuid()``'



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Switch worker processes to run as this user.
         
                 A valid user id (as an integer) or the name of a user that can be
                 retrieved with a call to ``pwd.getpwnam(value)`` or ``None`` to not
                 change the worker process user.
                 """

      .. raw:: html

         </details>




.. py:class:: Group

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'group'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['-g', '--group']



   .. py:attribute:: meta
      :value: 'GROUP'



   .. py:attribute:: validator


   .. py:attribute:: default


   .. py:attribute:: default_doc
      :value: '``os.getegid()``'



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Switch worker process to run as this group.
         
                 A valid group id (as an integer) or the name of a user that can be
                 retrieved with a call to ``pwd.getgrnam(value)`` or ``None`` to not
                 change the worker processes group.
                 """

      .. raw:: html

         </details>




.. py:class:: Umask

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'umask'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['-m', '--umask']



   .. py:attribute:: meta
      :value: 'INT'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:attribute:: default
      :value: 0



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        A bit mask for the file mode on files written by Gunicorn.
         
                 Note that this affects unix socket permissions.
         
                 A valid value for the ``os.umask(mode)`` call or a string compatible
                 with ``int(value, 0)`` (``0`` means Python guesses the base, so values
                 like ``0``, ``0xFF``, ``0022`` are valid for decimal, hex, and octal
                 representations)
                 """

      .. raw:: html

         </details>




.. py:class:: Initgroups

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'initgroups'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['--initgroups']



   .. py:attribute:: validator


   .. py:attribute:: action
      :value: 'store_true'



   .. py:attribute:: default
      :value: False



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        If true, set the worker process's group access list with all of the
                 groups of which the specified username is a member, plus the specified
                 group id.
         
                 .. versionadded:: 19.7
                 """

      .. raw:: html

         </details>




.. py:class:: TmpUploadDir

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'tmp_upload_dir'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: meta
      :value: 'DIR'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: None



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Directory to store temporary request data as they are read.
         
                 This may disappear in the near future.
         
                 This path should be writable by the process permissions set for Gunicorn
                 workers. If not specified, Gunicorn will choose a system generated
                 temporary directory.
                 """

      .. raw:: html

         </details>




.. py:class:: SecureSchemeHeader

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'secure_scheme_headers'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: validator


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """
                 A dictionary containing headers and values that the front-end proxy
                 uses to indicate HTTPS requests. If the source IP is permitted by
                 ``forwarded-allow-ips`` (below), *and* at least one request header matches
                 a key-value pair listed in this dictionary, then Gunicorn will set
                 ``wsgi.url_scheme`` to ``https``, so your application can tell that the
                 request is secure.
         
                 If the other headers listed in this dictionary are not present in the request, they will be ignored,
                 but if the other headers are present and do not match the provided values, then
                 the request will fail to parse. See the note below for more detailed examples of this behaviour.
         
                 The dictionary should map upper-case header names to exact string
                 values. The value comparisons are case-sensitive, unlike the header
                 names, so make sure they're exactly what your front-end proxy sends
                 when handling HTTPS requests.
         
                 It is important that your front-end proxy configuration ensures that
                 the headers defined here can not be passed directly from the client.
                 """

      .. raw:: html

         </details>




.. py:class:: ForwardedAllowIPS

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'forwarded_allow_ips'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['--forwarded-allow-ips']



   .. py:attribute:: meta
      :value: 'STRING'



   .. py:attribute:: validator


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Front-end's IPs from which allowed to handle set secure headers.
                 (comma separate).
         
                 Set to ``*`` to disable checking of Front-end IPs (useful for setups
                 where you don't know in advance the IP address of Front-end, but
                 you still trust the environment).
         
                 By default, the value of the ``FORWARDED_ALLOW_IPS`` environment
                 variable. If it is not defined, the default is ``"127.0.0.1"``.
         
                 .. note::
         
                     The interplay between the request headers, the value of ``forwarded_allow_ips``, and the value of
                     ``secure_scheme_headers`` is complex. Various scenarios are documented below to further elaborate.
                     In each case, we have a request from the remote address 134.213.44.18, and the default value of
                     ``secure_scheme_headers``:
         
                     .. code::
         
                         secure_scheme_headers = {
                             'X-FORWARDED-PROTOCOL': 'ssl',
                             'X-FORWARDED-PROTO': 'https',
                             'X-FORWARDED-SSL': 'on'
                         }
         
         
                     .. list-table::
                         :header-rows: 1
                         :align: center
                         :widths: auto
         
                         * - ``forwarded-allow-ips``
                           - Secure Request Headers
                           - Result
                           - Explanation
                         * - .. code::
         
                                 ["127.0.0.1"]
                           - .. code::
         
                                 X-Forwarded-Proto: https
                           - .. code::
         
                                 wsgi.url_scheme = "http"
                           - IP address was not allowed
                         * - .. code::
         
                                 "*"
                           - <none>
                           - .. code::
         
                                 wsgi.url_scheme = "http"
                           - IP address allowed, but no secure headers provided
                         * - .. code::
         
                                 "*"
                           - .. code::
         
                                 X-Forwarded-Proto: https
                           - .. code::
         
                                 wsgi.url_scheme = "https"
                           - IP address allowed, one request header matched
                         * - .. code::
         
                                 ["134.213.44.18"]
                           - .. code::
         
                                 X-Forwarded-Ssl: on
                                 X-Forwarded-Proto: http
                           - ``InvalidSchemeHeaders()`` raised
                           - IP address allowed, but the two secure headers disagreed on if HTTPS was used
         
         
                 """

      .. raw:: html

         </details>




.. py:class:: AccessLog

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'accesslog'



   .. py:attribute:: section
      :value: 'Logging'



   .. py:attribute:: cli
      :value: ['--access-logfile']



   .. py:attribute:: meta
      :value: 'FILE'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: None



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        The Access log file to write to.
         
                 ``'-'`` means log to stdout.
                 """

      .. raw:: html

         </details>




.. py:class:: DisableRedirectAccessToSyslog

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'disable_redirect_access_to_syslog'



   .. py:attribute:: section
      :value: 'Logging'



   .. py:attribute:: cli
      :value: ['--disable-redirect-access-to-syslog']



   .. py:attribute:: validator


   .. py:attribute:: action
      :value: 'store_true'



   .. py:attribute:: default
      :value: False



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    Disable redirect access logs to syslog.
         
             .. versionadded:: 19.8
             """

      .. raw:: html

         </details>




.. py:class:: AccessLogFormat

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'access_log_format'



   .. py:attribute:: section
      :value: 'Logging'



   .. py:attribute:: cli
      :value: ['--access-logformat']



   .. py:attribute:: meta
      :value: 'STRING'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s"'



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        The access log format.
         
                 ===========  ===========
                 Identifier   Description
                 ===========  ===========
                 h            remote address
                 l            ``'-'``
                 u            user name
                 t            date of the request
                 r            status line (e.g. ``GET / HTTP/1.1``)
                 m            request method
                 U            URL path without query string
                 q            query string
                 H            protocol
                 s            status
                 B            response length
                 b            response length or ``'-'`` (CLF format)
                 f            referer
                 a            user agent
                 T            request time in seconds
                 M            request time in milliseconds
                 D            request time in microseconds
                 L            request time in decimal seconds
                 p            process ID
                 {header}i    request header
                 {header}o    response header
                 {variable}e  environment variable
                 ===========  ===========
         
                 Use lowercase for header and environment variable names, and put
                 ``{...}x`` names inside ``%(...)s``. For example::
         
                     %({x-forwarded-for}i)s
                 """

      .. raw:: html

         </details>




.. py:class:: ErrorLog

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'errorlog'



   .. py:attribute:: section
      :value: 'Logging'



   .. py:attribute:: cli
      :value: ['--error-logfile', '--log-file']



   .. py:attribute:: meta
      :value: 'FILE'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: '-'



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        The Error log file to write to.
         
                 Using ``'-'`` for FILE makes gunicorn log to stderr.
         
                 .. versionchanged:: 19.2
                    Log to stderr by default.
         
                 """

      .. raw:: html

         </details>




.. py:class:: Loglevel

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'loglevel'



   .. py:attribute:: section
      :value: 'Logging'



   .. py:attribute:: cli
      :value: ['--log-level']



   .. py:attribute:: meta
      :value: 'LEVEL'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: 'info'



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        The granularity of Error log outputs.
         
                 Valid level names are:
         
                 * ``'debug'``
                 * ``'info'``
                 * ``'warning'``
                 * ``'error'``
                 * ``'critical'``
                 """

      .. raw:: html

         </details>




.. py:class:: CaptureOutput

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'capture_output'



   .. py:attribute:: section
      :value: 'Logging'



   .. py:attribute:: cli
      :value: ['--capture-output']



   .. py:attribute:: validator


   .. py:attribute:: action
      :value: 'store_true'



   .. py:attribute:: default
      :value: False



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Redirect stdout/stderr to specified file in :ref:`errorlog`.
         
                 .. versionadded:: 19.6
                 """

      .. raw:: html

         </details>




.. py:class:: LoggerClass

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'logger_class'



   .. py:attribute:: section
      :value: 'Logging'



   .. py:attribute:: cli
      :value: ['--logger-class']



   .. py:attribute:: meta
      :value: 'STRING'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: 'gunicorn.glogging.Logger'



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        The logger you want to use to log events in Gunicorn.
         
                 The default class (``gunicorn.glogging.Logger``) handles most
                 normal usages in logging. It provides error and access logging.
         
                 You can provide your own logger by giving Gunicorn a Python path to a
                 class that quacks like ``gunicorn.glogging.Logger``.
                 """

      .. raw:: html

         </details>




.. py:class:: LogConfig

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'logconfig'



   .. py:attribute:: section
      :value: 'Logging'



   .. py:attribute:: cli
      :value: ['--log-config']



   .. py:attribute:: meta
      :value: 'FILE'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: None



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    The log config file to use.
             Gunicorn uses the standard Python logging module's Configuration
             file format.
             """

      .. raw:: html

         </details>




.. py:class:: LogConfigDict

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'logconfig_dict'



   .. py:attribute:: section
      :value: 'Logging'



   .. py:attribute:: validator


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    The log config dictionary to use, using the standard Python
             logging module's dictionary configuration format. This option
             takes precedence over the :ref:`logconfig` and :ref:`logConfigJson` options,
             which uses the older file configuration format and JSON
             respectively.
         
             Format: https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig
         
             For more context you can look at the default configuration dictionary for logging,
             which can be found at ``gunicorn.glogging.CONFIG_DEFAULTS``.
         
             .. versionadded:: 19.8
             """

      .. raw:: html

         </details>




.. py:class:: LogConfigJson

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'logconfig_json'



   .. py:attribute:: section
      :value: 'Logging'



   .. py:attribute:: cli
      :value: ['--log-config-json']



   .. py:attribute:: meta
      :value: 'FILE'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: None



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    The log config to read config from a JSON file
         
             Format: https://docs.python.org/3/library/logging.config.html#logging.config.jsonConfig
         
             .. versionadded:: 20.0
             """

      .. raw:: html

         </details>




.. py:class:: SyslogTo

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'syslog_addr'



   .. py:attribute:: section
      :value: 'Logging'



   .. py:attribute:: cli
      :value: ['--log-syslog-to']



   .. py:attribute:: meta
      :value: 'SYSLOG_ADDR'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: 'unix:///var/run/syslog'



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    Address to send syslog messages.
         
             Address is a string of the form:
         
             * ``unix://PATH#TYPE`` : for unix domain socket. ``TYPE`` can be ``stream``
               for the stream driver or ``dgram`` for the dgram driver.
               ``stream`` is the default.
             * ``udp://HOST:PORT`` : for UDP sockets
             * ``tcp://HOST:PORT`` : for TCP sockets
         
             """

      .. raw:: html

         </details>




.. py:class:: Syslog

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'syslog'



   .. py:attribute:: section
      :value: 'Logging'



   .. py:attribute:: cli
      :value: ['--log-syslog']



   .. py:attribute:: validator


   .. py:attribute:: action
      :value: 'store_true'



   .. py:attribute:: default
      :value: False



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    Send *Gunicorn* logs to syslog.
         
             .. versionchanged:: 19.8
                You can now disable sending access logs by using the
                :ref:`disable-redirect-access-to-syslog` setting.
             """

      .. raw:: html

         </details>




.. py:class:: SyslogPrefix

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'syslog_prefix'



   .. py:attribute:: section
      :value: 'Logging'



   .. py:attribute:: cli
      :value: ['--log-syslog-prefix']



   .. py:attribute:: meta
      :value: 'SYSLOG_PREFIX'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: None



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    Makes Gunicorn use the parameter as program-name in the syslog entries.
         
             All entries will be prefixed by ``gunicorn.<prefix>``. By default the
             program name is the name of the process.
             """

      .. raw:: html

         </details>




.. py:class:: SyslogFacility

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'syslog_facility'



   .. py:attribute:: section
      :value: 'Logging'



   .. py:attribute:: cli
      :value: ['--log-syslog-facility']



   .. py:attribute:: meta
      :value: 'SYSLOG_FACILITY'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: 'user'



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    Syslog facility name
             """

      .. raw:: html

         </details>




.. py:class:: EnableStdioInheritance

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'enable_stdio_inheritance'



   .. py:attribute:: section
      :value: 'Logging'



   .. py:attribute:: cli
      :value: ['-R', '--enable-stdio-inheritance']



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: False



   .. py:attribute:: action
      :value: 'store_true'



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    Enable stdio inheritance.
         
             Enable inheritance for stdio file descriptors in daemon mode.
         
             Note: To disable the Python stdout buffering, you can to set the user
             environment variable ``PYTHONUNBUFFERED`` .
             """

      .. raw:: html

         </details>




.. py:class:: StatsdHost

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'statsd_host'



   .. py:attribute:: section
      :value: 'Logging'



   .. py:attribute:: cli
      :value: ['--statsd-host']



   .. py:attribute:: meta
      :value: 'STATSD_ADDR'



   .. py:attribute:: default
      :value: None



   .. py:attribute:: validator


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    The address of the StatsD server to log to.
         
             Address is a string of the form:
         
             * ``unix://PATH`` : for a unix domain socket.
             * ``HOST:PORT`` : for a network address
         
             .. versionadded:: 19.1
             """

      .. raw:: html

         </details>




.. py:class:: DogstatsdTags

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'dogstatsd_tags'



   .. py:attribute:: section
      :value: 'Logging'



   .. py:attribute:: cli
      :value: ['--dogstatsd-tags']



   .. py:attribute:: meta
      :value: 'DOGSTATSD_TAGS'



   .. py:attribute:: default
      :value: ''



   .. py:attribute:: validator


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    A comma-delimited list of datadog statsd (dogstatsd) tags to append to
             statsd metrics.
         
             .. versionadded:: 20
             """

      .. raw:: html

         </details>




.. py:class:: StatsdPrefix

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'statsd_prefix'



   .. py:attribute:: section
      :value: 'Logging'



   .. py:attribute:: cli
      :value: ['--statsd-prefix']



   .. py:attribute:: meta
      :value: 'STATSD_PREFIX'



   .. py:attribute:: default
      :value: ''



   .. py:attribute:: validator


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    Prefix to use when emitting statsd metrics (a trailing ``.`` is added,
             if not provided).
         
             .. versionadded:: 19.2
             """

      .. raw:: html

         </details>




.. py:class:: Procname

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'proc_name'



   .. py:attribute:: section
      :value: 'Process Naming'



   .. py:attribute:: cli
      :value: ['-n', '--name']



   .. py:attribute:: meta
      :value: 'STRING'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: None



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        A base to use with setproctitle for process naming.
         
                 This affects things like ``ps`` and ``top``. If you're going to be
                 running more than one instance of Gunicorn you'll probably want to set a
                 name to tell them apart. This requires that you install the setproctitle
                 module.
         
                 If not set, the *default_proc_name* setting will be used.
                 """

      .. raw:: html

         </details>




.. py:class:: DefaultProcName

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'default_proc_name'



   .. py:attribute:: section
      :value: 'Process Naming'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: 'gunicorn'



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Internal setting that is adjusted for each type of application.
                 """

      .. raw:: html

         </details>




.. py:class:: PythonPath

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'pythonpath'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['--pythonpath']



   .. py:attribute:: meta
      :value: 'STRING'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: None



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        A comma-separated list of directories to add to the Python path.
         
                 e.g.
                 ``'/home/djangoprojects/myproject,/home/python/mylibrary'``.
                 """

      .. raw:: html

         </details>




.. py:class:: Paste

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'paste'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['--paste', '--paster']



   .. py:attribute:: meta
      :value: 'STRING'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: None



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Load a PasteDeploy config file. The argument may contain a ``#``
                 symbol followed by the name of an app section from the config file,
                 e.g. ``production.ini#admin``.
         
                 At this time, using alternate server blocks is not supported. Use the
                 command line arguments to control server configuration instead.
                 """

      .. raw:: html

         </details>




.. py:class:: OnStarting

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'on_starting'



   .. py:attribute:: section
      :value: 'Server Hooks'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:method:: on_starting()


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Called just before the master process is initialized.
         
                 The callable needs to accept a single instance variable for the Arbiter.
                 """

      .. raw:: html

         </details>




.. py:class:: OnReload

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'on_reload'



   .. py:attribute:: section
      :value: 'Server Hooks'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:method:: on_reload()


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Called to recycle workers during a reload via SIGHUP.
         
                 The callable needs to accept a single instance variable for the Arbiter.
                 """

      .. raw:: html

         </details>




.. py:class:: WhenReady

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'when_ready'



   .. py:attribute:: section
      :value: 'Server Hooks'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:method:: when_ready()


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Called just after the server is started.
         
                 The callable needs to accept a single instance variable for the Arbiter.
                 """

      .. raw:: html

         </details>




.. py:class:: Prefork

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'pre_fork'



   .. py:attribute:: section
      :value: 'Server Hooks'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:method:: pre_fork(worker)


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Called just before a worker is forked.
         
                 The callable needs to accept two instance variables for the Arbiter and
                 new Worker.
                 """

      .. raw:: html

         </details>




.. py:class:: Postfork

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'post_fork'



   .. py:attribute:: section
      :value: 'Server Hooks'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:method:: post_fork(worker)


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Called just after a worker has been forked.
         
                 The callable needs to accept two instance variables for the Arbiter and
                 new Worker.
                 """

      .. raw:: html

         </details>




.. py:class:: PostWorkerInit

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'post_worker_init'



   .. py:attribute:: section
      :value: 'Server Hooks'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:method:: post_worker_init()


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Called just after a worker has initialized the application.
         
                 The callable needs to accept one instance variable for the initialized
                 Worker.
                 """

      .. raw:: html

         </details>




.. py:class:: WorkerInt

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'worker_int'



   .. py:attribute:: section
      :value: 'Server Hooks'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:method:: worker_int()


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Called just after a worker exited on SIGINT or SIGQUIT.
         
                 The callable needs to accept one instance variable for the initialized
                 Worker.
                 """

      .. raw:: html

         </details>




.. py:class:: WorkerAbort

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'worker_abort'



   .. py:attribute:: section
      :value: 'Server Hooks'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:method:: worker_abort()


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Called when a worker received the SIGABRT signal.
         
                 This call generally happens on timeout.
         
                 The callable needs to accept one instance variable for the initialized
                 Worker.
                 """

      .. raw:: html

         </details>




.. py:class:: PreExec

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'pre_exec'



   .. py:attribute:: section
      :value: 'Server Hooks'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:method:: pre_exec()


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Called just before a new master process is forked.
         
                 The callable needs to accept a single instance variable for the Arbiter.
                 """

      .. raw:: html

         </details>




.. py:class:: PreRequest

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'pre_request'



   .. py:attribute:: section
      :value: 'Server Hooks'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:method:: pre_request(req)


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Called just before a worker processes the request.
         
                 The callable needs to accept two instance variables for the Worker and
                 the Request.
                 """

      .. raw:: html

         </details>




.. py:class:: PostRequest

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'post_request'



   .. py:attribute:: section
      :value: 'Server Hooks'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:method:: post_request(req, environ, resp)


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Called after a worker processes the request.
         
                 The callable needs to accept two instance variables for the Worker and
                 the Request.
                 """

      .. raw:: html

         </details>




.. py:class:: ChildExit

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'child_exit'



   .. py:attribute:: section
      :value: 'Server Hooks'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:method:: child_exit(worker)


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Called just after a worker has been exited, in the master process.
         
                 The callable needs to accept two instance variables for the Arbiter and
                 the just-exited Worker.
         
                 .. versionadded:: 19.7
                 """

      .. raw:: html

         </details>




.. py:class:: WorkerExit

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'worker_exit'



   .. py:attribute:: section
      :value: 'Server Hooks'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:method:: worker_exit(worker)


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Called just after a worker has been exited, in the worker process.
         
                 The callable needs to accept two instance variables for the Arbiter and
                 the just-exited Worker.
                 """

      .. raw:: html

         </details>




.. py:class:: NumWorkersChanged

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'nworkers_changed'



   .. py:attribute:: section
      :value: 'Server Hooks'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:method:: nworkers_changed(new_value, old_value)


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Called just after *num_workers* has been changed.
         
                 The callable needs to accept an instance variable of the Arbiter and
                 two integers of number of workers after and before change.
         
                 If the number of workers is set for the first time, *old_value* would
                 be ``None``.
                 """

      .. raw:: html

         </details>




.. py:class:: OnExit

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'on_exit'



   .. py:attribute:: section
      :value: 'Server Hooks'



   .. py:attribute:: validator


   .. py:method:: on_exit()


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Called just before exiting Gunicorn.
         
                 The callable needs to accept a single instance variable for the Arbiter.
                 """

      .. raw:: html

         </details>




.. py:class:: NewSSLContext

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'ssl_context'



   .. py:attribute:: section
      :value: 'Server Hooks'



   .. py:attribute:: validator


   .. py:attribute:: type


   .. py:method:: ssl_context(default_ssl_context_factory)


   .. py:attribute:: default


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Called when SSLContext is needed.
         
                 Allows customizing SSL context.
         
                 The callable needs to accept an instance variable for the Config and
                 a factory function that returns default SSLContext which is initialized
                 with certificates, private key, cert_reqs, and ciphers according to
                 config and can be further customized by the callable.
                 The callable needs to return SSLContext object.
         
                 Following example shows a configuration file that sets the minimum TLS version to 1.3:
         
                 .. code-block:: python
         
                     def ssl_context(conf, default_ssl_context_factory):
                         import ssl
                         context = default_ssl_context_factory()
                         context.minimum_version = ssl.TLSVersion.TLSv1_3
                         return context
         
                 .. versionadded:: 20.2
                 """

      .. raw:: html

         </details>




.. py:class:: ProxyProtocol

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'proxy_protocol'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['--proxy-protocol']



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: False



   .. py:attribute:: action
      :value: 'store_true'



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Enable detect PROXY protocol (PROXY mode).
         
                 Allow using HTTP and Proxy together. It may be useful for work with
                 stunnel as HTTPS frontend and Gunicorn as HTTP server.
         
                 PROXY protocol: http://haproxy.1wt.eu/download/1.5/doc/proxy-protocol.txt
         
                 Example for stunnel config::
         
                     [https]
                     protocol = proxy
                     accept  = 443
                     connect = 80
                     cert = /etc/ssl/certs/stunnel.pem
                     key = /etc/ssl/certs/stunnel.key
                 """

      .. raw:: html

         </details>




.. py:class:: ProxyAllowFrom

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'proxy_allow_ips'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['--proxy-allow-from']



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: '127.0.0.1'



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Front-end's IPs from which allowed accept proxy requests (comma separate).
         
                 Set to ``*`` to disable checking of Front-end IPs (useful for setups
                 where you don't know in advance the IP address of Front-end, but
                 you still trust the environment)
                 """

      .. raw:: html

         </details>




.. py:class:: KeyFile

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'keyfile'



   .. py:attribute:: section
      :value: 'SSL'



   .. py:attribute:: cli
      :value: ['--keyfile']



   .. py:attribute:: meta
      :value: 'FILE'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: None



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    SSL key file
             """

      .. raw:: html

         </details>




.. py:class:: CertFile

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'certfile'



   .. py:attribute:: section
      :value: 'SSL'



   .. py:attribute:: cli
      :value: ['--certfile']



   .. py:attribute:: meta
      :value: 'FILE'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: None



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    SSL certificate file
             """

      .. raw:: html

         </details>




.. py:class:: SSLVersion

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'ssl_version'



   .. py:attribute:: section
      :value: 'SSL'



   .. py:attribute:: cli
      :value: ['--ssl-version']



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: 2



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    SSL version to use (see stdlib ssl module's).
         
             .. deprecated:: 20.2
                The option is deprecated and it is currently ignored. Use :ref:`ssl-context` instead.
         
             ============= ============
             --ssl-version Description
             ============= ============
             SSLv3         SSLv3 is not-secure and is strongly discouraged.
             SSLv23        Alias for TLS. Deprecated in Python 3.6, use TLS.
             TLS           Negotiate highest possible version between client/server.
                           Can yield SSL. (Python 3.6+)
             TLSv1         TLS 1.0
             TLSv1_1       TLS 1.1 (Python 3.4+)
             TLSv1_2       TLS 1.2 (Python 3.4+)
             TLS_SERVER    Auto-negotiate the highest protocol version like TLS,
                           but only support server-side SSLSocket connections.
                           (Python 3.6+)
             ============= ============
         
             .. versionchanged:: 19.7
                The default value has been changed from ``ssl.PROTOCOL_TLSv1`` to
                ``ssl.PROTOCOL_SSLv23``.
             .. versionchanged:: 20.0
                This setting now accepts string names based on ``ssl.PROTOCOL_``
                constants.
             .. versionchanged:: 20.0.1
                The default value has been changed from ``ssl.PROTOCOL_SSLv23`` to
                ``ssl.PROTOCOL_TLS`` when Python >= 3.6 .
             """

      .. raw:: html

         </details>




.. py:class:: CertReqs

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'cert_reqs'



   .. py:attribute:: section
      :value: 'SSL'



   .. py:attribute:: cli
      :value: ['--cert-reqs']



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: 0



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    Whether client certificate is required (see stdlib ssl module's)
         
             ===========  ===========================
             --cert-reqs      Description
             ===========  ===========================
             `0`          no client veirifcation
             `1`          ssl.CERT_OPTIONAL
             `2`          ssl.CERT_REQUIRED
             ===========  ===========================
             """

      .. raw:: html

         </details>




.. py:class:: CACerts

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'ca_certs'



   .. py:attribute:: section
      :value: 'SSL'



   .. py:attribute:: cli
      :value: ['--ca-certs']



   .. py:attribute:: meta
      :value: 'FILE'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: None



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    CA certificates file
             """

      .. raw:: html

         </details>




.. py:class:: SuppressRaggedEOFs

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'suppress_ragged_eofs'



   .. py:attribute:: section
      :value: 'SSL'



   .. py:attribute:: cli
      :value: ['--suppress-ragged-eofs']



   .. py:attribute:: action
      :value: 'store_true'



   .. py:attribute:: default
      :value: True



   .. py:attribute:: validator


   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    Suppress ragged EOFs (see stdlib ssl module's)
             """

      .. raw:: html

         </details>




.. py:class:: DoHandshakeOnConnect

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'do_handshake_on_connect'



   .. py:attribute:: section
      :value: 'SSL'



   .. py:attribute:: cli
      :value: ['--do-handshake-on-connect']



   .. py:attribute:: validator


   .. py:attribute:: action
      :value: 'store_true'



   .. py:attribute:: default
      :value: False



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    Whether to perform SSL handshake on socket connect (see stdlib ssl module's)
             """

      .. raw:: html

         </details>




.. py:class:: Ciphers

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'ciphers'



   .. py:attribute:: section
      :value: 'SSL'



   .. py:attribute:: cli
      :value: ['--ciphers']



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: None



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """    SSL Cipher suite to use, in the format of an OpenSSL cipher list.
         
             By default we use the default cipher list from Python's ``ssl`` module,
             which contains ciphers considered strong at the time of each Python
             release.
         
             As a recommended alternative, the Open Web App Security Project (OWASP)
             offers `a vetted set of strong cipher strings rated A+ to C-
             <https://www.owasp.org/index.php/TLS_Cipher_String_Cheat_Sheet>`_.
             OWASP provides details on user-agent compatibility at each security level.
         
             See the `OpenSSL Cipher List Format Documentation
             <https://www.openssl.org/docs/manmaster/man1/ciphers.html#CIPHER-LIST-FORMAT>`_
             for details on the format of an OpenSSL cipher list.
             """

      .. raw:: html

         </details>




.. py:class:: PasteGlobalConf

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'raw_paste_global_conf'



   .. py:attribute:: action
      :value: 'append'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['--paste-global']



   .. py:attribute:: meta
      :value: 'CONF'



   .. py:attribute:: validator


   .. py:attribute:: default
      :value: []



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Set a PasteDeploy global config variable in ``key=value`` form.
         
                 The option can be specified multiple times.
         
                 The variables are passed to the the PasteDeploy entrypoint. Example::
         
                     $ gunicorn -b 127.0.0.1:8000 --paste development.ini --paste-global FOO=1 --paste-global BAR=2
         
                 .. versionadded:: 19.7
                 """

      .. raw:: html

         </details>




.. py:class:: StripHeaderSpaces

   Bases: :py:obj:`Setting`


   .. py:attribute:: name
      :value: 'strip_header_spaces'



   .. py:attribute:: section
      :value: 'Server Mechanics'



   .. py:attribute:: cli
      :value: ['--strip-header-spaces']



   .. py:attribute:: validator


   .. py:attribute:: action
      :value: 'store_true'



   .. py:attribute:: default
      :value: False



   .. py:attribute:: desc
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """        Strip spaces present between the header name and the the ``:``.
         
                 This is known to induce vulnerabilities and is not compliant with the HTTP/1.1 standard.
                 See https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn.
         
                 Use with care and only if necessary.
                 """

      .. raw:: html

         </details>




