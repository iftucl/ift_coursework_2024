gunicorn.sock
=============

.. py:module:: gunicorn.sock


Classes
-------

.. autoapisummary::

   gunicorn.sock.BaseSocket
   gunicorn.sock.TCPSocket
   gunicorn.sock.TCP6Socket
   gunicorn.sock.UnixSocket


Functions
---------

.. autoapisummary::

   gunicorn.sock.create_sockets
   gunicorn.sock.close_sockets
   gunicorn.sock.ssl_context
   gunicorn.sock.ssl_wrap_socket


Module Contents
---------------

.. py:class:: BaseSocket(address, conf, log, fd=None)

   Bases: :py:obj:`object`


   .. py:attribute:: log


   .. py:attribute:: conf


   .. py:attribute:: cfg_addr


   .. py:attribute:: sock


   .. py:method:: set_options(sock, bound=False)


   .. py:method:: bind(sock)


   .. py:method:: close()


.. py:class:: TCPSocket(address, conf, log, fd=None)

   Bases: :py:obj:`BaseSocket`


   .. py:attribute:: FAMILY
      :value: 2



   .. py:method:: set_options(sock, bound=False)


.. py:class:: TCP6Socket(address, conf, log, fd=None)

   Bases: :py:obj:`TCPSocket`


   .. py:attribute:: FAMILY
      :value: 30



.. py:class:: UnixSocket(addr, conf, log, fd=None)

   Bases: :py:obj:`BaseSocket`


   .. py:attribute:: FAMILY
      :value: 1



   .. py:method:: bind(sock)


.. py:function:: create_sockets(conf, log, fds=None)

   Create a new socket for the configured addresses or file descriptors.

   If a configured address is a tuple then a TCP socket is created.
   If it is a string, a Unix socket is created. Otherwise, a TypeError is
   raised.


.. py:function:: close_sockets(listeners, unlink=True)

.. py:function:: ssl_context(conf)

.. py:function:: ssl_wrap_socket(sock, conf)

