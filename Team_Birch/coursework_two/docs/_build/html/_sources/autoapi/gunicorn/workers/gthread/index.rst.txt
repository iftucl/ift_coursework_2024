gunicorn.workers.gthread
========================

.. py:module:: gunicorn.workers.gthread


Classes
-------

.. autoapisummary::

   gunicorn.workers.gthread.TConn
   gunicorn.workers.gthread.ThreadWorker


Module Contents
---------------

.. py:class:: TConn(cfg, sock, client, server)

   Bases: :py:obj:`object`


   .. py:attribute:: cfg


   .. py:attribute:: sock


   .. py:attribute:: client


   .. py:attribute:: server


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: parser
      :value: None



   .. py:attribute:: initialized
      :value: False



   .. py:method:: init()


   .. py:method:: set_timeout()


   .. py:method:: close()


.. py:class:: ThreadWorker(*args, **kwargs)

   Bases: :py:obj:`gunicorn.workers.base.Worker`


   .. py:attribute:: worker_connections


   .. py:attribute:: max_keepalived


   .. py:attribute:: tpool
      :value: None



   .. py:attribute:: poller
      :value: None



   .. py:attribute:: futures


   .. py:attribute:: nr_conns
      :value: 0



   .. py:method:: check_config(cfg, log)
      :classmethod:



   .. py:method:: init_process()


   .. py:method:: get_thread_pool()

      Override this method to customize how the thread pool is created



   .. py:method:: handle_quit(sig, frame)


   .. py:method:: enqueue_req(conn)


   .. py:method:: accept(server, listener)


   .. py:method:: on_client_socket_readable(conn, client)


   .. py:method:: murder_keepalived()


   .. py:method:: is_parent_alive()


   .. py:method:: run()


   .. py:method:: finish_request(fs)


   .. py:method:: handle(conn)


   .. py:method:: handle_request(req, conn)


