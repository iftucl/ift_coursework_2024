gunicorn.reloader
=================

.. py:module:: gunicorn.reloader


Attributes
----------

.. autoapisummary::

   gunicorn.reloader.COMPILED_EXT_RE
   gunicorn.reloader.has_inotify
   gunicorn.reloader.has_inotify
   gunicorn.reloader.preferred_reloader
   gunicorn.reloader.reloader_engines


Classes
-------

.. autoapisummary::

   gunicorn.reloader.Reloader
   gunicorn.reloader.InotifyReloader


Module Contents
---------------

.. py:data:: COMPILED_EXT_RE

.. py:class:: Reloader(extra_files=None, interval=1, callback=None)

   Bases: :py:obj:`threading.Thread`


   A class that represents a thread of control.

   This class can be safely subclassed in a limited fashion. There are two ways
   to specify the activity: by passing a callable object to the constructor, or
   by overriding the run() method in a subclass.



   .. py:attribute:: daemon
      :value: True


      A boolean value indicating whether this thread is a daemon thread.

      This must be set before start() is called, otherwise RuntimeError is
      raised. Its initial value is inherited from the creating thread; the
      main thread is not a daemon thread and therefore all threads created in
      the main thread default to daemon = False.

      The entire Python program exits when only daemon threads are left.


   .. py:method:: add_extra_file(filename)


   .. py:method:: get_files()


   .. py:method:: run()

      Method representing the thread's activity.

      You may override this method in a subclass. The standard run() method
      invokes the callable object passed to the object's constructor as the
      target argument, if any, with sequential and keyword arguments taken
      from the args and kwargs arguments, respectively.




.. py:data:: has_inotify
   :value: False


.. py:data:: has_inotify
   :value: True


.. py:class:: InotifyReloader(extra_files=None, callback=None)

   Bases: :py:obj:`threading.Thread`


   A class that represents a thread of control.

   This class can be safely subclassed in a limited fashion. There are two ways
   to specify the activity: by passing a callable object to the constructor, or
   by overriding the run() method in a subclass.



   .. py:attribute:: event_mask


   .. py:attribute:: daemon
      :value: True


      A boolean value indicating whether this thread is a daemon thread.

      This must be set before start() is called, otherwise RuntimeError is
      raised. Its initial value is inherited from the creating thread; the
      main thread is not a daemon thread and therefore all threads created in
      the main thread default to daemon = False.

      The entire Python program exits when only daemon threads are left.


   .. py:method:: add_extra_file(filename)


   .. py:method:: get_dirs()


   .. py:method:: run()

      Method representing the thread's activity.

      You may override this method in a subclass. The standard run() method
      invokes the callable object passed to the object's constructor as the
      target argument, if any, with sequential and keyword arguments taken
      from the args and kwargs arguments, respectively.




.. py:data:: preferred_reloader

.. py:data:: reloader_engines

