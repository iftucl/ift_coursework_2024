gunicorn.http.message
=====================

.. py:module:: gunicorn.http.message


Attributes
----------

.. autoapisummary::

   gunicorn.http.message.MAX_REQUEST_LINE
   gunicorn.http.message.MAX_HEADERS
   gunicorn.http.message.DEFAULT_MAX_HEADERFIELD_SIZE
   gunicorn.http.message.HEADER_RE
   gunicorn.http.message.METH_RE
   gunicorn.http.message.VERSION_RE


Classes
-------

.. autoapisummary::

   gunicorn.http.message.Message
   gunicorn.http.message.Request


Module Contents
---------------

.. py:data:: MAX_REQUEST_LINE
   :value: 8190


.. py:data:: MAX_HEADERS
   :value: 32768


.. py:data:: DEFAULT_MAX_HEADERFIELD_SIZE
   :value: 8190


.. py:data:: HEADER_RE

.. py:data:: METH_RE

.. py:data:: VERSION_RE

.. py:class:: Message(cfg, unreader, peer_addr)

   Bases: :py:obj:`object`


   .. py:attribute:: cfg


   .. py:attribute:: unreader


   .. py:attribute:: peer_addr


   .. py:attribute:: remote_addr


   .. py:attribute:: version
      :value: None



   .. py:attribute:: headers
      :value: []



   .. py:attribute:: trailers
      :value: []



   .. py:attribute:: body
      :value: None



   .. py:attribute:: scheme
      :value: 'https'



   .. py:attribute:: limit_request_fields


   .. py:attribute:: limit_request_field_size


   .. py:attribute:: max_buffer_headers


   .. py:method:: parse(unreader)
      :abstractmethod:



   .. py:method:: parse_headers(data)


   .. py:method:: set_body_reader()


   .. py:method:: should_close()


.. py:class:: Request(cfg, unreader, peer_addr, req_number=1)

   Bases: :py:obj:`Message`


   .. py:attribute:: method
      :value: None



   .. py:attribute:: uri
      :value: None



   .. py:attribute:: path
      :value: None



   .. py:attribute:: query
      :value: None



   .. py:attribute:: fragment
      :value: None



   .. py:attribute:: limit_request_line


   .. py:attribute:: req_number
      :value: 1



   .. py:attribute:: proxy_protocol_info
      :value: None



   .. py:method:: get_data(unreader, buf, stop=False)


   .. py:method:: parse(unreader)


   .. py:method:: read_line(unreader, buf, limit=0)


   .. py:method:: proxy_protocol(line)

      Detect, check and parse proxy protocol.

      :raises: ForbiddenProxyRequest, InvalidProxyLine.
      :return: True for proxy protocol line else False



   .. py:method:: proxy_protocol_access_check()


   .. py:method:: parse_proxy_protocol(line)


   .. py:method:: parse_request_line(line_bytes)


   .. py:method:: set_body_reader()


