pyecharts.render.snapshot
=========================

.. py:module:: pyecharts.render.snapshot


Attributes
----------

.. autoapisummary::

   pyecharts.render.snapshot.logger
   pyecharts.render.snapshot.PNG_FORMAT
   pyecharts.render.snapshot.JPG_FORMAT
   pyecharts.render.snapshot.GIF_FORMAT
   pyecharts.render.snapshot.PDF_FORMAT
   pyecharts.render.snapshot.SVG_FORMAT
   pyecharts.render.snapshot.EPS_FORMAT
   pyecharts.render.snapshot.B64_FORMAT


Functions
---------

.. autoapisummary::

   pyecharts.render.snapshot.make_snapshot
   pyecharts.render.snapshot.decode_base64
   pyecharts.render.snapshot.save_as_png
   pyecharts.render.snapshot.save_as_text
   pyecharts.render.snapshot.save_as


Module Contents
---------------

.. py:data:: logger

.. py:data:: PNG_FORMAT
   :value: 'png'


.. py:data:: JPG_FORMAT
   :value: 'jpeg'


.. py:data:: GIF_FORMAT
   :value: 'gif'


.. py:data:: PDF_FORMAT
   :value: 'pdf'


.. py:data:: SVG_FORMAT
   :value: 'svg'


.. py:data:: EPS_FORMAT
   :value: 'eps'


.. py:data:: B64_FORMAT
   :value: 'base64'


.. py:function:: make_snapshot(engine: pyecharts.types.Any, file_name: str, output_name: str, delay: float = 2, pixel_ratio: int = 2, is_remove_html: bool = False, **kwargs)

.. py:function:: decode_base64(data: str) -> bytes

   Decode base64, padding being optional.

   :param data: Base64 data as an ASCII byte string
   :returns: The decoded byte string.


.. py:function:: save_as_png(image_data: bytes, output_name: str)

.. py:function:: save_as_text(image_data: str, output_name: str)

.. py:function:: save_as(image_data: bytes, output_name: str, file_type: str)

