pyecharts.charts.basic_charts.kline
===================================

.. py:module:: pyecharts.charts.basic_charts.kline


Classes
-------

.. autoapisummary::

   pyecharts.charts.basic_charts.kline.Kline


Module Contents
---------------

.. py:class:: Kline(init_opts: pyecharts.types.Init = opts.InitOpts(), render_opts: pyecharts.types.RenderInit = opts.RenderOpts())

   Bases: :py:obj:`pyecharts.charts.chart.RectChart`


   <<< K-line >>>

   K-line shows the highest value, the lowest value,
   the starting value and the ending value of the data on the day,
   which is used to show the daily fluctuation of the data or
   the fluctuation of a certain period.


   .. py:method:: add_yaxis(series_name: str, y_axis: pyecharts.types.Sequence[pyecharts.types.Union[pyecharts.options.CandleStickItem, dict]], *, coordinate_system: str = 'cartesian2d', color_by: pyecharts.types.Optional[str] = 'series', bar_width: pyecharts.types.Optional[pyecharts.types.Numeric] = None, bar_min_width: pyecharts.types.Optional[pyecharts.types.Numeric] = None, bar_max_width: pyecharts.types.Optional[pyecharts.types.Numeric] = None, layout: pyecharts.types.Optional[str] = None, xaxis_index: pyecharts.types.Optional[pyecharts.types.Numeric] = None, yaxis_index: pyecharts.types.Optional[pyecharts.types.Numeric] = None, is_legend_hover_link: bool = True, is_hover_animation: bool = True, markline_opts: pyecharts.types.MarkLine = None, markpoint_opts: pyecharts.types.MarkPoint = None, markarea_opts: pyecharts.types.MarkArea = None, tooltip_opts: pyecharts.types.Tooltip = None, itemstyle_opts: pyecharts.types.ItemStyle = None, emphasis_opts: pyecharts.types.Emphasis = None, selected_mode: pyecharts.types.Union[bool, str] = False, is_large: bool = False, encode: pyecharts.types.Union[pyecharts.types.JSFunc, dict, None] = None, is_clip: bool = True, z_level: pyecharts.types.Numeric = 0, z: pyecharts.types.Numeric = 2)


