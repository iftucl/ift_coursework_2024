pyecharts.options.charts_options
================================

.. py:module:: pyecharts.options.charts_options


Classes
-------

.. autoapisummary::

   pyecharts.options.charts_options.GraphNode
   pyecharts.options.charts_options.GraphLink
   pyecharts.options.charts_options.GraphCategory
   pyecharts.options.charts_options.BMapNavigationControlOpts
   pyecharts.options.charts_options.BMapOverviewMapControlOpts
   pyecharts.options.charts_options.BMapScaleControlOpts
   pyecharts.options.charts_options.BMapTypeControlOpts
   pyecharts.options.charts_options.BMapCopyrightTypeOpts
   pyecharts.options.charts_options.BMapGeoLocationControlOpts
   pyecharts.options.charts_options.ComponentTitleOpts
   pyecharts.options.charts_options.PageLayoutOpts
   pyecharts.options.charts_options.BaseGraphic
   pyecharts.options.charts_options.GraphicShapeOpts
   pyecharts.options.charts_options.GraphicBasicStyleOpts
   pyecharts.options.charts_options.GraphicImageStyleOpts
   pyecharts.options.charts_options.GraphicTextStyleOpts
   pyecharts.options.charts_options.GraphicItem
   pyecharts.options.charts_options.GraphicGroup
   pyecharts.options.charts_options.GraphicImage
   pyecharts.options.charts_options.GraphicText
   pyecharts.options.charts_options.GraphicRect
   pyecharts.options.charts_options.SankeyLevelsOpts
   pyecharts.options.charts_options.TreeMapItemStyleOpts
   pyecharts.options.charts_options.TreeMapLevelsOpts
   pyecharts.options.charts_options.Map3DLabelOpts
   pyecharts.options.charts_options.Map3DRealisticMaterialOpts
   pyecharts.options.charts_options.Map3DLambertMaterialOpts
   pyecharts.options.charts_options.Map3DColorMaterialOpts
   pyecharts.options.charts_options.Map3DLightOpts
   pyecharts.options.charts_options.Map3DPostEffectOpts
   pyecharts.options.charts_options.Map3DViewControlOpts
   pyecharts.options.charts_options.GlobeLayersOpts
   pyecharts.options.charts_options.BarBackgroundStyleOpts
   pyecharts.options.charts_options.GaugeTitleOpts
   pyecharts.options.charts_options.GaugeDetailOpts
   pyecharts.options.charts_options.GaugeProgressOpts
   pyecharts.options.charts_options.GaugePointerOpts
   pyecharts.options.charts_options.GaugeAnchorOpts
   pyecharts.options.charts_options.PieLabelLineOpts
   pyecharts.options.charts_options.PieEmptyCircleStyle
   pyecharts.options.charts_options.TimelineCheckPointerStyle
   pyecharts.options.charts_options.TimelineControlStyle
   pyecharts.options.charts_options.TabChartGlobalOpts
   pyecharts.options.charts_options.GraphGLNode
   pyecharts.options.charts_options.GraphGLLink
   pyecharts.options.charts_options.GeoRegionsOpts
   pyecharts.options.charts_options.SunburstLabelLineOpts
   pyecharts.options.charts_options.SunburstLabelLayoutOpts
   pyecharts.options.charts_options.SunburstLevelOpts
   pyecharts.options.charts_options.BarItem
   pyecharts.options.charts_options.BoxplotItem
   pyecharts.options.charts_options.CandleStickItem
   pyecharts.options.charts_options.EffectScatterItem
   pyecharts.options.charts_options.FunnelItem
   pyecharts.options.charts_options.LineItem
   pyecharts.options.charts_options.MapItem
   pyecharts.options.charts_options.GeoItem
   pyecharts.options.charts_options.ParallelItem
   pyecharts.options.charts_options.PieItem
   pyecharts.options.charts_options.RadarItem
   pyecharts.options.charts_options.ScatterItem
   pyecharts.options.charts_options.SunburstItem
   pyecharts.options.charts_options.ThemeRiverItem
   pyecharts.options.charts_options.TreeItem


Module Contents
---------------

.. py:class:: GraphNode(name: pyecharts.options.series_options.Optional[str] = None, x: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, y: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, is_fixed: bool = False, value: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Sequence, None] = None, category: pyecharts.options.series_options.Optional[int] = None, symbol: pyecharts.options.series_options.Optional[str] = None, symbol_size: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence, None] = None, symbol_rotate: pyecharts.options.series_options.Optional[int] = None, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, is_disabled_emphasis: pyecharts.options.series_options.Optional[bool] = None, emphasis_itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, emphasis_label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, blur_itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, blur_label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, is_disabled_select: pyecharts.options.series_options.Optional[bool] = None, select_itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, select_label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, tooltip_opts: pyecharts.options.series_options.Union[pyecharts.options.global_options.TooltipOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GraphLink(source: pyecharts.options.series_options.Union[str, int, None] = None, target: pyecharts.options.series_options.Union[str, int, None] = None, value: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, symbol: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Sequence, None] = None, symbol_size: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence, None] = None, linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None, label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, is_disabled_emphasis: pyecharts.options.series_options.Optional[bool] = None, emphasis_linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None, emphasis_label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, blur_linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None, blur_label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, is_disabled_select: pyecharts.options.series_options.Optional[bool] = None, select_linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None, select_label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, is_ignore_force_layout: bool = False)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GraphCategory(name: pyecharts.options.series_options.Optional[str] = None, symbol: pyecharts.options.series_options.Optional[str] = None, symbol_size: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence, None] = None, label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: BMapNavigationControlOpts(position: pyecharts.options.series_options.Numeric = BMapType.ANCHOR_TOP_LEFT, offset_width: pyecharts.options.series_options.Numeric = 10, offset_height: pyecharts.options.series_options.Numeric = 10, type_: pyecharts.options.series_options.Numeric = BMapType.NAVIGATION_CONTROL_LARGE, is_show_zoom_info: bool = False, is_enable_geo_location: bool = False)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: BMapOverviewMapControlOpts(position: pyecharts.options.series_options.Numeric = BMapType.ANCHOR_BOTTOM_RIGHT, offset_width: pyecharts.options.series_options.Numeric = 10, offset_height: pyecharts.options.series_options.Numeric = 50, is_open: bool = False)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: BMapScaleControlOpts(position: pyecharts.options.series_options.Numeric = BMapType.ANCHOR_BOTTOM_LEFT, offset_width: pyecharts.options.series_options.Numeric = 80, offset_height: pyecharts.options.series_options.Numeric = 21)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: BMapTypeControlOpts(position: pyecharts.options.series_options.Numeric = BMapType.ANCHOR_TOP_RIGHT, type_: pyecharts.options.series_options.Numeric = BMapType.MAPTYPE_CONTROL_HORIZONTAL)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: BMapCopyrightTypeOpts(position: pyecharts.options.series_options.Numeric = BMapType.ANCHOR_BOTTOM_LEFT, offset_width: pyecharts.options.series_options.Numeric = 2, offset_height: pyecharts.options.series_options.Numeric = 2, copyright_: str = '')

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: BMapGeoLocationControlOpts(position: pyecharts.options.series_options.Numeric = BMapType.ANCHOR_BOTTOM_LEFT, offset_width: pyecharts.options.series_options.Numeric = 10, offset_height: pyecharts.options.series_options.Numeric = 10, is_show_address_bar: bool = True, is_enable_auto_location: bool = False)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: ComponentTitleOpts(title: str = '', subtitle: str = '', title_style: pyecharts.options.series_options.Optional[dict] = None, subtitle_style: pyecharts.options.series_options.Optional[dict] = None)

   .. py:attribute:: title
      :value: ''



   .. py:attribute:: subtitle
      :value: ''



   .. py:attribute:: title_style
      :type:  str
      :value: ''



   .. py:attribute:: subtitle_style
      :type:  str
      :value: ''



.. py:class:: PageLayoutOpts(justify_content: pyecharts.options.series_options.Optional[str] = None, margin: pyecharts.options.series_options.Optional[str] = None, display: pyecharts.options.series_options.Optional[str] = None, flex_wrap: pyecharts.options.series_options.Optional[str] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: BaseGraphic

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


.. py:class:: GraphicShapeOpts(pos_x: pyecharts.options.series_options.Numeric = 0, pos_y: pyecharts.options.series_options.Numeric = 0, width: pyecharts.options.series_options.Numeric = 0, height: pyecharts.options.series_options.Numeric = 0, r: pyecharts.options.series_options.Union[pyecharts.options.series_options.Sequence, pyecharts.options.series_options.Numeric, None] = None)

   Bases: :py:obj:`BaseGraphic`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GraphicBasicStyleOpts(fill: str = '#000', stroke: pyecharts.options.series_options.Optional[str] = None, line_width: pyecharts.options.series_options.Numeric = 0, shadow_blur: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, shadow_offset_x: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, shadow_offset_y: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, shadow_color: pyecharts.options.series_options.Optional[str] = None)

   Bases: :py:obj:`BaseGraphic`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GraphicImageStyleOpts(image: pyecharts.options.series_options.Optional[str] = None, pos_x: pyecharts.options.series_options.Numeric = 0, pos_y: pyecharts.options.series_options.Numeric = 0, width: pyecharts.options.series_options.Numeric = 0, height: pyecharts.options.series_options.Numeric = 0, opacity: pyecharts.options.series_options.Numeric = 1, graphic_basicstyle_opts: pyecharts.options.series_options.Union[GraphicBasicStyleOpts, dict, None] = None)

   Bases: :py:obj:`BaseGraphic`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GraphicTextStyleOpts(text: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, pos_x: pyecharts.options.series_options.Numeric = 0, pos_y: pyecharts.options.series_options.Numeric = 0, font: pyecharts.options.series_options.Optional[str] = None, font_size: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = 0, text_align: str = 'left', text_vertical_align: pyecharts.options.series_options.Optional[str] = None, graphic_basicstyle_opts: pyecharts.options.series_options.Union[GraphicBasicStyleOpts, dict, None] = None)

   Bases: :py:obj:`BaseGraphic`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GraphicItem(id_: pyecharts.options.series_options.Optional[str] = None, action: str = 'merge', position: [pyecharts.options.series_options.Sequence, pyecharts.options.series_options.Numeric, None] = None, rotation: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.JSFunc, None] = 0, scale: pyecharts.options.series_options.Union[pyecharts.options.series_options.Sequence, pyecharts.options.series_options.Numeric, None] = None, origin: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence, None] = None, left: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, str, None] = None, right: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, str, None] = None, top: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, str, None] = None, bottom: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, str, None] = None, bounding: str = 'all', z: pyecharts.options.series_options.Numeric = 0, z_level: pyecharts.options.series_options.Numeric = 0, is_silent: bool = False, is_invisible: bool = False, is_ignore: bool = False, cursor: str = 'pointer', is_draggable: bool = False, is_progressive: bool = False, width: pyecharts.options.series_options.Numeric = 0, height: pyecharts.options.series_options.Numeric = 0)

   Bases: :py:obj:`BaseGraphic`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GraphicGroup(graphic_item: pyecharts.options.series_options.Union[GraphicItem, dict, None] = None, is_diff_children_by_name: bool = False, children: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence[BaseGraphic]] = None)

   Bases: :py:obj:`BaseGraphic`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GraphicImage(graphic_item: pyecharts.options.series_options.Union[GraphicItem, dict, None] = None, graphic_imagestyle_opts: pyecharts.options.series_options.Union[GraphicImageStyleOpts, dict, None] = None)

   Bases: :py:obj:`BaseGraphic`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GraphicText(graphic_item: pyecharts.options.series_options.Union[GraphicItem, dict, None] = None, graphic_textstyle_opts: pyecharts.options.series_options.Union[GraphicTextStyleOpts, dict, None] = None)

   Bases: :py:obj:`BaseGraphic`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GraphicRect(graphic_item: pyecharts.options.series_options.Union[GraphicItem, dict, None] = None, graphic_shape_opts: pyecharts.options.series_options.Union[GraphicShapeOpts, dict, None] = None, graphic_basicstyle_opts: pyecharts.options.series_options.Union[GraphicBasicStyleOpts, dict, None] = None)

   Bases: :py:obj:`BaseGraphic`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: SankeyLevelsOpts(depth: pyecharts.options.series_options.Numeric = None, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: TreeMapItemStyleOpts(color: pyecharts.options.series_options.Optional[str] = None, color_alpha: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence] = None, color_saturation: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence] = None, border_color: pyecharts.options.series_options.Optional[str] = None, border_width: pyecharts.options.series_options.Numeric = 0, border_color_saturation: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence] = None, gap_width: pyecharts.options.series_options.Numeric = 0, stroke_color: pyecharts.options.series_options.Optional[str] = None, stroke_width: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: TreeMapLevelsOpts(color: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Sequence] = None, color_alpha: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence] = None, color_saturation: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence] = None, color_mapping_by: str = 'index', treemap_itemstyle_opts: pyecharts.options.series_options.Union[TreeMapItemStyleOpts, dict, None] = None, label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, upper_label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: Map3DLabelOpts(is_show: bool = True, distance: pyecharts.options.series_options.Numeric = None, formatter: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, text_style: pyecharts.options.series_options.Union[pyecharts.options.series_options.TextStyleOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: Map3DRealisticMaterialOpts(detail_texture: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, texture_tiling: pyecharts.options.series_options.Numeric = 1, texture_offset: pyecharts.options.series_options.Numeric = 0, roughness: pyecharts.options.series_options.Numeric = 0.5, metalness: pyecharts.options.series_options.Numeric = 0, roughness_adjust: pyecharts.options.series_options.Numeric = 0.5, metalness_adjust: pyecharts.options.series_options.Numeric = 0.5, normal_texture: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: Map3DLambertMaterialOpts(detail_texture: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, texture_tiling: pyecharts.options.series_options.Numeric = 1, texture_offset: pyecharts.options.series_options.Numeric = 0)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: Map3DColorMaterialOpts(detail_texture: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, texture_tiling: pyecharts.options.series_options.Numeric = 1, texture_offset: pyecharts.options.series_options.Numeric = 0)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: Map3DLightOpts(main_color: str = '#fff', main_intensity: pyecharts.options.series_options.Numeric = 1, is_main_shadow: bool = False, main_shadow_quality: str = 'medium', main_alpha: pyecharts.options.series_options.Numeric = 40, main_beta: pyecharts.options.series_options.Numeric = 40, ambient_color: str = '#fff', ambient_intensity: pyecharts.options.series_options.Numeric = 0.2, ambient_cubemap_texture: pyecharts.options.series_options.Optional[str] = None, ambient_cubemap_diffuse_intensity: pyecharts.options.series_options.Numeric = 0.5, ambient_cubemap_specular_intensity: pyecharts.options.series_options.Numeric = 0.5)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: Map3DPostEffectOpts(is_enable: bool = False, is_bloom_enable: bool = False, bloom_intensity: pyecharts.options.series_options.Numeric = 0.1, is_depth_field_enable: bool = False, depth_field_focal_distance: pyecharts.options.series_options.Numeric = 50, depth_field_focal_range: pyecharts.options.series_options.Numeric = 20, depth_field_fstop: pyecharts.options.series_options.Numeric = 2.8, depth_field_blur_radius: pyecharts.options.series_options.Numeric = 10, is_ssao_enable: bool = False, ssao_quality: str = 'medium', ssao_radius: pyecharts.options.series_options.Numeric = 2, ssao_intensity: pyecharts.options.series_options.Numeric = 1, is_color_correction_enable: bool = False, color_correction_lookup_texture: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, color_correction_exposure: pyecharts.options.series_options.Numeric = 0, color_correction_brightness: pyecharts.options.series_options.Numeric = 0, color_correction_contrast: pyecharts.options.series_options.Numeric = 1, color_correction_saturation: pyecharts.options.series_options.Numeric = 1, is_fxaa_enable: bool = False)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: Map3DViewControlOpts(projection: str = 'perspective', auto_rotate: bool = False, auto_rotate_direction: str = 'cw', auto_rotate_speed: pyecharts.options.series_options.Numeric = 10, auto_rotate_after_still: pyecharts.options.series_options.Numeric = 3, damping: pyecharts.options.series_options.Numeric = 0.8, rotate_sensitivity: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence] = 1, zoom_sensitivity: pyecharts.options.series_options.Numeric = 1, pan_sensitivity: pyecharts.options.series_options.Numeric = 1, pan_mouse_button: str = 'left', rotate_mouse_button: str = 'middle', distance: pyecharts.options.series_options.Numeric = 100, min_distance: pyecharts.options.series_options.Numeric = 40, max_distance: pyecharts.options.series_options.Numeric = 400, orthographic_size: pyecharts.options.series_options.Numeric = 100, min_orthographic_size: pyecharts.options.series_options.Numeric = 20, max_orthographic_size: pyecharts.options.series_options.Numeric = 400, alpha: pyecharts.options.series_options.Numeric = 40, beta: pyecharts.options.series_options.Numeric = 0, center: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence] = None, min_alpha: pyecharts.options.series_options.Numeric = 5, max_alpha: pyecharts.options.series_options.Numeric = 90, min_beta: pyecharts.options.series_options.Numeric = -80, max_beta: pyecharts.options.series_options.Numeric = 80, animation: bool = True, animation_duration_update: pyecharts.options.series_options.Numeric = 1000, animation_easing_update: str = 'cubicInOut')

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GlobeLayersOpts(is_show: bool = True, type_: str = 'overlay', name: pyecharts.options.series_options.Optional[str] = None, blend_to: str = 'albedo', intensity: pyecharts.options.series_options.Numeric = 1, shading: str = 'lambert', distance: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, texture: pyecharts.options.series_options.Union[pyecharts.options.series_options.JSFunc, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: BarBackgroundStyleOpts(color: str = 'rgba(180, 180, 180, 0.2)', border_color: str = '#000', border_width: pyecharts.options.series_options.Numeric = 0, border_type: str = 'solid', border_radius: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence] = 0, shadow_blur: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, shadow_color: pyecharts.options.series_options.Optional[str] = None, shadow_offset_x: pyecharts.options.series_options.Numeric = 0, shadow_offset_y: pyecharts.options.series_options.Numeric = 0, opacity: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GaugeTitleOpts(is_show: bool = True, offset_center: pyecharts.options.series_options.Sequence = None, color: str = '#333', font_style: str = 'normal', font_weight: str = 'normal', font_family: str = 'sans-serif', font_size: pyecharts.options.series_options.Numeric = 15, background_color: str = 'transparent', border_color: str = 'transparent', border_width: pyecharts.options.series_options.Numeric = 0, border_radius: pyecharts.options.series_options.Numeric = 0, padding: pyecharts.options.series_options.Numeric = 0, shadow_color: pyecharts.options.series_options.Optional[str] = 'transparent', shadow_blur: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = 0, shadow_offset_x: pyecharts.options.series_options.Numeric = 0, shadow_offset_y: pyecharts.options.series_options.Numeric = 0, overflow: pyecharts.options.series_options.Optional[str] = 'none', rich: pyecharts.options.series_options.Optional[dict] = None, is_value_animation: bool = True)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GaugeDetailOpts(is_show: bool = True, background_color: str = 'transparent', border_width: pyecharts.options.series_options.Numeric = 0, border_color: str = 'transparent', offset_center: pyecharts.options.series_options.Sequence = None, formatter: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, color: str = '#464646', font_style: str = 'normal', font_weight: str = 'normal', font_family: str = 'sans-serif', font_size: pyecharts.options.series_options.Numeric = 15, border_radius: pyecharts.options.series_options.Numeric = 0, padding: pyecharts.options.series_options.Numeric = 0, shadow_color: pyecharts.options.series_options.Optional[str] = 'transparent', shadow_blur: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = 0, shadow_offset_x: pyecharts.options.series_options.Numeric = 0, shadow_offset_y: pyecharts.options.series_options.Numeric = 0, overflow: pyecharts.options.series_options.Optional[str] = 'none', rich: pyecharts.options.series_options.Optional[dict] = None, is_value_animation: bool = True)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GaugeProgressOpts(is_show: bool = False, is_overlap: bool = True, width: pyecharts.options.series_options.Numeric = 10, is_round_cap: bool = False, is_clip: bool = False, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GaugePointerOpts(is_show: bool = True, length: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric] = '80%', width: pyecharts.options.series_options.Numeric = 8, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GaugeAnchorOpts(is_show: bool = True, is_show_above: bool = False, size: pyecharts.options.series_options.Numeric = 6, icon: str = 'circle', offset_center: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence] = None, is_keep_aspect: bool = False, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: PieLabelLineOpts(is_show: bool = True, is_show_above: bool = False, length: pyecharts.options.series_options.Numeric = 15, length_2: pyecharts.options.series_options.Numeric = 15, smooth: pyecharts.options.series_options.Union[bool, pyecharts.options.series_options.Numeric] = False, min_turn_angle: pyecharts.options.series_options.Numeric = 90, linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None, max_surface_angle: pyecharts.options.series_options.Numeric = 90)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: PieEmptyCircleStyle(color: str = 'lightgray', border_color: str = '#000', border_width: pyecharts.options.series_options.Numeric = 0, border_type: str = 'solid', border_dash_offset: pyecharts.options.series_options.Numeric = 0, border_cap: str = 'butt', border_join: str = 'bevel', border_miter_limit: pyecharts.options.series_options.Numeric = 10, opacity: pyecharts.options.series_options.Numeric = 1)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: TimelineCheckPointerStyle(symbol: str = 'circle', symbol_size: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence[pyecharts.options.series_options.Numeric]] = 13, symbol_rotate: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, symbol_keep_aspect: bool = False, symbol_offset: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence[pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric]]] = None, color: str = '#c23531', border_width: pyecharts.options.series_options.Numeric = 5, border_color: str = 'rgba(194,53,49,0.5)', is_animation: bool = True, animation_duration: pyecharts.options.series_options.Numeric = 300, animation_easing: str = 'quinticInOut')

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: TimelineControlStyle(is_show: bool = True, is_show_play_button: bool = True, is_show_prev_button: bool = True, is_show_next_button: bool = True, item_size: pyecharts.options.series_options.Numeric = 22, item_gap: pyecharts.options.series_options.Numeric = 12, position: str = 'left', play_icon: pyecharts.options.series_options.Optional[str] = None, stop_icon: pyecharts.options.series_options.Optional[str] = None, prev_icon: pyecharts.options.series_options.Optional[str] = None, next_icon: pyecharts.options.series_options.Optional[str] = None, color: str = '#304654', border_color: str = '#304654', border_width: pyecharts.options.series_options.Numeric = 1)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: TabChartGlobalOpts(is_enable: bool = False, tab_base_css: pyecharts.options.series_options.Optional[dict] = None, tab_button_css: pyecharts.options.series_options.Optional[dict] = None, tab_button_hover_css: pyecharts.options.series_options.Optional[dict] = None, tab_button_active_css: pyecharts.options.series_options.Optional[dict] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GraphGLNode(name: pyecharts.options.series_options.Optional[str] = None, x: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, y: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, value: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence, None] = None, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GraphGLLink(source: pyecharts.options.series_options.Union[str, int, None] = None, target: pyecharts.options.series_options.Union[str, int, None] = None, value: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GeoRegionsOpts(name: pyecharts.options.series_options.Optional[str] = None, is_selected: bool = False, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, emphasis_itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, emphasis_label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, select_itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, select_label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, blur_itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, blur_label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, tooltip_opts: pyecharts.options.series_options.Union[pyecharts.options.global_options.TooltipOpts, dict, None] = None, is_silent: bool = False)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: SunburstLabelLineOpts(is_show: pyecharts.options.series_options.Optional[bool] = None, is_show_above: pyecharts.options.series_options.Optional[bool] = None, length_2: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, smooth: pyecharts.options.series_options.Union[bool, pyecharts.options.series_options.Numeric] = False, min_turn_angle: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: SunburstLabelLayoutOpts(is_hide_overlap: pyecharts.options.series_options.Optional[bool] = None, is_move_overlap: pyecharts.options.series_options.Optional[bool] = None, rotate: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, width: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, height: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, align: pyecharts.options.series_options.Optional[str] = None, vertical_align: pyecharts.options.series_options.Optional[str] = None, font_size: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, is_draggable: pyecharts.options.series_options.Optional[bool] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: SunburstLevelOpts(radius: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence] = None, label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, label_line_opts: pyecharts.options.series_options.Union[SunburstLabelLineOpts, dict, None] = None, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: BarItem(name: pyecharts.options.series_options.Union[int, str, None], value: pyecharts.options.series_options.Numeric, *, group_id: pyecharts.options.series_options.Optional[str] = None, label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, is_show_label_line: pyecharts.options.series_options.Optional[bool] = None, label_line_linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, tooltip_opts: pyecharts.options.series_options.Union[pyecharts.options.global_options.TooltipOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: BoxplotItem(name: pyecharts.options.series_options.Union[int, str], value: pyecharts.options.series_options.Sequence, *, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, tooltip_opts: pyecharts.options.series_options.Union[pyecharts.options.global_options.TooltipOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: CandleStickItem(name: pyecharts.options.series_options.Union[str, int], value: pyecharts.options.series_options.Sequence, *, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, tooltip_opts: pyecharts.options.series_options.Union[pyecharts.options.global_options.TooltipOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: EffectScatterItem(name: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric], value: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric], *, symbol: pyecharts.options.series_options.Optional[str] = None, symbol_size: pyecharts.options.series_options.Union[pyecharts.options.series_options.Sequence[pyecharts.options.series_options.Numeric], pyecharts.options.series_options.Numeric] = None, symbol_rotate: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, symbol_keep_aspect: bool = False, symbol_offset: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence] = None, label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, tooltip_opts: pyecharts.options.series_options.Union[pyecharts.options.global_options.TooltipOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: FunnelItem(name: pyecharts.options.series_options.Union[str, int], value: pyecharts.options.series_options.Union[pyecharts.options.series_options.Sequence, str, pyecharts.options.series_options.Numeric], *, is_show_label_line: pyecharts.options.series_options.Optional[bool] = None, label_line_width: pyecharts.options.series_options.Optional[int] = None, label_line_linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None, label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, tooltip_opts: pyecharts.options.series_options.Union[pyecharts.options.global_options.TooltipOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: LineItem(name: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric] = None, value: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric] = None, *, symbol: pyecharts.options.series_options.Optional[str] = 'circle', symbol_size: pyecharts.options.series_options.Numeric = 4, symbol_rotate: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, symbol_keep_aspect: bool = False, symbol_offset: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence] = None, label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, tooltip_opts: pyecharts.options.series_options.Union[pyecharts.options.global_options.TooltipOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: MapItem(name: pyecharts.options.series_options.Optional[str] = None, value: pyecharts.options.series_options.Union[pyecharts.options.series_options.Sequence, pyecharts.options.series_options.Numeric, str] = None, group_id: pyecharts.options.series_options.Optional[str] = None, is_selected: bool = False, label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, tooltip_opts: pyecharts.options.series_options.Union[pyecharts.options.global_options.TooltipOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GeoItem(longitude: pyecharts.options.series_options.Numeric, latitude: pyecharts.options.series_options.Numeric, name: str, value: pyecharts.options.series_options.Union[pyecharts.options.series_options.Sequence, pyecharts.options.series_options.Numeric, str] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: ParallelItem(name: pyecharts.options.series_options.Optional[str] = None, value: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence] = None, linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None, color: pyecharts.options.series_options.Union[str, dict] = '#000', width: pyecharts.options.series_options.Numeric = 2, type_: str = 'solid', dash_offset: pyecharts.options.series_options.Numeric = 0, cap: str = 'butt', join: str = 'bevel', miter_limit: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, opacity: pyecharts.options.series_options.Numeric = 0.45)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: PieItem(name: pyecharts.options.series_options.Optional[str] = None, value: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, group_id: pyecharts.options.series_options.Optional[str] = None, is_selected: bool = False, label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, tooltip_opts: pyecharts.options.series_options.Union[pyecharts.options.global_options.TooltipOpts, dict, None] = None, label_line_opts: pyecharts.options.series_options.Union[PieLabelLineOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: RadarItem(name: pyecharts.options.series_options.Optional[str] = None, value: pyecharts.options.series_options.Union[pyecharts.options.series_options.Sequence, pyecharts.options.series_options.Numeric, str] = None, symbol: pyecharts.options.series_options.Optional[str] = None, symbol_size: pyecharts.options.series_options.Union[pyecharts.options.series_options.Sequence[pyecharts.options.series_options.Numeric], pyecharts.options.series_options.Numeric] = None, symbol_rotate: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, symbol_keep_aspect: bool = False, symbol_offset: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence] = None, label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, tooltip_opts: pyecharts.options.series_options.Union[pyecharts.options.global_options.TooltipOpts, dict, None] = None, linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None, areastyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.AreaStyleOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: ScatterItem(name: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric] = None, value: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric] = None, symbol: pyecharts.options.series_options.Optional[str] = None, symbol_size: pyecharts.options.series_options.Union[pyecharts.options.series_options.Sequence[pyecharts.options.series_options.Numeric], pyecharts.options.series_options.Numeric] = None, symbol_rotate: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, symbol_keep_aspect: bool = False, symbol_offset: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence] = None, label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, tooltip_opts: pyecharts.options.series_options.Union[pyecharts.options.global_options.TooltipOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: SunburstItem(value: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, name: pyecharts.options.series_options.Optional[str] = None, link: pyecharts.options.series_options.Optional[str] = None, target: pyecharts.options.series_options.Optional[str] = 'blank', label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, children: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: ThemeRiverItem(date: pyecharts.options.series_options.Optional[str] = None, value: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, name: pyecharts.options.series_options.Optional[str] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: TreeItem(name: pyecharts.options.series_options.Optional[str] = None, value: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, children: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


