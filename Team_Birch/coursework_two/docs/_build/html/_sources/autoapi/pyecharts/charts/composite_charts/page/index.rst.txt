pyecharts.charts.composite_charts.page
======================================

.. py:module:: pyecharts.charts.composite_charts.page


Attributes
----------

.. autoapisummary::

   pyecharts.charts.composite_charts.page.DOWNLOAD_CFG_FUNC


Classes
-------

.. autoapisummary::

   pyecharts.charts.composite_charts.page.Page


Module Contents
---------------

.. py:data:: DOWNLOAD_CFG_FUNC
   :value: Multiline-String

   .. raw:: html

      <details><summary>Show Value</summary>

   .. code-block:: python

      """
      function downloadCfg () {
          const fileName = 'chart_config.json'
          let downLink = document.createElement('a')
          downLink.download = fileName
      
          let result = []
          for(let i=0; i<charts_id.length; i++) {
              chart = $('#'+charts_id[i])
              result.push({
                  cid: charts_id[i],
                  width: chart.css("width"),
                  height: chart.css("height"),
                  top: chart.offset().top + "px",
                  left: chart.offset().left + "px"
              })
          }
      
          let blob = new Blob([JSON.stringify(result)])
          downLink.href = URL.createObjectURL(blob)
          document.body.appendChild(downLink)
          downLink.click()
          document.body.removeChild(downLink)
      }"""

   .. raw:: html

      </details>



.. py:class:: Page(page_title: str = CurrentConfig.PAGE_TITLE, js_host: str = '', interval: int = 1, is_remove_br: bool = False, is_embed_js: bool = False, page_border_color: str = '', layout: pyecharts.types.Union[pyecharts.options.PageLayoutOpts, dict] = PageLayoutOpts())

   Bases: :py:obj:`pyecharts.charts.mixins.CompositeMixin`


   `Page` A container object to present multiple charts vertically in a single page


   .. py:attribute:: SimplePageLayout


   .. py:attribute:: DraggablePageLayout


   .. py:attribute:: js_host
      :type:  str
      :value: 'https://assets.pyecharts.org/assets/v5/'



   .. py:attribute:: page_title
      :value: 'Awesome-pyecharts'



   .. py:attribute:: page_interval
      :value: 1



   .. py:attribute:: remove_br
      :value: False



   .. py:attribute:: page_border_color
      :value: ''



   .. py:attribute:: layout
      :value: '_MARK_FREEDOM_LAYOUT_'



   .. py:attribute:: js_functions
      :type:  pyecharts.commons.utils.OrderedSet


   .. py:attribute:: js_dependencies


   .. py:attribute:: download_button
      :type:  bool
      :value: False



   .. py:attribute:: render_options
      :type:  dict


   .. py:method:: add(*charts)


   .. py:method:: render(path: str = 'render.html', template_name: str = 'simple_page.html', env: pyecharts.types.Optional[jinja2.Environment] = None, **kwargs) -> str


   .. py:method:: render_embed(template_name: str = 'simple_page.html', env: pyecharts.types.Optional[jinja2.Environment] = None, **kwargs) -> str


   .. py:method:: render_notebook()


   .. py:method:: save_resize_html(source: str = 'render.html', *, cfg_file: pyecharts.types.Optional[str] = None, cfg_dict: pyecharts.types.Optional[list] = None, dest: str = 'resize_render.html') -> str
      :staticmethod:



