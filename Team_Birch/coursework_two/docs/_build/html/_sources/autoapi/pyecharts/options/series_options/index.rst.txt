pyecharts.options.series_options
================================

.. py:module:: pyecharts.options.series_options


Attributes
----------

.. autoapisummary::

   pyecharts.options.series_options.Numeric
   pyecharts.options.series_options.JSFunc


Classes
-------

.. autoapisummary::

   pyecharts.options.series_options.BasicOpts
   pyecharts.options.series_options.AnimationOpts
   pyecharts.options.series_options.ItemStyleOpts
   pyecharts.options.series_options.TextStyleOpts
   pyecharts.options.series_options.LabelOpts
   pyecharts.options.series_options.LineStyleOpts
   pyecharts.options.series_options.SplitLineOpts
   pyecharts.options.series_options.MarkPointItem
   pyecharts.options.series_options.MarkPointOpts
   pyecharts.options.series_options.MarkLineItem
   pyecharts.options.series_options.MarkLineOpts
   pyecharts.options.series_options.MarkAreaItem
   pyecharts.options.series_options.MarkAreaOpts
   pyecharts.options.series_options.EffectOpts
   pyecharts.options.series_options.Lines3DEffectOpts
   pyecharts.options.series_options.AreaStyleOpts
   pyecharts.options.series_options.SplitAreaOpts
   pyecharts.options.series_options.TreeMapBreadcrumbOpts
   pyecharts.options.series_options.MinorTickOpts
   pyecharts.options.series_options.MinorSplitLineOpts
   pyecharts.options.series_options.GraphGLForceAtlas2Opts


Module Contents
---------------

.. py:data:: Numeric

.. py:data:: JSFunc

.. py:class:: BasicOpts

   .. py:method:: update(**kwargs)


   .. py:method:: get(key: str) -> Any


.. py:class:: AnimationOpts(animation: bool = True, animation_threshold: Numeric = 2000, animation_duration: Union[Numeric, JSFunc] = 1000, animation_easing: Union[str] = 'cubicOut', animation_delay: Union[Numeric, JSFunc] = 0, animation_duration_update: Union[Numeric, JSFunc] = 300, animation_easing_update: Union[str] = 'cubicOut', animation_delay_update: Union[Numeric, JSFunc] = 0)

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: ItemStyleOpts(color: Optional[JSFunc] = None, color0: Optional[str] = None, border_color: Optional[str] = None, border_color0: Optional[str] = None, border_width: Optional[Numeric] = None, border_type: Optional[str] = None, border_radius: Optional[Numeric] = None, opacity: Optional[Numeric] = None, area_color: Optional[str] = None)

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: TextStyleOpts(color: Optional[str] = None, font_style: Optional[str] = None, font_weight: Optional[str] = None, font_family: Optional[str] = None, font_size: Optional[Numeric] = None, align: Optional[str] = None, vertical_align: Optional[str] = None, line_height: Optional[str] = None, background_color: Optional[str] = None, border_color: Optional[str] = None, border_width: Optional[Numeric] = None, border_radius: Union[Numeric, Sequence, None] = None, padding: Union[Numeric, Sequence, None] = None, shadow_color: Optional[str] = None, shadow_blur: Optional[Numeric] = None, width: Optional[str] = None, height: Optional[str] = None, rich: Optional[dict] = None)

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: LabelOpts(is_show: bool = True, position: Optional[Union[str, Sequence]] = None, color: Optional[str] = None, distance: Union[Numeric, Sequence, None] = None, font_size: Optional[Numeric] = None, font_style: Optional[str] = None, font_weight: Optional[str] = None, font_family: Optional[str] = None, rotate: Optional[Numeric] = None, margin: Optional[Numeric] = 8, interval: Union[Numeric, str, None] = None, horizontal_align: Optional[str] = None, vertical_align: Optional[str] = None, formatter: Optional[JSFunc] = None, background_color: Optional[str] = None, border_color: Optional[str] = None, border_width: Optional[Numeric] = None, border_radius: Optional[Numeric] = None, padding: Union[Numeric, Sequence[Numeric], None] = None, text_width: Optional[Numeric] = None, text_height: Optional[Numeric] = None, text_border_color: Optional[str] = None, text_border_width: Optional[Numeric] = None, text_shadow_color: Optional[str] = None, text_shadow_blur: Optional[Numeric] = None, text_shadow_offset_x: Optional[Numeric] = None, text_shadow_offset_y: Optional[Numeric] = None, overflow: Optional[str] = None, rich: Optional[dict] = None, is_value_animation: bool = False)

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: LineStyleOpts(is_show: bool = True, width: Numeric = 1, opacity: Numeric = 1, curve: Numeric = 0, type_: str = 'solid', color: Union[str, Sequence, None] = None)

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: SplitLineOpts(is_show: bool = False, linestyle_opts: LineStyleOpts = LineStyleOpts())

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: MarkPointItem(name: Optional[str] = None, type_: Optional[str] = None, value_index: Optional[Numeric] = None, value_dim: Optional[str] = None, coord: Optional[Sequence] = None, x: Optional[Numeric] = None, y: Optional[Numeric] = None, value: Optional[Numeric] = None, symbol: Optional[str] = None, symbol_size: Union[Numeric, Sequence, None] = None, itemstyle_opts: Union[ItemStyleOpts, dict, None] = None)

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: MarkPointOpts(data: Sequence[Union[MarkPointItem, dict]] = None, symbol: Optional[str] = None, symbol_size: Union[None, Numeric] = None, label_opts: LabelOpts = LabelOpts(position='inside', color='#fff'), animation_opts: Union[AnimationOpts, dict, None] = None)

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: MarkLineItem(name: Optional[str] = None, type_: Optional[str] = None, x: Union[str, Numeric, None] = None, xcoord: Union[str, Numeric, None] = None, y: Union[str, Numeric, None] = None, ycoord: Union[str, Numeric, None] = None, value_index: Optional[Numeric] = None, value_dim: Optional[str] = None, coord: Optional[Sequence] = None, linestyle_opts: Union[LineStyleOpts, dict, None] = None, symbol: Optional[str] = None, symbol_size: Optional[Numeric] = None)

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: MarkLineOpts(is_silent: bool = False, data: Sequence[Union[MarkLineItem, dict]] = None, symbol: Optional[str] = None, symbol_size: Union[None, Numeric] = None, precision: int = 2, label_opts: LabelOpts = LabelOpts(), linestyle_opts: Union[LineStyleOpts, dict, None] = None, animation_opts: Union[AnimationOpts, dict, None] = None)

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: MarkAreaItem(name: Optional[str] = None, type_: Tuple[Optional[str], Optional[str]] = (None, None), value_index: Tuple[Optional[Numeric], Optional[Numeric]] = (None, None), value_dim: Tuple[Optional[str], Optional[str]] = (None, None), x: Tuple[Union[str, Numeric, None], Union[str, Numeric, None]] = (None, None), y: Tuple[Union[str, Numeric, None], Union[str, Numeric, None]] = (None, None), label_opts: Union[LabelOpts, dict, None] = None, itemstyle_opts: Union[ItemStyleOpts, dict, None] = None)

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  Sequence


.. py:class:: MarkAreaOpts(is_silent: bool = False, label_opts: LabelOpts = LabelOpts(), data: Sequence[Union[MarkAreaItem, Sequence, dict]] = None, itemstyle_opts: ItemStyleOpts = None, animation_opts: Union[AnimationOpts, dict, None] = None)

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: EffectOpts(is_show: bool = True, brush_type: str = 'stroke', scale: Numeric = 2.5, period: Numeric = 4, color: Optional[str] = None, symbol: Optional[str] = None, symbol_size: Optional[Numeric] = None, trail_length: Optional[Numeric] = None)

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: Lines3DEffectOpts(is_show: bool = True, period: Numeric = 4, constant_speed: Optional[Numeric] = None, trail_width: Numeric = 4, trail_length: Numeric = 0.1, trail_color: Optional[str] = None, trail_opacity: Optional[Numeric] = None)

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: AreaStyleOpts(opacity: Optional[Numeric] = 0, color: Optional[JSFunc] = None)

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: SplitAreaOpts(is_show=True, areastyle_opts: AreaStyleOpts = AreaStyleOpts())

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: TreeMapBreadcrumbOpts(is_show: bool = True, pos_left: Union[str, Numeric] = 'center', pos_right: Union[str, Numeric] = 'auto', pos_top: Union[str, Numeric] = 'auto', pos_bottom: Union[str, Numeric] = 0, height: Numeric = 22, empty_item_width: Numeric = 25, item_opts: ItemStyleOpts = ItemStyleOpts())

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: MinorTickOpts(is_show: bool = False, split_number: Numeric = 5, length: Numeric = 3, linestyle_opts: Union[LineStyleOpts, dict, None] = None)

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: MinorSplitLineOpts(is_show: bool = False, width: Numeric = 1, type_: str = 'solid', opacity: Union[Numeric, None] = None, linestyle_opts: Union[LineStyleOpts, dict, None] = None)

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GraphGLForceAtlas2Opts(is_gpu: bool = True, steps: Numeric = 1, stop_threshold: Numeric = 1, is_barnes_hut_optimize: Optional[bool] = None, is_repulsion_by_degree: bool = True, is_lin_log_mode: bool = False, gravity: Numeric = 1, gravity_center: Optional[Sequence] = None, scaling: Optional[Numeric] = None, edge_weight_influence: Numeric = 1, edge_weight: Union[Sequence, Numeric] = None, node_weight: Union[Sequence, Numeric] = None, is_prevent_overlap: bool = False)

   Bases: :py:obj:`BasicOpts`


   .. py:attribute:: opts
      :type:  dict


