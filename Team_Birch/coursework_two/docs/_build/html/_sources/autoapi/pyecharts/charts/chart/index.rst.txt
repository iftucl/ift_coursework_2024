pyecharts.charts.chart
======================

.. py:module:: pyecharts.charts.chart


Classes
-------

.. autoapisummary::

   pyecharts.charts.chart.Chart
   pyecharts.charts.chart.RectChart
   pyecharts.charts.chart.Chart3D
   pyecharts.charts.chart.ThreeAxisChart


Module Contents
---------------

.. py:class:: Chart(init_opts: pyecharts.types.Init = opts.InitOpts(), render_opts: pyecharts.types.RenderInit = opts.RenderOpts())

   Bases: :py:obj:`pyecharts.charts.base.Base`


   .. py:attribute:: colors


   .. py:attribute:: default_color_n


   .. py:method:: set_dark_mode(dark_mode_colors: pyecharts.types.Optional[pyecharts.types.Sequence[str]] = None, dark_mode_bg_color: str = '#100C2A')


   .. py:method:: set_colors(colors: pyecharts.types.Sequence[str])


   .. py:method:: set_series_opts(label_opts: pyecharts.types.Label = None, linestyle_opts: pyecharts.types.LineStyle = None, splitline_opts: pyecharts.types.SplitLine = None, areastyle_opts: pyecharts.types.AreaStyle = None, axisline_opts: pyecharts.types.AxisLine = None, markpoint_opts: pyecharts.types.MarkPoint = None, markline_opts: pyecharts.types.MarkLine = None, markarea_opts: pyecharts.types.MarkArea = None, effect_opts: pyecharts.types.Effect = opts.EffectOpts(), tooltip_opts: pyecharts.types.Tooltip = None, itemstyle_opts: pyecharts.types.ItemStyle = None, **kwargs)


   .. py:method:: set_global_opts(title_opts: pyecharts.types.Title = opts.TitleOpts(), legend_opts: pyecharts.types.Legend = opts.LegendOpts(), tooltip_opts: pyecharts.types.Tooltip = None, toolbox_opts: pyecharts.types.Toolbox = None, brush_opts: pyecharts.types.Brush = None, xaxis_opts: pyecharts.types.Axis = None, yaxis_opts: pyecharts.types.Axis = None, visualmap_opts: pyecharts.types.VisualMap = None, datazoom_opts: pyecharts.types.DataZoom = None, graphic_opts: pyecharts.types.Graphic = None, axispointer_opts: pyecharts.types.AxisPointer = None)


   .. py:method:: add_dataset(source: pyecharts.types.Union[pyecharts.types.Sequence, pyecharts.types.JSFunc] = None, dimensions: pyecharts.types.Optional[pyecharts.types.Sequence] = None, source_header: pyecharts.types.Optional[bool] = None, transform: pyecharts.types.Optional[pyecharts.types.Sequence[pyecharts.options.DatasetTransformOpts]] = None, from_dataset_index: pyecharts.types.Optional[pyecharts.types.Numeric] = None, from_dataset_id: pyecharts.types.Optional[pyecharts.types.Numeric] = None, from_transform_result: pyecharts.types.Optional[pyecharts.types.Numeric] = None)


.. py:class:: RectChart(init_opts: pyecharts.types.Init = opts.InitOpts(), render_opts: pyecharts.types.RenderInit = opts.RenderOpts())

   Bases: :py:obj:`Chart`


   .. py:method:: extend_axis(xaxis_data: pyecharts.types.Sequence = None, xaxis: pyecharts.types.Axis = None, yaxis: pyecharts.types.Axis = None)


   .. py:method:: add_xaxis(xaxis_data: pyecharts.types.Sequence)


   .. py:method:: reversal_axis()


   .. py:method:: overlap(chart: pyecharts.charts.base.Base)


.. py:class:: Chart3D(init_opts: pyecharts.types.Init = opts.InitOpts(), render_opts: pyecharts.types.RenderInit = opts.RenderOpts())

   Bases: :py:obj:`Chart`


   `Chart3D`类是所有 3D 类图表的基类，继承自 `Chart` 类


   .. py:method:: add_globe(is_show: bool = True, globe_radius: pyecharts.types.Numeric = 100, globe_outer_radius: pyecharts.types.Numeric = 150, environment: str = 'auto', base_texture: pyecharts.types.Union[str, pyecharts.types.JsCode, None] = None, height_texture: pyecharts.types.Union[str, pyecharts.types.JsCode, None] = None, displacement_texture: pyecharts.types.Union[str, pyecharts.types.JsCode, None] = None, displacement_scale: pyecharts.types.Numeric = 0, displacement_quality: str = 'medium', shading: pyecharts.types.Optional[str] = None, realistic_material_opts: pyecharts.types.Optional[pyecharts.types.Map3DRealisticMaterial] = None, lambert_material_opts: pyecharts.types.Optional[pyecharts.types.Map3DLambertMaterial] = None, color_material_opts: pyecharts.types.Optional[pyecharts.types.Map3DColorMaterial] = None, light_opts: pyecharts.types.Optional[pyecharts.types.Map3DLight] = None, post_effect_opts: pyecharts.types.Optional[pyecharts.types.Map3DPostEffect] = None, is_enable_super_sampling: pyecharts.types.Union[str, bool] = 'auto', view_control_opts: pyecharts.types.Optional[pyecharts.types.Map3DViewControl] = None, layers: pyecharts.types.Optional[pyecharts.types.GlobeLayers] = None, z_level: pyecharts.types.Numeric = -10, pos_left: pyecharts.types.Union[str, pyecharts.types.Numeric] = 'auto', pos_top: pyecharts.types.Union[str, pyecharts.types.Numeric] = 'auto', pos_right: pyecharts.types.Union[str, pyecharts.types.Numeric] = 'auto', pos_bottom: pyecharts.types.Union[str, pyecharts.types.Numeric] = 'auto', width: pyecharts.types.Union[str, pyecharts.types.Numeric] = 'auto', height: pyecharts.types.Union[str, pyecharts.types.Numeric] = 'auto')


.. py:class:: ThreeAxisChart(init_opts: pyecharts.types.Init = opts.InitOpts(), render_opts: pyecharts.types.RenderInit = opts.RenderOpts())

   Bases: :py:obj:`Chart3D`


   `Chart3D`类是所有 3D 类图表的基类，继承自 `Chart` 类


   .. py:method:: add(series_name: str, data: pyecharts.types.Sequence, coordinate_system: pyecharts.types.Optional[str] = None, shading: pyecharts.types.Optional[str] = None, itemstyle_opts: pyecharts.types.ItemStyle = None, label_opts: pyecharts.types.Label = opts.LabelOpts(is_show=False), grid_3d_index: pyecharts.types.Numeric = 0, xaxis3d_opts: pyecharts.types.Axis3D = opts.Axis3DOpts(type_='value', name='X'), yaxis3d_opts: pyecharts.types.Axis3D = opts.Axis3DOpts(type_='value', name='Y'), zaxis3d_opts: pyecharts.types.Axis3D = opts.Axis3DOpts(type_='value', name='Z'), grid3d_opts: pyecharts.types.Grid3D = opts.Grid3DOpts(), encode: pyecharts.types.Union[pyecharts.types.JSFunc, dict, None] = None, emphasis_opts: pyecharts.types.Optional[pyecharts.types.Emphasis3D] = None, is_parametric: pyecharts.types.Optional[bool] = None, is_show_wire_frame: pyecharts.types.Optional[bool] = None, wire_frame_line_style_opts: pyecharts.types.Optional[pyecharts.options.LineStyleOpts] = None, equation: pyecharts.types.Optional[dict] = None, parametric_equation: pyecharts.types.Optional[dict] = None)


