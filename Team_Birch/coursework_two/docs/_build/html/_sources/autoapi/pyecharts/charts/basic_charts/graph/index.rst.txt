pyecharts.charts.basic_charts.graph
===================================

.. py:module:: pyecharts.charts.basic_charts.graph


Classes
-------

.. autoapisummary::

   pyecharts.charts.basic_charts.graph.Graph


Module Contents
---------------

.. py:class:: Graph(init_opts: pyecharts.types.Init = opts.InitOpts(), render_opts: pyecharts.types.RenderInit = opts.RenderOpts())

   Bases: :py:obj:`pyecharts.charts.chart.Chart`


   <<< Graph >>>

   The graph is used to represent the relational data.


   .. py:method:: add(series_name: str, nodes: pyecharts.types.Sequence[pyecharts.types.GraphNode], links: pyecharts.types.Sequence[pyecharts.types.GraphLink], categories: pyecharts.types.Union[pyecharts.types.Sequence[pyecharts.types.GraphCategory], None] = None, *, is_focusnode: bool = True, is_roam: bool = True, is_draggable: bool = False, is_rotate_label: bool = False, layout: str = 'force', symbol: pyecharts.types.Optional[str] = None, symbol_size: pyecharts.types.Numeric = 10, edge_length: pyecharts.types.Numeric = 30, gravity: pyecharts.types.Numeric = 0.2, friction: pyecharts.types.Numeric = 0.6, is_layout_animation: bool = True, repulsion: pyecharts.types.Numeric = 50, edge_label: pyecharts.types.Label = None, edge_symbol: pyecharts.types.Union[pyecharts.types.Sequence[str], str] = None, edge_symbol_size: pyecharts.types.Numeric = 10, label_opts: pyecharts.types.Label = opts.LabelOpts(), linestyle_opts: pyecharts.types.LineStyle = opts.LineStyleOpts(), tooltip_opts: pyecharts.types.Tooltip = None, itemstyle_opts: pyecharts.types.ItemStyle = None, emphasis_opts: pyecharts.types.Emphasis = None)


