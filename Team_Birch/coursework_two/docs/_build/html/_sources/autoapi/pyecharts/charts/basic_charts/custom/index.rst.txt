pyecharts.charts.basic_charts.custom
====================================

.. py:module:: pyecharts.charts.basic_charts.custom


Classes
-------

.. autoapisummary::

   pyecharts.charts.basic_charts.custom.Custom


Module Contents
---------------

.. py:class:: Custom(init_opts: pyecharts.types.Init = opts.InitOpts(), render_opts: pyecharts.types.RenderInit = opts.RenderOpts())

   Bases: :py:obj:`pyecharts.charts.chart.Chart`


   <<< Custom >>>

   Custom series allows you to customize the rendering of graphical elements
   in the series. This enables the extension of different charts.


   .. py:method:: add(series_name: str, render_item: pyecharts.types.JSFunc, *, color_by: str = 'series', is_legend_hover_link: bool = True, coordinate_system: str = 'cartesian2d', x_axis_index: pyecharts.types.Numeric = 0, y_axis_index: pyecharts.types.Numeric = 0, polar_index: pyecharts.types.Numeric = 0, geo_index: pyecharts.types.Numeric = 0, calendar_index: pyecharts.types.Numeric = 0, dataset_index: pyecharts.types.Numeric = 0, series_layout_by: str = 'column', selected_mode: pyecharts.types.Union[bool, str] = False, dimensions: pyecharts.types.Optional[pyecharts.types.Sequence] = None, encode: pyecharts.types.Union[pyecharts.types.Sequence, dict, None] = None, data: pyecharts.types.Optional[pyecharts.types.Sequence] = None, is_clip: bool = True, z_level: pyecharts.types.Numeric = 0, z: pyecharts.types.Numeric = 2, itemstyle_opts: pyecharts.types.ItemStyle = None, tooltip_opts: pyecharts.types.Tooltip = None, emphasis_opts: pyecharts.types.Emphasis = None)


