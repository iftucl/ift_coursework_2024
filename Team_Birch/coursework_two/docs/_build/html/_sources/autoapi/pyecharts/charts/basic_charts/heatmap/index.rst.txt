pyecharts.charts.basic_charts.heatmap
=====================================

.. py:module:: pyecharts.charts.basic_charts.heatmap


Classes
-------

.. autoapisummary::

   pyecharts.charts.basic_charts.heatmap.HeatMap


Module Contents
---------------

.. py:class:: HeatMap(init_opts: pyecharts.types.Init = opts.InitOpts(), render_opts: pyecharts.types.RenderInit = opts.RenderOpts())

   Bases: :py:obj:`pyecharts.charts.chart.RectChart`


   <<< HeatMap >>>

   The heat map is mainly used to represent the size of the value by color,
   which must be used in conjunction with the visualMap component.
   Two categories of axes must be used in rectangular coordinates.


   .. py:method:: add_yaxis(series_name: str, yaxis_data: pyecharts.types.Sequence[pyecharts.types.Union[dict]], value: pyecharts.types.Sequence[pyecharts.types.Union[dict]], *, coordinate_system: str = 'cartesian2d', xaxis_index: pyecharts.types.Optional[pyecharts.types.Numeric] = None, yaxis_index: pyecharts.types.Optional[pyecharts.types.Numeric] = None, geo_index: pyecharts.types.Optional[pyecharts.types.Numeric] = None, calendar_index: pyecharts.types.Optional[pyecharts.types.Numeric] = None, dataset_index: pyecharts.types.Optional[pyecharts.types.Numeric] = None, point_size: pyecharts.types.Optional[pyecharts.types.Numeric] = None, blur_size: pyecharts.types.Optional[pyecharts.types.Numeric] = None, min_opacity: pyecharts.types.Optional[pyecharts.types.Numeric] = None, max_opacity: pyecharts.types.Optional[pyecharts.types.Numeric] = None, label_opts: pyecharts.types.Label = opts.LabelOpts(), markpoint_opts: pyecharts.types.MarkPoint = None, markline_opts: pyecharts.types.MarkLine = None, markarea_opts: pyecharts.types.MarkArea = None, tooltip_opts: pyecharts.types.Tooltip = None, itemstyle_opts: pyecharts.types.ItemStyle = None, emphasis_opts: pyecharts.types.Emphasis = None, selected_mode: pyecharts.types.Union[bool, str] = False, z_level: pyecharts.types.Numeric = 0, z: pyecharts.types.Numeric = 2, encode: pyecharts.types.Union[pyecharts.types.JSFunc, dict, None] = None)


