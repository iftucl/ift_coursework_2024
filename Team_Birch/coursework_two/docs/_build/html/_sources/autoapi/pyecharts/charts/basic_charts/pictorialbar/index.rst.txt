pyecharts.charts.basic_charts.pictorialbar
==========================================

.. py:module:: pyecharts.charts.basic_charts.pictorialbar


Classes
-------

.. autoapisummary::

   pyecharts.charts.basic_charts.pictorialbar.PictorialBar


Module Contents
---------------

.. py:class:: PictorialBar(init_opts: pyecharts.types.Init = opts.InitOpts(), render_opts: pyecharts.types.RenderInit = opts.RenderOpts())

   Bases: :py:obj:`pyecharts.charts.chart.RectChart`


   <<< PictorialBar Chart >>>

   PictorialBar is a histogram that can set various figurative graphic
   elements (such as images, SVG PathData, etc.)


   .. py:method:: add_yaxis(series_name: str, y_axis: pyecharts.types.Sequence[pyecharts.types.Union[pyecharts.types.Numeric, pyecharts.options.BarItem, dict]], *, symbol: pyecharts.types.Optional[str] = None, symbol_size: pyecharts.types.Union[pyecharts.types.Numeric, pyecharts.types.Sequence, None] = None, symbol_pos: pyecharts.types.Optional[str] = None, symbol_offset: pyecharts.types.Optional[pyecharts.types.Sequence] = None, symbol_rotate: pyecharts.types.Optional[pyecharts.types.Numeric] = None, symbol_repeat: pyecharts.types.Optional[str] = None, symbol_repeat_direction: pyecharts.types.Optional[str] = None, symbol_margin: pyecharts.types.Union[pyecharts.types.Numeric, str, None] = None, is_symbol_clip: bool = False, xaxis_index: pyecharts.types.Optional[pyecharts.types.Numeric] = None, yaxis_index: pyecharts.types.Optional[pyecharts.types.Numeric] = None, color: pyecharts.types.Optional[str] = None, category_gap: pyecharts.types.Union[pyecharts.types.Numeric, str] = '20%', gap: pyecharts.types.Optional[str] = None, label_opts: pyecharts.types.Label = opts.LabelOpts(), markpoint_opts: pyecharts.types.MarkPoint = None, markline_opts: pyecharts.types.MarkLine = None, tooltip_opts: pyecharts.types.Tooltip = None, itemstyle_opts: pyecharts.types.ItemStyle = None, encode: pyecharts.types.Union[pyecharts.types.JsCode, dict] = None, emphasis_opts: pyecharts.types.Emphasis = None)


