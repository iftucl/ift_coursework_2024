pyecharts.options.global_options
================================

.. py:module:: pyecharts.options.global_options


Classes
-------

.. autoapisummary::

   pyecharts.options.global_options.AriaLabelOpts
   pyecharts.options.global_options.AriaDecalOpts
   pyecharts.options.global_options.AriaOpts
   pyecharts.options.global_options.InitOpts
   pyecharts.options.global_options.RenderOpts
   pyecharts.options.global_options.ToolBoxFeatureSaveAsImageOpts
   pyecharts.options.global_options.ToolBoxFeatureRestoreOpts
   pyecharts.options.global_options.ToolBoxFeatureDataViewOpts
   pyecharts.options.global_options.ToolBoxFeatureDataZoomOpts
   pyecharts.options.global_options.ToolBoxFeatureMagicTypeOpts
   pyecharts.options.global_options.ToolBoxFeatureBrushOpts
   pyecharts.options.global_options.ToolBoxFeatureOpts
   pyecharts.options.global_options.ToolboxOpts
   pyecharts.options.global_options.BrushOpts
   pyecharts.options.global_options.TitleOpts
   pyecharts.options.global_options.DataZoomOpts
   pyecharts.options.global_options.LegendOpts
   pyecharts.options.global_options.VisualMapOpts
   pyecharts.options.global_options.TooltipOpts
   pyecharts.options.global_options.AxisLineOpts
   pyecharts.options.global_options.AxisTickOpts
   pyecharts.options.global_options.AxisPointerOpts
   pyecharts.options.global_options.AxisOpts
   pyecharts.options.global_options.GridOpts
   pyecharts.options.global_options.Grid3DOpts
   pyecharts.options.global_options.Axis3DOpts
   pyecharts.options.global_options.ParallelOpts
   pyecharts.options.global_options.ParallelAxisOpts
   pyecharts.options.global_options.RadarIndicatorItem
   pyecharts.options.global_options.CalendarDayLabelOpts
   pyecharts.options.global_options.CalendarMonthLabelOpts
   pyecharts.options.global_options.CalendarYearLabelOpts
   pyecharts.options.global_options.CalendarOpts
   pyecharts.options.global_options.SingleAxisOpts
   pyecharts.options.global_options.RadiusAxisItem
   pyecharts.options.global_options.AngleAxisItem
   pyecharts.options.global_options.RadiusAxisOpts
   pyecharts.options.global_options.AngleAxisOpts
   pyecharts.options.global_options.PolarOpts
   pyecharts.options.global_options.DatasetTransformOpts
   pyecharts.options.global_options.EmphasisOpts
   pyecharts.options.global_options.Emphasis3DOpts
   pyecharts.options.global_options.BlurOpts
   pyecharts.options.global_options.SelectOpts
   pyecharts.options.global_options.TreeLeavesOpts


Module Contents
---------------

.. py:class:: AriaLabelOpts(is_enable: bool = True, description: pyecharts.options.series_options.Optional[str] = None, general_with_title: str = '这是一个关于“{title}”的图表。', general_without_title: str = '这是一个图表，', series_max_count: int = 10, series_single_prefix: str = '', series_single_with_name: str = '图表类型是{seriesType}，表示{seriesName}。', series_single_without_name: str = '图表类型是{seriesType}。', series_multiple_prefix: str = '它由{seriesCount}个图表系列组成。', series_multiple_with_name: str = '图表类型是{seriesType}，表示{seriesName}。', series_multiple_without_name: str = '图表类型是{seriesType}。', series_multiple_separator_middle: str = '；', series_multiple_separator_end: str = '。', data_max_count: int = 10, data_all_data: str = '其数据是——', data_partial_data: str = '其中，前{displayCnt}项是——', data_with_name: str = '{name}的数据是{value}', data_without_name: str = '{value}', data_separator_middle: str = '，', data_separator_end: str = '')

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: AriaDecalOpts(is_show: bool = False, decals_symbol: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Sequence] = 'rect', decals_symbol_size: pyecharts.options.series_options.Numeric = 1, decals_symbol_keep_aspect: bool = True, decals_color: str = 'rgba(0, 0, 0, 0.2)', decals_background_color: pyecharts.options.series_options.Optional[str] = None, decals_dash_array_x: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence] = 5, decals_dash_array_y: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence] = 5, decals_rotation: pyecharts.options.series_options.Numeric = 0, decals_max_tile_width: pyecharts.options.series_options.Numeric = 512, decals_max_tile_height: pyecharts.options.series_options.Numeric = 512)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: AriaOpts(is_enable: bool = False, aria_label_opts: pyecharts.options.series_options.Optional[AriaLabelOpts] = None, aria_decal_opts: pyecharts.options.series_options.Optional[AriaDecalOpts] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: InitOpts(width: str = '900px', height: str = '500px', is_horizontal_center: bool = False, chart_id: pyecharts.options.series_options.Optional[str] = None, renderer: str = RenderType.CANVAS, page_title: str = CurrentConfig.PAGE_TITLE, theme: str = ThemeType.WHITE, bg_color: pyecharts.options.series_options.Union[str, dict] = None, is_fill_bg_color: bool = False, js_host: str = '', animation_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.AnimationOpts, dict] = AnimationOpts(), aria_opts: pyecharts.options.series_options.Union[AriaOpts, dict] = AriaOpts())

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: RenderOpts(is_embed_js: bool = False)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: ToolBoxFeatureSaveAsImageOpts(type_: str = 'png', name: pyecharts.options.series_options.Optional[str] = None, background_color: str = 'auto', connected_background_color: str = '#fff', exclude_components: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence[str]] = None, is_show: bool = True, title: str = '保存为图片', icon: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, pixel_ratio: pyecharts.options.series_options.Numeric = 1)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: ToolBoxFeatureRestoreOpts(is_show: bool = True, title: str = '还原', icon: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: ToolBoxFeatureDataViewOpts(is_show: bool = True, title: str = '数据视图', icon: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, is_read_only: bool = False, option_to_content: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, content_to_option: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, lang: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence[str]] = None, background_color: str = '#fff', text_area_color: str = '#fff', text_area_border_color: str = '#333', text_color: str = '#000', button_color: str = '#c23531', button_text_color: str = '#fff')

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: ToolBoxFeatureDataZoomOpts(is_show: bool = True, zoom_title: str = '区域缩放', back_title: str = '区域缩放还原', zoom_icon: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, back_icon: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, xaxis_index: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence, bool] = None, yaxis_index: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence, bool] = None, filter_mode: str = 'filter')

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: ToolBoxFeatureMagicTypeOpts(is_show: bool = True, type_: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence] = None, line_title: str = '切换为折线图', bar_title: str = '切换为柱状图', stack_title: str = '切换为堆叠', tiled_title: str = '切换为平铺', line_icon: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, bar_icon: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, stack_icon: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, tiled_icon: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: ToolBoxFeatureBrushOpts(type_: pyecharts.options.series_options.Optional[str] = None, rect_icon: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, polygon_icon: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, line_x_icon: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, line_y_icon: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, keep_icon: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, clear_icon: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, rect_title: str = '矩形选择', polygon_title: str = '圈选', line_x_title: str = '横向选择', line_y_title: str = '纵向选择', keep_title: str = '保持选择', clear_title: str = '清除选择')

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: ToolBoxFeatureOpts(save_as_image: pyecharts.options.series_options.Union[ToolBoxFeatureSaveAsImageOpts, dict] = ToolBoxFeatureSaveAsImageOpts(), restore: pyecharts.options.series_options.Union[ToolBoxFeatureRestoreOpts, dict] = ToolBoxFeatureRestoreOpts(), data_view: pyecharts.options.series_options.Union[ToolBoxFeatureDataViewOpts, dict] = ToolBoxFeatureDataViewOpts(), data_zoom: pyecharts.options.series_options.Union[ToolBoxFeatureDataZoomOpts, dict] = ToolBoxFeatureDataZoomOpts(), magic_type: pyecharts.options.series_options.Union[ToolBoxFeatureMagicTypeOpts, dict] = ToolBoxFeatureMagicTypeOpts(), brush: pyecharts.options.series_options.Union[ToolBoxFeatureBrushOpts, dict] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: ToolboxOpts(is_show: bool = True, orient: str = 'horizontal', item_size: pyecharts.options.series_options.Numeric = 15, item_gap: pyecharts.options.series_options.Numeric = 10, pos_left: str = '80%', pos_right: pyecharts.options.series_options.Optional[str] = None, pos_top: pyecharts.options.series_options.Optional[str] = None, pos_bottom: pyecharts.options.series_options.Optional[str] = None, feature: pyecharts.options.series_options.Union[ToolBoxFeatureOpts, dict] = ToolBoxFeatureOpts())

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: BrushOpts(tool_box: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence] = None, brush_link: pyecharts.options.series_options.Union[pyecharts.options.series_options.Sequence, str] = None, series_index: pyecharts.options.series_options.Union[pyecharts.options.series_options.Sequence, pyecharts.options.series_options.Numeric, str] = None, geo_index: pyecharts.options.series_options.Union[pyecharts.options.series_options.Sequence, pyecharts.options.series_options.Numeric, str] = None, x_axis_index: pyecharts.options.series_options.Union[pyecharts.options.series_options.Sequence, pyecharts.options.series_options.Numeric, str] = None, y_axis_index: pyecharts.options.series_options.Union[pyecharts.options.series_options.Sequence, pyecharts.options.series_options.Numeric, str] = None, brush_type: str = 'rect', brush_mode: str = 'single', transformable: bool = True, brush_style: pyecharts.options.series_options.Optional[dict] = None, throttle_type: str = 'fixRate', throttle_delay: pyecharts.options.series_options.Numeric = 0, remove_on_click: bool = True, in_brush: pyecharts.options.series_options.Optional[dict] = None, out_of_brush: pyecharts.options.series_options.Optional[dict] = None, z: pyecharts.options.series_options.Numeric = 10000)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: TitleOpts(is_show: bool = True, title: pyecharts.options.series_options.Optional[str] = None, title_link: pyecharts.options.series_options.Optional[str] = None, title_target: pyecharts.options.series_options.Optional[str] = 'blank', subtitle: pyecharts.options.series_options.Optional[str] = None, subtitle_link: pyecharts.options.series_options.Optional[str] = None, subtitle_target: pyecharts.options.series_options.Optional[str] = 'blank', pos_left: pyecharts.options.series_options.Optional[str] = None, pos_right: pyecharts.options.series_options.Optional[str] = None, pos_top: pyecharts.options.series_options.Optional[str] = None, pos_bottom: pyecharts.options.series_options.Optional[str] = None, padding: pyecharts.options.series_options.Union[pyecharts.options.series_options.Sequence, pyecharts.options.series_options.Numeric] = 5, item_gap: pyecharts.options.series_options.Numeric = 10, text_align: str = 'auto', text_vertical_align: str = 'auto', is_trigger_event: bool = False, title_textstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.TextStyleOpts, dict, None] = None, subtitle_textstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.TextStyleOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  pyecharts.options.series_options.Sequence


.. py:class:: DataZoomOpts(is_show: bool = True, type_: str = 'slider', is_disabled: bool = False, is_realtime: bool = True, is_show_detail: bool = True, is_show_data_shadow: bool = True, range_start: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, None] = 20, range_end: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, None] = 80, start_value: pyecharts.options.series_options.Union[int, str, None] = None, end_value: pyecharts.options.series_options.Union[int, str, None] = None, min_span: pyecharts.options.series_options.Union[int, None] = None, max_span: pyecharts.options.series_options.Union[int, None] = None, min_value_span: pyecharts.options.series_options.Union[int, str, None] = None, max_value_span: pyecharts.options.series_options.Union[int, str, None] = None, orient: str = 'horizontal', xaxis_index: pyecharts.options.series_options.Union[int, pyecharts.options.series_options.Sequence[int], None] = None, yaxis_index: pyecharts.options.series_options.Union[int, pyecharts.options.series_options.Sequence[int], None] = None, radius_axis_index: pyecharts.options.series_options.Union[int, pyecharts.options.series_options.Sequence[int], None] = None, angle_axis_index: pyecharts.options.series_options.Union[int, pyecharts.options.series_options.Sequence[int], None] = None, is_zoom_lock: bool = False, throttle: pyecharts.options.series_options.Optional[int] = None, range_mode: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence] = None, pos_left: pyecharts.options.series_options.Optional[str] = None, pos_right: pyecharts.options.series_options.Optional[str] = None, pos_top: pyecharts.options.series_options.Optional[str] = None, pos_bottom: pyecharts.options.series_options.Optional[str] = None, filter_mode: str = 'filter', is_zoom_on_mouse_wheel: bool = True, is_move_on_mouse_move: bool = True, is_move_on_mouse_wheel: bool = True, is_prevent_default_mouse_move: bool = True)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: LegendOpts(type_: pyecharts.options.series_options.Optional[str] = None, selected_mode: pyecharts.options.series_options.Union[str, bool, None] = None, selected_map: pyecharts.options.series_options.Optional[dict] = None, is_show: bool = True, pos_left: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric, None] = None, pos_right: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric, None] = None, pos_top: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric, None] = None, pos_bottom: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric, None] = None, orient: pyecharts.options.series_options.Optional[str] = None, align: pyecharts.options.series_options.Optional[str] = None, padding: int = 5, item_gap: int = 10, item_width: int = 25, item_height: int = 14, inactive_color: pyecharts.options.series_options.Optional[str] = None, textstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.TextStyleOpts, dict, None] = None, legend_icon: pyecharts.options.series_options.Optional[str] = None, background_color: pyecharts.options.series_options.Optional[str] = 'transparent', border_color: pyecharts.options.series_options.Optional[str] = '#ccc', border_width: pyecharts.options.series_options.Optional[int] = None, border_radius: pyecharts.options.series_options.Union[int, pyecharts.options.series_options.Sequence] = 0, page_button_item_gap: int = 5, page_button_gap: pyecharts.options.series_options.Optional[int] = None, page_button_position: str = 'end', page_formatter: pyecharts.options.series_options.JSFunc = '{current}/{total}', page_icon: pyecharts.options.series_options.Optional[str] = None, page_icon_color: str = '#2f4554', page_icon_inactive_color: str = '#aaa', page_icon_size: pyecharts.options.series_options.Union[int, pyecharts.options.series_options.Sequence] = 15, is_page_animation: pyecharts.options.series_options.Optional[bool] = None, page_animation_duration_update: int = 800, selector: pyecharts.options.series_options.Union[bool, pyecharts.options.series_options.Sequence] = False, selector_position: str = 'auto', selector_item_gap: int = 7, selector_button_gap: int = 10)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: VisualMapOpts(is_show: bool = True, type_: str = 'color', min_: pyecharts.options.series_options.Numeric = 0, max_: pyecharts.options.series_options.Numeric = 100, range_: pyecharts.options.series_options.Sequence[pyecharts.options.series_options.Numeric] = None, range_text: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence] = None, range_color: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence[str]] = None, range_size: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence[int]] = None, range_opacity: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence[pyecharts.options.series_options.Numeric]] = None, orient: str = 'vertical', pos_left: pyecharts.options.series_options.Optional[str] = None, pos_right: pyecharts.options.series_options.Optional[str] = None, pos_top: pyecharts.options.series_options.Optional[str] = None, pos_bottom: pyecharts.options.series_options.Optional[str] = None, padding: pyecharts.options.series_options.Union[int, pyecharts.options.series_options.Sequence[int]] = 5, split_number: int = 5, series_index: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, pyecharts.options.series_options.Sequence, None] = None, is_hover_link: bool = True, dimension: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, is_calculable: bool = True, is_piecewise: bool = False, is_inverse: bool = False, precision: pyecharts.options.series_options.Optional[int] = None, pieces: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence] = None, out_of_range: pyecharts.options.series_options.Optional[dict] = None, item_width: int = 0, item_height: int = 0, background_color: pyecharts.options.series_options.Optional[str] = None, border_color: pyecharts.options.series_options.Optional[str] = None, border_width: int = 0, textstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.TextStyleOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: TooltipOpts(is_show: bool = True, trigger: str = 'item', trigger_on: str = 'mousemove|click', axis_pointer_type: str = 'line', is_show_content: bool = True, is_always_show_content: bool = False, show_delay: pyecharts.options.series_options.Numeric = 0, hide_delay: pyecharts.options.series_options.Numeric = 100, is_enterable: bool = False, is_confine: bool = False, is_append_to_body: bool = False, transition_duration: pyecharts.options.series_options.Numeric = 0.4, position: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Sequence, pyecharts.options.series_options.JSFunc] = None, formatter: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, value_formatter: pyecharts.options.series_options.Optional[pyecharts.options.series_options.JSFunc] = None, background_color: pyecharts.options.series_options.Optional[str] = None, border_color: pyecharts.options.series_options.Optional[str] = None, border_width: pyecharts.options.series_options.Numeric = 0, padding: pyecharts.options.series_options.Numeric = 5, textstyle_opts: pyecharts.options.series_options.Optional[pyecharts.options.series_options.TextStyleOpts] = TextStyleOpts(font_size=14), extra_css_text: pyecharts.options.series_options.Optional[str] = None, order: str = 'seriesAsc')

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: AxisLineOpts(is_show: bool = True, is_on_zero: bool = True, on_zero_axis_index: int = 0, symbol: pyecharts.options.series_options.Optional[str] = None, linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: AxisTickOpts(is_show: bool = True, is_align_with_label: bool = False, is_inside: bool = False, length: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: AxisPointerOpts(is_show: bool = False, link: pyecharts.options.series_options.Sequence[dict] = None, type_: str = 'line', is_snap: pyecharts.options.series_options.Optional[bool] = None, is_trigger_tooltip: bool = True, trigger_on: str = 'mousemove|click', label: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: AxisOpts(type_: pyecharts.options.series_options.Optional[str] = None, name: pyecharts.options.series_options.Optional[str] = None, is_show: bool = True, is_scale: bool = False, is_inverse: bool = False, name_location: str = 'end', name_gap: pyecharts.options.series_options.Numeric = 15, name_rotate: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, interval: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, grid_index: pyecharts.options.series_options.Numeric = 0, position: pyecharts.options.series_options.Optional[str] = None, offset: pyecharts.options.series_options.Numeric = 0, split_number: pyecharts.options.series_options.Numeric = 5, boundary_gap: pyecharts.options.series_options.Union[str, bool, None] = None, min_: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, str, None] = None, max_: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, str, None] = None, min_interval: pyecharts.options.series_options.Numeric = 0, max_interval: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, axisline_opts: pyecharts.options.series_options.Union[AxisLineOpts, dict, None] = None, axistick_opts: pyecharts.options.series_options.Union[AxisTickOpts, dict, None] = None, axislabel_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, axispointer_opts: pyecharts.options.series_options.Union[AxisPointerOpts, dict, None] = None, name_textstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.TextStyleOpts, dict, None] = None, splitarea_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.SplitAreaOpts, dict, None] = None, splitline_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.SplitLineOpts, dict] = SplitLineOpts(is_show=True), minor_tick_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.MinorTickOpts, dict, None] = None, minor_split_line_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.MinorSplitLineOpts, dict, None] = None, animation_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.AnimationOpts, dict] = AnimationOpts())

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: GridOpts(is_show: bool = False, z_level: pyecharts.options.series_options.Numeric = 0, z: pyecharts.options.series_options.Numeric = 2, pos_left: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, str, None] = None, pos_top: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, str, None] = None, pos_right: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, str, None] = None, pos_bottom: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, str, None] = None, width: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, str, None] = None, height: pyecharts.options.series_options.Union[pyecharts.options.series_options.Numeric, str, None] = None, is_contain_label: bool = False, background_color: str = 'transparent', border_color: str = '#ccc', border_width: pyecharts.options.series_options.Numeric = 1, shadow_blur: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, shadow_color: pyecharts.options.series_options.Optional[str] = None, shadow_offset_x: pyecharts.options.series_options.Numeric = 0, shadow_offset_y: pyecharts.options.series_options.Numeric = 0, tooltip_opts: pyecharts.options.series_options.Union[TooltipOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: Grid3DOpts(is_show: pyecharts.options.series_options.Optional[bool] = None, width: pyecharts.options.series_options.Numeric = 200, height: pyecharts.options.series_options.Numeric = 100, depth: pyecharts.options.series_options.Numeric = 80, is_rotate: bool = False, rotate_speed: pyecharts.options.series_options.Numeric = 10, rotate_sensitivity: pyecharts.options.series_options.Numeric = 1, axisline_opts: pyecharts.options.series_options.Union[AxisLineOpts, dict, None] = None, axistick_opts: pyecharts.options.series_options.Union[AxisTickOpts, dict, None] = None, axislabel_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, axispointer_opts: pyecharts.options.series_options.Union[AxisPointerOpts, dict, None] = None, splitarea_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.SplitAreaOpts, dict, None] = None, splitline_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.SplitLineOpts, dict] = SplitLineOpts(is_show=True), environment: pyecharts.options.series_options.JSFunc = 'auto', view_control_alpha: pyecharts.options.series_options.Numeric = 20, view_control_beta: pyecharts.options.series_options.Numeric = 40, view_control_min_alpha: pyecharts.options.series_options.Numeric = -90, view_control_max_alpha: pyecharts.options.series_options.Numeric = 90, view_control_min_beta: pyecharts.options.series_options.Optional[int] = None, view_control_max_beta: pyecharts.options.series_options.Optional[int] = None, z_level: pyecharts.options.series_options.Numeric = -10, pos_left: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric] = 'auto', pos_top: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric] = 'auto', pos_right: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric] = 'auto', pos_bottom: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric] = 'auto')

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: Axis3DOpts(data: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence] = None, type_: pyecharts.options.series_options.Optional[str] = None, name: pyecharts.options.series_options.Optional[str] = None, is_show: bool = True, is_scale: bool = False, grid_3d_index: pyecharts.options.series_options.Numeric = 0, name_gap: pyecharts.options.series_options.Numeric = 20, min_: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric, None] = None, max_: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric, None] = None, split_number: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, log_base: pyecharts.options.series_options.Numeric = 10, axisline_opts: pyecharts.options.series_options.Union[AxisLineOpts, dict, None] = None, axistick_opts: pyecharts.options.series_options.Union[AxisTickOpts, dict, None] = None, axislabel_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, axispointer_opts: pyecharts.options.series_options.Union[AxisPointerOpts, dict, None] = None, splitarea_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.SplitAreaOpts, dict, None] = None, splitline_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.SplitLineOpts, dict] = SplitLineOpts(is_show=True), textstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.TextStyleOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: ParallelOpts(pos_left: str = '5%', pos_right: str = '13%', pos_bottom: str = '10%', pos_top: str = '20%', layout: pyecharts.options.series_options.Optional[str] = None, is_axis_expandable: bool = False, axis_expand_center: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, axis_expand_count: pyecharts.options.series_options.Numeric = 0, axis_expand_width: pyecharts.options.series_options.Numeric = 50, axis_expand_trigger_on: str = 'click')

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: ParallelAxisOpts(dim: pyecharts.options.series_options.Numeric, parallel_index: pyecharts.options.series_options.Numeric = 0, is_realtime: bool = True, name: pyecharts.options.series_options.Optional[str] = None, data: pyecharts.options.series_options.Sequence = None, type_: pyecharts.options.series_options.Optional[str] = None, name_location: str = 'end', name_gap: pyecharts.options.series_options.Numeric = 15, name_rotate: pyecharts.options.series_options.Optional[int] = None, is_inverse: bool = False, min_: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric, None] = None, max_: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric, None] = None, is_scale: bool = False, log_base: pyecharts.options.series_options.Numeric = 10, is_silent: bool = False, is_trigger_event: bool = False, axisline_opts: pyecharts.options.series_options.Union[AxisLineOpts, dict, None] = None, axistick_opts: pyecharts.options.series_options.Union[AxisTickOpts, dict, None] = None, axislabel_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, minor_tick_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.MinorTickOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: RadarIndicatorItem(name: pyecharts.options.series_options.Optional[str] = None, min_: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, max_: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, color: pyecharts.options.series_options.Optional[str] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: CalendarDayLabelOpts(is_show: bool = True, first_day: int = 0, margin: pyecharts.options.series_options.Optional[int] = None, position: str = 'start', name_map: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Sequence] = 'en', label_color: str = '#000', label_font_style: str = 'normal', label_font_weight: str = 'normal', label_font_family: str = 'sans-serif', label_font_size: int = 12, align: pyecharts.options.series_options.Optional[str] = None, vertical_align: pyecharts.options.series_options.Optional[str] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: CalendarMonthLabelOpts(is_show: bool = True, align: pyecharts.options.series_options.Optional[str] = None, margin: pyecharts.options.series_options.Optional[int] = None, position: str = 'start', name_map: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Sequence] = 'en', formatter: pyecharts.options.series_options.JSFunc = None, label_color: str = '#000', label_font_style: str = 'normal', label_font_weight: str = 'normal', label_font_family: str = 'sans-serif', label_font_size: int = 12, vertical_align: pyecharts.options.series_options.Optional[str] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: CalendarYearLabelOpts(is_show: bool = True, margin: pyecharts.options.series_options.Optional[int] = None, position: pyecharts.options.series_options.Optional[str] = None, formatter: pyecharts.options.series_options.JSFunc = None, label_color: str = '#000', label_font_style: str = 'normal', label_font_weight: str = 'normal', label_font_family: str = 'sans-serif', label_font_size: int = 12, align: pyecharts.options.series_options.Optional[str] = None, vertical_align: pyecharts.options.series_options.Optional[str] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: CalendarOpts(z_level: pyecharts.options.series_options.Numeric = 0, z: pyecharts.options.series_options.Numeric = 2, pos_left: pyecharts.options.series_options.Optional[str] = None, pos_top: pyecharts.options.series_options.Optional[str] = None, pos_right: pyecharts.options.series_options.Optional[str] = None, pos_bottom: pyecharts.options.series_options.Optional[str] = None, width: pyecharts.options.series_options.Optional[str] = 'auto', height: pyecharts.options.series_options.Optional[str] = None, orient: pyecharts.options.series_options.Optional[str] = 'horizontal', range_: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Sequence, int] = None, cell_size: pyecharts.options.series_options.Union[int, pyecharts.options.series_options.Sequence] = 20, splitline_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.SplitLineOpts, dict, None] = None, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, daylabel_opts: pyecharts.options.series_options.Union[CalendarDayLabelOpts, dict, None] = None, monthlabel_opts: pyecharts.options.series_options.Union[CalendarMonthLabelOpts, dict, None] = None, yearlabel_opts: pyecharts.options.series_options.Union[CalendarYearLabelOpts, dict, None] = None, is_silent: bool = False)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: SingleAxisOpts(name: pyecharts.options.series_options.Optional[str] = None, max_: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric, None] = None, min_: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric, None] = None, pos_left: pyecharts.options.series_options.Optional[str] = None, pos_right: pyecharts.options.series_options.Optional[str] = None, pos_top: pyecharts.options.series_options.Optional[str] = None, pos_bottom: pyecharts.options.series_options.Optional[str] = None, width: pyecharts.options.series_options.Optional[str] = None, height: pyecharts.options.series_options.Optional[str] = None, orient: pyecharts.options.series_options.Optional[str] = None, type_: pyecharts.options.series_options.Optional[str] = None, axisline_opts: pyecharts.options.series_options.Union[AxisLineOpts, dict, None] = None, axistick_opts: pyecharts.options.series_options.Union[AxisTickOpts, dict, None] = None, axislabel_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, axispointer_opts: pyecharts.options.series_options.Union[AxisPointerOpts, dict, None] = None, splitarea_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.SplitAreaOpts, dict, None] = None, splitline_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.SplitLineOpts, dict, None] = None, minor_tick_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.MinorTickOpts, dict, None] = None, minor_split_line_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.MinorSplitLineOpts, dict, None] = None, tooltip_opts: pyecharts.options.series_options.Union[TooltipOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: RadiusAxisItem(value: pyecharts.options.series_options.Optional[str] = None, textstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.TextStyleOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: AngleAxisItem(value: pyecharts.options.series_options.Optional[str] = None, textstyle_opts: pyecharts.options.series_options.Optional[pyecharts.options.series_options.TextStyleOpts] = None)

   Bases: :py:obj:`RadiusAxisItem`


.. py:class:: RadiusAxisOpts(polar_index: pyecharts.options.series_options.Optional[int] = None, data: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence[pyecharts.options.series_options.Union[RadiusAxisItem, dict, str]]] = None, boundary_gap: pyecharts.options.series_options.Union[bool, pyecharts.options.series_options.Sequence] = None, type_: pyecharts.options.series_options.Optional[str] = None, name: pyecharts.options.series_options.Optional[str] = None, name_location: pyecharts.options.series_options.Optional[str] = None, name_gap: pyecharts.options.series_options.Numeric = 15, name_rotate: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, is_inverse: bool = False, min_: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric, None] = None, max_: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric, None] = None, is_scale: bool = False, split_number: pyecharts.options.series_options.Numeric = 5, interval: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, min_interval: pyecharts.options.series_options.Numeric = 0, max_interval: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, splitline_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.SplitLineOpts, dict, None] = None, splitarea_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.SplitAreaOpts, dict, None] = None, axistick_opts: pyecharts.options.series_options.Union[AxisTickOpts, dict, None] = None, axisline_opts: pyecharts.options.series_options.Union[AxisLineOpts, dict, None] = None, axislabel_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, minor_tick_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.MinorTickOpts, dict, None] = None, minor_split_line_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.MinorSplitLineOpts, dict, None] = None, z: pyecharts.options.series_options.Optional[int] = None, z_level: pyecharts.options.series_options.Optional[int] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: AngleAxisOpts(polar_index: pyecharts.options.series_options.Optional[int] = None, data: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence[pyecharts.options.series_options.Union[AngleAxisItem, pyecharts.options.series_options.Numeric, dict, str]]] = None, start_angle: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = 90, is_clockwise: bool = False, boundary_gap: pyecharts.options.series_options.Union[bool, pyecharts.options.series_options.Sequence, None] = None, type_: pyecharts.options.series_options.Optional[str] = None, min_: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric, None] = None, max_: pyecharts.options.series_options.Union[str, pyecharts.options.series_options.Numeric, None] = None, is_scale: bool = False, split_number: pyecharts.options.series_options.Numeric = 5, interval: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Numeric] = None, splitline_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.SplitLineOpts, dict, None] = None, axisline_opts: pyecharts.options.series_options.Union[AxisLineOpts, dict, None] = None, axistick_opts: pyecharts.options.series_options.Union[AxisTickOpts, dict, None] = None, axislabel_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, minor_tick_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.MinorTickOpts, dict, None] = None, minor_split_line_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.MinorSplitLineOpts, dict, None] = None, z: pyecharts.options.series_options.Optional[int] = None, z_level: pyecharts.options.series_options.Optional[int] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: PolarOpts(center: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Sequence] = None, radius: pyecharts.options.series_options.Optional[pyecharts.options.series_options.Union[pyecharts.options.series_options.Sequence, str]] = None, tooltip_opts: TooltipOpts = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: DatasetTransformOpts(type_: str = 'filter', config: pyecharts.options.series_options.Optional[dict] = None, is_print: bool = False)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: EmphasisOpts(is_disabled: bool = False, is_scale: bool = True, focus: str = 'none', blur_scope: str = 'coordinateSystem', label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, is_show_label_line: bool = False, label_linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None, areastyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.AreaStyleOpts, dict, None] = None, end_label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: Emphasis3DOpts(itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: BlurOpts(label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None, is_show_label_line: bool = False, label_linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: SelectOpts(is_disabled: pyecharts.options.series_options.Optional[bool] = None, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, linestyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LineStyleOpts, dict, None] = None, label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


.. py:class:: TreeLeavesOpts(label_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.LabelOpts, dict, None] = None, itemstyle_opts: pyecharts.options.series_options.Union[pyecharts.options.series_options.ItemStyleOpts, dict, None] = None, emphasis_opts: pyecharts.options.series_options.Union[EmphasisOpts, dict, None] = None, blur_opts: pyecharts.options.series_options.Union[BlurOpts, dict, None] = None, select_opts: pyecharts.options.series_options.Union[SelectOpts, dict, None] = None)

   Bases: :py:obj:`pyecharts.options.series_options.BasicOpts`


   .. py:attribute:: opts
      :type:  dict


