pyecharts.charts.basic_charts.scatter
=====================================

.. py:module:: pyecharts.charts.basic_charts.scatter


Classes
-------

.. autoapisummary::

   pyecharts.charts.basic_charts.scatter.Scatter


Module Contents
---------------

.. py:class:: Scatter(init_opts: pyecharts.types.Init = opts.InitOpts(), render_opts: pyecharts.types.RenderInit = opts.RenderOpts())

   Bases: :py:obj:`pyecharts.charts.chart.RectChart`


   <<< Scatter >>>

   The scatter diagram on the rectangular coordinate system can be used to
   show the relationship between x and y of the data. If the data item has
   multiple dimensions, it can be represented by color, and the
   visualmap component can be used.


   .. py:method:: add_yaxis(series_name: str, y_axis: pyecharts.types.Sequence[pyecharts.types.Union[pyecharts.options.ScatterItem, dict]], *, xaxis_index: pyecharts.types.Optional[pyecharts.types.Numeric] = None, yaxis_index: pyecharts.types.Optional[pyecharts.types.Numeric] = None, color: pyecharts.types.Optional[str] = None, symbol: pyecharts.types.Optional[str] = None, symbol_size: pyecharts.types.Union[pyecharts.types.Numeric, pyecharts.types.Sequence] = 10, symbol_rotate: pyecharts.types.Optional[pyecharts.types.Numeric] = None, label_opts: pyecharts.types.Label = opts.LabelOpts(position='right'), markpoint_opts: pyecharts.types.MarkPoint = None, markline_opts: pyecharts.types.MarkLine = None, markarea_opts: pyecharts.types.MarkArea = None, tooltip_opts: pyecharts.types.Tooltip = None, itemstyle_opts: pyecharts.types.ItemStyle = None, emphasis_opts: pyecharts.types.Emphasis = None, encode: pyecharts.types.Union[pyecharts.types.JSFunc, dict, None] = None)


