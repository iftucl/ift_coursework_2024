asgiref.sync
============

.. py:module:: asgiref.sync


Attributes
----------

.. autoapisummary::

   asgiref.sync.iscoroutinefunction


Classes
-------

.. autoapisummary::

   asgiref.sync.ThreadSensitiveContext
   asgiref.sync.AsyncToSync
   asgiref.sync.SyncToAsync


Functions
---------

.. autoapisummary::

   asgiref.sync.async_to_sync
   asgiref.sync.sync_to_async


Module Contents
---------------

.. py:data:: iscoroutinefunction

.. py:class:: ThreadSensitiveContext

   Async context manager to manage context for thread sensitive mode

   This context manager controls which thread pool executor is used when in
   thread sensitive mode. By default, a single thread pool executor is shared
   within a process.

   The ThreadSensitiveContext() context manager may be used to specify a
   thread pool per context.

   This context manager is re-entrant, so only the outer-most call to
   ThreadSensitiveContext will set the context.

   Usage:

   >>> import time
   >>> async with ThreadSensitiveContext():
   ...     await sync_to_async(time.sleep, 1)()


   .. py:attribute:: token
      :value: None



.. py:class:: AsyncToSync(awaitable: Union[Callable[_P, Coroutine[Any, Any, _R]], Callable[_P, Awaitable[_R]]], force_new_loop: bool = False)

   Bases: :py:obj:`Generic`\ [\ :py:obj:`_P`\ , :py:obj:`_R`\ ]


   Utility class which turns an awaitable that only works on the thread with
   the event loop into a synchronous callable that works in a subthread.

   If the call stack contains an async loop, the code runs there.
   Otherwise, the code runs in a new loop in a new thread.

   Either way, this thread then pauses and waits to run any thread_sensitive
   code called from further down the call stack using SyncToAsync, before
   finally exiting once the async task returns.


   .. py:attribute:: executors
      :type:  asgiref.local.Local


   .. py:attribute:: loop_thread_executors
      :type:  Dict[asyncio.AbstractEventLoop, CurrentThreadExecutor]


   .. py:attribute:: awaitable


   .. py:attribute:: force_new_loop
      :value: False



   .. py:attribute:: main_event_loop
      :value: None



   .. py:method:: main_wrap(call_result: Future[_R], exc_info: _typeshed.OptExcInfo, task_context: Optional[List[asyncio.Task[Any]]], context: List[contextvars.Context], *args: _P, **kwargs: _P) -> None
      :async:


      Wraps the awaitable with something that puts the result into the
      result/exception future.



.. py:class:: SyncToAsync(func: Callable[_P, _R], thread_sensitive: bool = True, executor: Optional[concurrent.futures.ThreadPoolExecutor] = None)

   Bases: :py:obj:`Generic`\ [\ :py:obj:`_P`\ , :py:obj:`_R`\ ]


   Utility class which turns a synchronous callable into an awaitable that
   runs in a threadpool. It also sets a threadlocal inside the thread so
   calls to AsyncToSync can escape it.

   If thread_sensitive is passed, the code will run in the same thread as any
   outer code. This is needed for underlying Python code that is not
   threadsafe (for example, code which handles SQLite database connections).

   If the outermost program is async (i.e. SyncToAsync is outermost), then
   this will be a dedicated single sub-thread that all sync code runs in,
   one after the other. If the outermost program is sync (i.e. AsyncToSync is
   outermost), this will just be the main thread. This is achieved by idling
   with a CurrentThreadExecutor while AsyncToSync is blocking its sync parent,
   rather than just blocking.

   If executor is passed in, that will be used instead of the loop's default executor.
   In order to pass in an executor, thread_sensitive must be set to False, otherwise
   a TypeError will be raised.


   .. py:attribute:: threadlocal


   .. py:attribute:: single_thread_executor


   .. py:attribute:: thread_sensitive_context
      :type:  contextvars.ContextVar[ThreadSensitiveContext]


   .. py:attribute:: deadlock_context
      :type:  contextvars.ContextVar[bool]


   .. py:attribute:: context_to_thread_executor
      :type:  weakref.WeakKeyDictionary[ThreadSensitiveContext, ThreadPoolExecutor]


   .. py:attribute:: func


   .. py:method:: thread_handler(loop, exc_info, task_context, func, *args, **kwargs)

      Wraps the sync application with exception handling.



.. py:function:: async_to_sync(*, force_new_loop: bool = False) -> Callable[[Union[Callable[_P, Coroutine[Any, Any, _R]], Callable[_P, Awaitable[_R]]]], Callable[_P, _R]]
                 async_to_sync(awaitable: Union[Callable[_P, Coroutine[Any, Any, _R]], Callable[_P, Awaitable[_R]]], *, force_new_loop: bool = False) -> Callable[_P, _R]

.. py:function:: sync_to_async(*, thread_sensitive: bool = True, executor: Optional[concurrent.futures.ThreadPoolExecutor] = None) -> Callable[[Callable[_P, _R]], Callable[_P, Coroutine[Any, Any, _R]]]
                 sync_to_async(func: Callable[_P, _R], *, thread_sensitive: bool = True, executor: Optional[concurrent.futures.ThreadPoolExecutor] = None) -> Callable[_P, Coroutine[Any, Any, _R]]

