asgiref.local
=============

.. py:module:: asgiref.local


Classes
-------

.. autoapisummary::

   asgiref.local.Local


Module Contents
---------------

.. py:class:: Local(thread_critical: bool = False)

   Local storage for async tasks.

   This is a namespace object (similar to `threading.local`) where data is
   also local to the current async task (if there is one).

   In async threads, local means in the same sense as the `contextvars`
   module - i.e. a value set in an async frame will be visible:

   - to other async code `await`-ed from this frame.
   - to tasks spawned using `asyncio` utilities (`create_task`, `wait_for`,
     `gather` and probably others).
   - to code scheduled in a sync thread using `sync_to_async`

   In "sync" threads (a thread with no async event loop running), the
   data is thread-local, but additionally shared with async code executed
   via the `async_to_sync` utility, which schedules async code in a new thread
   and copies context across to that thread.

   If `thread_critical` is True, then the local will only be visible per-thread,
   behaving exactly like `threading.local` if the thread is sync, and as
   `contextvars` if the thread is async. This allows genuinely thread-sensitive
   code (such as DB handles) to be kept stricly to their initial thread and
   disable the sharing across `sync_to_async` and `async_to_sync` wrapped calls.

   Unlike plain `contextvars` objects, this utility is threadsafe.


