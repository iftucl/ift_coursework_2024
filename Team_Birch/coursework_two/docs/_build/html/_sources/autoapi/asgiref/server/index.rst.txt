asgiref.server
==============

.. py:module:: asgiref.server


Attributes
----------

.. autoapisummary::

   asgiref.server.logger


Classes
-------

.. autoapisummary::

   asgiref.server.StatelessServer


Module Contents
---------------

.. py:data:: logger

.. py:class:: StatelessServer(application, max_applications=1000)

   Base server class that handles basic concepts like application instance
   creation/pooling, exception handling, and similar, for stateless protocols
   (i.e. ones without actual incoming connections to the process)

   Your code should override the handle() method, doing whatever it needs to,
   and calling get_or_create_application_instance with a unique `scope_id`
   and `scope` for the scope it wants to get.

   If an application instance is found with the same `scope_id`, you are
   given its input queue, otherwise one is made for you with the scope provided
   and you are given that fresh new input queue. Either way, you should do
   something like:

   input_queue = self.get_or_create_application_instance(
       "user-123456",
       {"type": "testprotocol", "user_id": "123456", "username": "andrew"},
   )
   input_queue.put_nowait(message)

   If you try and create an application instance and there are already
   `max_application` instances, the oldest/least recently used one will be
   reclaimed and shut down to make space.

   Application coroutines that error will be found periodically (every 100ms
   by default) and have their exceptions printed to the console. Override
   application_exception() if you want to do more when this happens.

   If you override run(), make sure you handle things like launching the
   application checker.


   .. py:attribute:: application_checker_interval
      :value: 0.1



   .. py:attribute:: application


   .. py:attribute:: max_applications
      :value: 1000



   .. py:attribute:: application_instances


   .. py:method:: run()

      Runs the asyncio event loop with our handler loop.



   .. py:method:: handle()
      :abstractmethod:

      :async:



   .. py:method:: application_send(scope, message)
      :abstractmethod:

      :async:


      Receives outbound sends from applications and handles them.



   .. py:method:: get_or_create_application_instance(scope_id, scope)

      Creates an application instance and returns its queue.



   .. py:method:: delete_oldest_application_instance()

      Finds and deletes the oldest application instance



   .. py:method:: delete_application_instance(scope_id)

      Removes an application instance (makes sure its task is stopped,
      then removes it from the current set)



   .. py:method:: application_checker()
      :async:


      Goes through the set of current application instance Futures and cleans up
      any that are done/prints exceptions for any that errored.



   .. py:method:: application_exception(exception, application_details)
      :async:


      Called whenever an application coroutine has an exception.



