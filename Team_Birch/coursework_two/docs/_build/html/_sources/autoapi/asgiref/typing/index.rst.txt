asgiref.typing
==============

.. py:module:: asgiref.typing


Attributes
----------

.. autoapisummary::

   asgiref.typing.WWWScope
   asgiref.typing.Scope
   asgiref.typing.ASGIReceiveEvent
   asgiref.typing.ASGISendEvent
   asgiref.typing.ASGIReceiveCallable
   asgiref.typing.ASGISendCallable
   asgiref.typing.ASGI2Application
   asgiref.typing.ASGI3Application
   asgiref.typing.ASGIApplication


Classes
-------

.. autoapisummary::

   asgiref.typing.ASGIVersions
   asgiref.typing.HTTPScope
   asgiref.typing.WebSocketScope
   asgiref.typing.LifespanScope
   asgiref.typing.HTTPRequestEvent
   asgiref.typing.HTTPResponseStartEvent
   asgiref.typing.HTTPResponseBodyEvent
   asgiref.typing.HTTPResponseTrailersEvent
   asgiref.typing.HTTPResponsePathsendEvent
   asgiref.typing.HTTPServerPushEvent
   asgiref.typing.HTTPDisconnectEvent
   asgiref.typing.WebSocketConnectEvent
   asgiref.typing.WebSocketAcceptEvent
   asgiref.typing.WebSocketReceiveEvent
   asgiref.typing.WebSocketSendEvent
   asgiref.typing.WebSocketResponseStartEvent
   asgiref.typing.WebSocketResponseBodyEvent
   asgiref.typing.WebSocketDisconnectEvent
   asgiref.typing.WebSocketCloseEvent
   asgiref.typing.LifespanStartupEvent
   asgiref.typing.LifespanShutdownEvent
   asgiref.typing.LifespanStartupCompleteEvent
   asgiref.typing.LifespanStartupFailedEvent
   asgiref.typing.LifespanShutdownCompleteEvent
   asgiref.typing.LifespanShutdownFailedEvent
   asgiref.typing.ASGI2Protocol


Module Contents
---------------

.. py:class:: ASGIVersions

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: spec_version
      :type:  str


   .. py:attribute:: version
      :type:  Union[Literal['2.0'], Literal['3.0']]


.. py:class:: HTTPScope

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['http']


   .. py:attribute:: asgi
      :type:  ASGIVersions


   .. py:attribute:: http_version
      :type:  str


   .. py:attribute:: method
      :type:  str


   .. py:attribute:: scheme
      :type:  str


   .. py:attribute:: path
      :type:  str


   .. py:attribute:: raw_path
      :type:  bytes


   .. py:attribute:: query_string
      :type:  bytes


   .. py:attribute:: root_path
      :type:  str


   .. py:attribute:: headers
      :type:  Iterable[Tuple[bytes, bytes]]


   .. py:attribute:: client
      :type:  Optional[Tuple[str, int]]


   .. py:attribute:: server
      :type:  Optional[Tuple[str, Optional[int]]]


   .. py:attribute:: state
      :type:  NotRequired[Dict[str, Any]]


   .. py:attribute:: extensions
      :type:  Optional[Dict[str, Dict[object, object]]]


.. py:class:: WebSocketScope

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['websocket']


   .. py:attribute:: asgi
      :type:  ASGIVersions


   .. py:attribute:: http_version
      :type:  str


   .. py:attribute:: scheme
      :type:  str


   .. py:attribute:: path
      :type:  str


   .. py:attribute:: raw_path
      :type:  bytes


   .. py:attribute:: query_string
      :type:  bytes


   .. py:attribute:: root_path
      :type:  str


   .. py:attribute:: headers
      :type:  Iterable[Tuple[bytes, bytes]]


   .. py:attribute:: client
      :type:  Optional[Tuple[str, int]]


   .. py:attribute:: server
      :type:  Optional[Tuple[str, Optional[int]]]


   .. py:attribute:: subprotocols
      :type:  Iterable[str]


   .. py:attribute:: state
      :type:  NotRequired[Dict[str, Any]]


   .. py:attribute:: extensions
      :type:  Optional[Dict[str, Dict[object, object]]]


.. py:class:: LifespanScope

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['lifespan']


   .. py:attribute:: asgi
      :type:  ASGIVersions


   .. py:attribute:: state
      :type:  NotRequired[Dict[str, Any]]


.. py:data:: WWWScope

.. py:data:: Scope

.. py:class:: HTTPRequestEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['http.request']


   .. py:attribute:: body
      :type:  bytes


   .. py:attribute:: more_body
      :type:  bool


.. py:class:: HTTPResponseStartEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['http.response.start']


   .. py:attribute:: status
      :type:  int


   .. py:attribute:: headers
      :type:  Iterable[Tuple[bytes, bytes]]


   .. py:attribute:: trailers
      :type:  bool


.. py:class:: HTTPResponseBodyEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['http.response.body']


   .. py:attribute:: body
      :type:  bytes


   .. py:attribute:: more_body
      :type:  bool


.. py:class:: HTTPResponseTrailersEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['http.response.trailers']


   .. py:attribute:: headers
      :type:  Iterable[Tuple[bytes, bytes]]


   .. py:attribute:: more_trailers
      :type:  bool


.. py:class:: HTTPResponsePathsendEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['http.response.pathsend']


   .. py:attribute:: path
      :type:  str


.. py:class:: HTTPServerPushEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['http.response.push']


   .. py:attribute:: path
      :type:  str


   .. py:attribute:: headers
      :type:  Iterable[Tuple[bytes, bytes]]


.. py:class:: HTTPDisconnectEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['http.disconnect']


.. py:class:: WebSocketConnectEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['websocket.connect']


.. py:class:: WebSocketAcceptEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['websocket.accept']


   .. py:attribute:: subprotocol
      :type:  Optional[str]


   .. py:attribute:: headers
      :type:  Iterable[Tuple[bytes, bytes]]


.. py:class:: WebSocketReceiveEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['websocket.receive']


   .. py:attribute:: bytes
      :type:  Optional[WebSocketReceiveEvent.bytes]


   .. py:attribute:: text
      :type:  Optional[str]


.. py:class:: WebSocketSendEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['websocket.send']


   .. py:attribute:: bytes
      :type:  Optional[WebSocketSendEvent.bytes]


   .. py:attribute:: text
      :type:  Optional[str]


.. py:class:: WebSocketResponseStartEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['websocket.http.response.start']


   .. py:attribute:: status
      :type:  int


   .. py:attribute:: headers
      :type:  Iterable[Tuple[bytes, bytes]]


.. py:class:: WebSocketResponseBodyEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['websocket.http.response.body']


   .. py:attribute:: body
      :type:  bytes


   .. py:attribute:: more_body
      :type:  bool


.. py:class:: WebSocketDisconnectEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['websocket.disconnect']


   .. py:attribute:: code
      :type:  int


.. py:class:: WebSocketCloseEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['websocket.close']


   .. py:attribute:: code
      :type:  int


   .. py:attribute:: reason
      :type:  Optional[str]


.. py:class:: LifespanStartupEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['lifespan.startup']


.. py:class:: LifespanShutdownEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['lifespan.shutdown']


.. py:class:: LifespanStartupCompleteEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['lifespan.startup.complete']


.. py:class:: LifespanStartupFailedEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['lifespan.startup.failed']


   .. py:attribute:: message
      :type:  str


.. py:class:: LifespanShutdownCompleteEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['lifespan.shutdown.complete']


.. py:class:: LifespanShutdownFailedEvent

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: type
      :type:  Literal['lifespan.shutdown.failed']


   .. py:attribute:: message
      :type:  str


.. py:data:: ASGIReceiveEvent

.. py:data:: ASGISendEvent

.. py:data:: ASGIReceiveCallable

.. py:data:: ASGISendCallable

.. py:class:: ASGI2Protocol(scope: Scope)

   Bases: :py:obj:`Protocol`


   Base class for protocol classes.

   Protocol classes are defined as::

       class Proto(Protocol):
           def meth(self) -> int:
               ...

   Such classes are primarily used with static type checkers that recognize
   structural subtyping (static duck-typing).

   For example::

       class C:
           def meth(self) -> int:
               return 0

       def func(x: Proto) -> int:
           return x.meth()

       func(C())  # Passes static type check

   See PEP 544 for details. Protocol classes decorated with
   @typing.runtime_checkable act as simple-minded runtime protocols that check
   only the presence of given attributes, ignoring their type signatures.
   Protocol classes can be generic, they are defined as::

       class GenProto[T](Protocol):
           def meth(self) -> T:
               ...


.. py:data:: ASGI2Application

.. py:data:: ASGI3Application

.. py:data:: ASGIApplication

