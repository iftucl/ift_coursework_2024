django.utils.http
=================

.. py:module:: django.utils.http


Attributes
----------

.. autoapisummary::

   django.utils.http.ETAG_MATCH
   django.utils.http.MONTHS
   django.utils.http.RFC1123_DATE
   django.utils.http.RFC850_DATE
   django.utils.http.ASCTIME_DATE
   django.utils.http.RFC3986_GENDELIMS
   django.utils.http.RFC3986_SUBDELIMS


Functions
---------

.. autoapisummary::

   django.utils.http.urlencode
   django.utils.http.http_date
   django.utils.http.parse_http_date
   django.utils.http.parse_http_date_safe
   django.utils.http.base36_to_int
   django.utils.http.int_to_base36
   django.utils.http.urlsafe_base64_encode
   django.utils.http.urlsafe_base64_decode
   django.utils.http.parse_etags
   django.utils.http.quote_etag
   django.utils.http.is_same_domain
   django.utils.http.url_has_allowed_host_and_scheme
   django.utils.http.escape_leading_slashes
   django.utils.http.parse_header_parameters
   django.utils.http.content_disposition_header


Module Contents
---------------

.. py:data:: ETAG_MATCH

.. py:data:: MONTHS

.. py:data:: RFC1123_DATE

.. py:data:: RFC850_DATE

.. py:data:: ASCTIME_DATE

.. py:data:: RFC3986_GENDELIMS
   :value: ':/?#[]@'


.. py:data:: RFC3986_SUBDELIMS
   :value: "!$&'()*+,;="


.. py:function:: urlencode(query, doseq=False)

   A version of Python's urllib.parse.urlencode() function that can operate on
   MultiValueDict and non-string values.


.. py:function:: http_date(epoch_seconds=None)

   Format the time to match the RFC 5322 date format as specified by RFC 9110
   Section 5.6.7.

   `epoch_seconds` is a floating point number expressed in seconds since the
   epoch, in UTC - such as that outputted by time.time(). If set to None, it
   defaults to the current time.

   Output a string in the format 'Wdy, DD Mon YYYY HH:MM:SS GMT'.


.. py:function:: parse_http_date(date)

   Parse a date format as specified by HTTP RFC 9110 Section 5.6.7.

   The three formats allowed by the RFC are accepted, even if only the first
   one is still in widespread use.

   Return an integer expressed in seconds since the epoch, in UTC.


.. py:function:: parse_http_date_safe(date)

   Same as parse_http_date, but return None if the input is invalid.


.. py:function:: base36_to_int(s)

   Convert a base 36 string to an int. Raise ValueError if the input won't fit
   into an int.


.. py:function:: int_to_base36(i)

   Convert an integer to a base36 string.


.. py:function:: urlsafe_base64_encode(s)

   Encode a bytestring to a base64 string for use in URLs. Strip any trailing
   equal signs.


.. py:function:: urlsafe_base64_decode(s)

   Decode a base64 encoded string. Add back any trailing equal signs that
   might have been stripped.


.. py:function:: parse_etags(etag_str)

   Parse a string of ETags given in an If-None-Match or If-Match header as
   defined by RFC 9110. Return a list of quoted ETags, or ['*'] if all ETags
   should be matched.


.. py:function:: quote_etag(etag_str)

   If the provided string is already a quoted ETag, return it. Otherwise, wrap
   the string in quotes, making it a strong ETag.


.. py:function:: is_same_domain(host, pattern)

   Return ``True`` if the host is either an exact match or a match
   to the wildcard pattern.

   Any pattern beginning with a period matches a domain and all of its
   subdomains. (e.g. ``.example.com`` matches ``example.com`` and
   ``foo.example.com``). Anything else is an exact string match.


.. py:function:: url_has_allowed_host_and_scheme(url, allowed_hosts, require_https=False)

   Return ``True`` if the url uses an allowed host and a safe scheme.

   Always return ``False`` on an empty url.

   If ``require_https`` is ``True``, only 'https' will be considered a valid
   scheme, as opposed to 'http' and 'https' with the default, ``False``.

   Note: "True" doesn't entail that a URL is "safe". It may still be e.g.
   quoted incorrectly. Ensure to also use django.utils.encoding.iri_to_uri()
   on the path component of untrusted URLs.


.. py:function:: escape_leading_slashes(url)

   If redirecting to an absolute path (two leading slashes), a slash must be
   escaped to prevent browsers from handling the path as schemaless and
   redirecting to another host.


.. py:function:: parse_header_parameters(line)

   Parse a Content-type like header.
   Return the main content-type and a dictionary of options.


.. py:function:: content_disposition_header(as_attachment, filename)

   Construct a Content-Disposition HTTP header value from the given filename
   as specified by RFC 6266.


