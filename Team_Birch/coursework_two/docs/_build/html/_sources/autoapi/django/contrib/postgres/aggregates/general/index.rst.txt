django.contrib.postgres.aggregates.general
==========================================

.. py:module:: django.contrib.postgres.aggregates.general


Classes
-------

.. autoapisummary::

   django.contrib.postgres.aggregates.general.ArrayAgg
   django.contrib.postgres.aggregates.general.BitAnd
   django.contrib.postgres.aggregates.general.BitOr
   django.contrib.postgres.aggregates.general.BitXor
   django.contrib.postgres.aggregates.general.BoolAnd
   django.contrib.postgres.aggregates.general.BoolOr
   django.contrib.postgres.aggregates.general.JSONBAgg
   django.contrib.postgres.aggregates.general.StringAgg


Module Contents
---------------

.. py:class:: ArrayAgg(*expressions, default=NOT_PROVIDED, **extra)

   Bases: :py:obj:`DeprecatedConvertValueMixin`, :py:obj:`django.contrib.postgres.aggregates.mixins.OrderableAggMixin`, :py:obj:`django.db.models.Aggregate`


   .. py:attribute:: function
      :value: 'ARRAY_AGG'



   .. py:attribute:: template
      :value: '%(function)s(%(distinct)s%(expressions)s %(ordering)s)'



   .. py:attribute:: allow_distinct
      :value: True



   .. py:attribute:: deprecation_value


   .. py:attribute:: deprecation_msg
      :value: 'In Django 5.0, ArrayAgg() will return None instead of an empty list if there are no rows. Pass...



   .. py:property:: output_field


.. py:class:: BitAnd

   Bases: :py:obj:`django.db.models.Aggregate`


   .. py:attribute:: function
      :value: 'BIT_AND'



.. py:class:: BitOr

   Bases: :py:obj:`django.db.models.Aggregate`


   .. py:attribute:: function
      :value: 'BIT_OR'



.. py:class:: BitXor

   Bases: :py:obj:`django.db.models.Aggregate`


   .. py:attribute:: function
      :value: 'BIT_XOR'



.. py:class:: BoolAnd

   Bases: :py:obj:`django.db.models.Aggregate`


   .. py:attribute:: function
      :value: 'BOOL_AND'



   .. py:attribute:: output_field


.. py:class:: BoolOr

   Bases: :py:obj:`django.db.models.Aggregate`


   .. py:attribute:: function
      :value: 'BOOL_OR'



   .. py:attribute:: output_field


.. py:class:: JSONBAgg(*expressions, default=NOT_PROVIDED, **extra)

   Bases: :py:obj:`DeprecatedConvertValueMixin`, :py:obj:`django.contrib.postgres.aggregates.mixins.OrderableAggMixin`, :py:obj:`django.db.models.Aggregate`


   .. py:attribute:: function
      :value: 'JSONB_AGG'



   .. py:attribute:: template
      :value: '%(function)s(%(distinct)s%(expressions)s %(ordering)s)'



   .. py:attribute:: allow_distinct
      :value: True



   .. py:attribute:: output_field


   .. py:attribute:: deprecation_value
      :value: '[]'



   .. py:attribute:: deprecation_empty_result_set_value


   .. py:attribute:: deprecation_msg
      :value: 'In Django 5.0, JSONBAgg() will return None instead of an empty list if there are no rows. Pass...



.. py:class:: StringAgg(expression, delimiter, **extra)

   Bases: :py:obj:`DeprecatedConvertValueMixin`, :py:obj:`django.contrib.postgres.aggregates.mixins.OrderableAggMixin`, :py:obj:`django.db.models.Aggregate`


   .. py:attribute:: function
      :value: 'STRING_AGG'



   .. py:attribute:: template
      :value: '%(function)s(%(distinct)s%(expressions)s %(ordering)s)'



   .. py:attribute:: allow_distinct
      :value: True



   .. py:attribute:: output_field


   .. py:attribute:: deprecation_value
      :value: ''



   .. py:attribute:: deprecation_msg
      :value: 'In Django 5.0, StringAgg() will return None instead of an empty string if there are no rows....



