django.db.backends.base.introspection
=====================================

.. py:module:: django.db.backends.base.introspection


Classes
-------

.. autoapisummary::

   django.db.backends.base.introspection.TableInfo
   django.db.backends.base.introspection.FieldInfo
   django.db.backends.base.introspection.BaseDatabaseIntrospection


Module Contents
---------------

.. py:class:: TableInfo

   Bases: :py:obj:`tuple`


   .. py:attribute:: name


   .. py:attribute:: type


.. py:class:: FieldInfo

   Bases: :py:obj:`tuple`


   .. py:attribute:: name


   .. py:attribute:: type_code


   .. py:attribute:: display_size


   .. py:attribute:: internal_size


   .. py:attribute:: precision


   .. py:attribute:: scale


   .. py:attribute:: null_ok


   .. py:attribute:: default


   .. py:attribute:: collation


.. py:class:: BaseDatabaseIntrospection(connection)

   Encapsulate backend-specific introspection utilities.


   .. py:attribute:: data_types_reverse


   .. py:attribute:: connection


   .. py:method:: get_field_type(data_type, description)

      Hook for a database backend to use the cursor description to
      match a Django field type to a database column.

      For Oracle, the column data_type on its own is insufficient to
      distinguish between a FloatField and IntegerField, for example.



   .. py:method:: identifier_converter(name)

      Apply a conversion to the identifier for the purposes of comparison.

      The default identifier converter is for case sensitive comparison.



   .. py:method:: table_names(cursor=None, include_views=False)

      Return a list of names of all tables that exist in the database.
      Sort the returned table list by Python's default sorting. Do NOT use
      the database's ORDER BY here to avoid subtle differences in sorting
      order between databases.



   .. py:method:: get_table_list(cursor)
      :abstractmethod:


      Return an unsorted list of TableInfo named tuples of all tables and
      views that exist in the database.



   .. py:method:: get_table_description(cursor, table_name)
      :abstractmethod:


      Return a description of the table with the DB-API cursor.description
      interface.



   .. py:method:: get_migratable_models()


   .. py:method:: django_table_names(only_existing=False, include_views=True)

      Return a list of all table names that have associated Django models and
      are in INSTALLED_APPS.

      If only_existing is True, include only the tables in the database.



   .. py:method:: installed_models(tables)

      Return a set of all models represented by the provided list of table
      names.



   .. py:method:: sequence_list()

      Return a list of information about all DB sequences for all models in
      all apps.



   .. py:method:: get_sequences(cursor, table_name, table_fields=())
      :abstractmethod:


      Return a list of introspected sequences for table_name. Each sequence
      is a dict: {'table': <table_name>, 'column': <column_name>}. An optional
      'name' key can be added if the backend supports named sequences.



   .. py:method:: get_relations(cursor, table_name)
      :abstractmethod:


      Return a dictionary of {field_name: (field_name_other_table, other_table)}
      representing all foreign keys in the given table.



   .. py:method:: get_primary_key_column(cursor, table_name)

      Return the name of the primary key column for the given table.



   .. py:method:: get_primary_key_columns(cursor, table_name)

      Return a list of primary key columns for the given table.



   .. py:method:: get_constraints(cursor, table_name)
      :abstractmethod:


      Retrieve any constraints or keys (unique, pk, fk, check, index)
      across one or more columns.

      Return a dict mapping constraint names to their attributes,
      where attributes is a dict with keys:
       * columns: List of columns this covers
       * primary_key: True if primary key, False otherwise
       * unique: True if this is a unique constraint, False otherwise
       * foreign_key: (table, column) of target, or None
       * check: True if check constraint, False otherwise
       * index: True if index, False otherwise.
       * orders: The order (ASC/DESC) defined for the columns of indexes
       * type: The type of the index (btree, hash, etc.)

      Some backends may return special constraint names that don't exist
      if they don't name constraints of a certain type (e.g. SQLite)



