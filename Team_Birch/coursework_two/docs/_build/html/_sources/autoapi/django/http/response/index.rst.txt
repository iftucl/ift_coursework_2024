django.http.response
====================

.. py:module:: django.http.response


Exceptions
----------

.. autoapisummary::

   django.http.response.BadHeaderError
   django.http.response.Http404


Classes
-------

.. autoapisummary::

   django.http.response.ResponseHeaders
   django.http.response.HttpResponseBase
   django.http.response.HttpResponse
   django.http.response.StreamingHttpResponse
   django.http.response.FileResponse
   django.http.response.HttpResponseRedirectBase
   django.http.response.HttpResponseRedirect
   django.http.response.HttpResponsePermanentRedirect
   django.http.response.HttpResponseNotModified
   django.http.response.HttpResponseBadRequest
   django.http.response.HttpResponseNotFound
   django.http.response.HttpResponseForbidden
   django.http.response.HttpResponseNotAllowed
   django.http.response.HttpResponseGone
   django.http.response.HttpResponseServerError
   django.http.response.JsonResponse


Module Contents
---------------

.. py:class:: ResponseHeaders(data)

   Bases: :py:obj:`django.utils.datastructures.CaseInsensitiveMapping`


   Mapping allowing case-insensitive key lookups. Original case of keys is
   preserved for iteration and string representation.

   Example::

       >>> ci_map = CaseInsensitiveMapping({'name': 'Jane'})
       >>> ci_map['Name']
       Jane
       >>> ci_map['NAME']
       Jane
       >>> ci_map['name']
       Jane
       >>> ci_map  # original case preserved
       {'name': 'Jane'}


   .. py:method:: pop(key, default=None)


   .. py:method:: setdefault(key, value)


.. py:exception:: BadHeaderError

   Bases: :py:obj:`ValueError`


   Inappropriate argument value (of correct type).


.. py:class:: HttpResponseBase(content_type=None, status=None, reason=None, charset=None, headers=None)

   An HTTP response base class with dictionary-accessed headers.

   This class doesn't handle content. It should not be used directly.
   Use the HttpResponse and StreamingHttpResponse subclasses instead.


   .. py:attribute:: status_code
      :value: 200



   .. py:attribute:: headers


   .. py:attribute:: cookies


   .. py:attribute:: closed
      :value: False



   .. py:property:: reason_phrase


   .. py:property:: charset


   .. py:method:: serialize_headers()

      HTTP headers as a bytestring.



   .. py:method:: has_header(header)

      Case-insensitive check for a header.



   .. py:method:: items()


   .. py:method:: get(header, alternate=None)


   .. py:method:: set_cookie(key, value='', max_age=None, expires=None, path='/', domain=None, secure=False, httponly=False, samesite=None)

      Set a cookie.

      ``expires`` can be:
      - a string in the correct format,
      - a naive ``datetime.datetime`` object in UTC,
      - an aware ``datetime.datetime`` object in any time zone.
      If it is a ``datetime.datetime`` object then calculate ``max_age``.

      ``max_age`` can be:
      - int/float specifying seconds,
      - ``datetime.timedelta`` object.



   .. py:method:: setdefault(key, value)

      Set a header unless it has already been set.



   .. py:method:: set_signed_cookie(key, value, salt='', **kwargs)


   .. py:method:: delete_cookie(key, path='/', domain=None, samesite=None)


   .. py:method:: make_bytes(value)

      Turn a value into a bytestring encoded in the output charset.



   .. py:method:: close()


   .. py:method:: write(content)


   .. py:method:: flush()


   .. py:method:: tell()


   .. py:method:: readable()


   .. py:method:: seekable()


   .. py:method:: writable()


   .. py:method:: writelines(lines)


.. py:class:: HttpResponse(content=b'', *args, **kwargs)

   Bases: :py:obj:`HttpResponseBase`


   An HTTP response class with a string as content.

   This content can be read, appended to, or replaced.


   .. py:attribute:: streaming
      :value: False



   .. py:property:: content


   .. py:method:: serialize()

      Full HTTP message, including headers, as a bytestring.



   .. py:method:: write(content)


   .. py:method:: tell()


   .. py:method:: getvalue()


   .. py:method:: writable()


   .. py:method:: writelines(lines)


.. py:class:: StreamingHttpResponse(streaming_content=(), *args, **kwargs)

   Bases: :py:obj:`HttpResponseBase`


   A streaming HTTP response class with an iterator as content.

   This should only be iterated once, when the response is streamed to the
   client. However, it can be appended to or replaced with a new iterator
   that wraps the original content (or yields entirely new content).


   .. py:attribute:: streaming
      :value: True



   .. py:property:: streaming_content


   .. py:property:: content


   .. py:method:: getvalue()


.. py:class:: FileResponse(*args, as_attachment=False, filename='', **kwargs)

   Bases: :py:obj:`StreamingHttpResponse`


   A streaming HTTP response class optimized for files.


   .. py:attribute:: block_size
      :value: 4096



   .. py:attribute:: as_attachment
      :value: False



   .. py:attribute:: filename
      :value: ''



   .. py:method:: set_headers(filelike)

      Set some common response headers (Content-Length, Content-Type, and
      Content-Disposition) based on the `filelike` response content.



.. py:class:: HttpResponseRedirectBase(redirect_to, *args, **kwargs)

   Bases: :py:obj:`HttpResponse`


   An HTTP response class with a string as content.

   This content can be read, appended to, or replaced.


   .. py:attribute:: allowed_schemes
      :value: ['http', 'https', 'ftp']



   .. py:attribute:: url


.. py:class:: HttpResponseRedirect(redirect_to, *args, **kwargs)

   Bases: :py:obj:`HttpResponseRedirectBase`


   An HTTP response class with a string as content.

   This content can be read, appended to, or replaced.


   .. py:attribute:: status_code
      :value: 302



.. py:class:: HttpResponsePermanentRedirect(redirect_to, *args, **kwargs)

   Bases: :py:obj:`HttpResponseRedirectBase`


   An HTTP response class with a string as content.

   This content can be read, appended to, or replaced.


   .. py:attribute:: status_code
      :value: 301



.. py:class:: HttpResponseNotModified(*args, **kwargs)

   Bases: :py:obj:`HttpResponse`


   An HTTP response class with a string as content.

   This content can be read, appended to, or replaced.


   .. py:attribute:: status_code
      :value: 304



.. py:class:: HttpResponseBadRequest(content=b'', *args, **kwargs)

   Bases: :py:obj:`HttpResponse`


   An HTTP response class with a string as content.

   This content can be read, appended to, or replaced.


   .. py:attribute:: status_code
      :value: 400



.. py:class:: HttpResponseNotFound(content=b'', *args, **kwargs)

   Bases: :py:obj:`HttpResponse`


   An HTTP response class with a string as content.

   This content can be read, appended to, or replaced.


   .. py:attribute:: status_code
      :value: 404



.. py:class:: HttpResponseForbidden(content=b'', *args, **kwargs)

   Bases: :py:obj:`HttpResponse`


   An HTTP response class with a string as content.

   This content can be read, appended to, or replaced.


   .. py:attribute:: status_code
      :value: 403



.. py:class:: HttpResponseNotAllowed(permitted_methods, *args, **kwargs)

   Bases: :py:obj:`HttpResponse`


   An HTTP response class with a string as content.

   This content can be read, appended to, or replaced.


   .. py:attribute:: status_code
      :value: 405



.. py:class:: HttpResponseGone(content=b'', *args, **kwargs)

   Bases: :py:obj:`HttpResponse`


   An HTTP response class with a string as content.

   This content can be read, appended to, or replaced.


   .. py:attribute:: status_code
      :value: 410



.. py:class:: HttpResponseServerError(content=b'', *args, **kwargs)

   Bases: :py:obj:`HttpResponse`


   An HTTP response class with a string as content.

   This content can be read, appended to, or replaced.


   .. py:attribute:: status_code
      :value: 500



.. py:exception:: Http404

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


.. py:class:: JsonResponse(data, encoder=DjangoJSONEncoder, safe=True, json_dumps_params=None, **kwargs)

   Bases: :py:obj:`HttpResponse`


   An HTTP response class that consumes data to be serialized to JSON.

   :param data: Data to be dumped into json. By default only ``dict`` objects
     are allowed to be passed due to a security flaw before ECMAScript 5. See
     the ``safe`` parameter for more information.
   :param encoder: Should be a json encoder class. Defaults to
     ``django.core.serializers.json.DjangoJSONEncoder``.
   :param safe: Controls if only ``dict`` objects may be serialized. Defaults
     to ``True``.
   :param json_dumps_params: A dictionary of kwargs passed to json.dumps().


