django.db.models.aggregates
===========================

.. py:module:: django.db.models.aggregates

.. autoapi-nested-parse::

   Classes to represent the definitions of aggregate functions.



Classes
-------

.. autoapisummary::

   django.db.models.aggregates.Aggregate
   django.db.models.aggregates.Avg
   django.db.models.aggregates.Count
   django.db.models.aggregates.Max
   django.db.models.aggregates.Min
   django.db.models.aggregates.StdDev
   django.db.models.aggregates.Sum
   django.db.models.aggregates.Variance


Module Contents
---------------

.. py:class:: Aggregate(*expressions, distinct=False, filter=None, default=None, **extra)

   Bases: :py:obj:`django.db.models.expressions.Func`


   An SQL function call.


   .. py:attribute:: template
      :value: '%(function)s(%(distinct)s%(expressions)s)'



   .. py:attribute:: contains_aggregate
      :value: True



   .. py:attribute:: name
      :value: None



   .. py:attribute:: filter_template
      :value: '%s FILTER (WHERE %%(filter)s)'



   .. py:attribute:: window_compatible
      :value: True



   .. py:attribute:: allow_distinct
      :value: False



   .. py:attribute:: empty_result_set_value
      :value: None



   .. py:attribute:: distinct
      :value: False



   .. py:attribute:: filter
      :value: None



   .. py:attribute:: default
      :value: None



   .. py:method:: get_source_fields()

      Return the underlying field types used by this aggregate.



   .. py:method:: get_source_expressions()


   .. py:method:: set_source_expressions(exprs)


   .. py:method:: resolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)

      Provide the chance to do any preprocessing or validation before being
      added to the query.

      :param \* query: the backend query implementation
      :param \* allow_joins: boolean allowing or denying use of joins
                             in this query
      :param \* reuse: a set of reusable joins for multijoins
      :param \* summarize: a terminal aggregate clause
      :param \* for_save: whether this expression about to be used in a save or update

      Return: an Expression to be added to the query.



   .. py:property:: default_alias


   .. py:method:: get_group_by_cols()


   .. py:method:: as_sql(compiler, connection, **extra_context)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



.. py:class:: Avg(*expressions, distinct=False, filter=None, default=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.FixDurationInputMixin`, :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`Aggregate`


   An SQL function call.


   .. py:attribute:: function
      :value: 'AVG'



   .. py:attribute:: name
      :value: 'Avg'



   .. py:attribute:: allow_distinct
      :value: True



.. py:class:: Count(expression, filter=None, **extra)

   Bases: :py:obj:`Aggregate`


   An SQL function call.


   .. py:attribute:: function
      :value: 'COUNT'



   .. py:attribute:: name
      :value: 'Count'



   .. py:attribute:: output_field

      Return the output type of this expressions.


   .. py:attribute:: allow_distinct
      :value: True



   .. py:attribute:: empty_result_set_value
      :value: 0



.. py:class:: Max(*expressions, distinct=False, filter=None, default=None, **extra)

   Bases: :py:obj:`Aggregate`


   An SQL function call.


   .. py:attribute:: function
      :value: 'MAX'



   .. py:attribute:: name
      :value: 'Max'



.. py:class:: Min(*expressions, distinct=False, filter=None, default=None, **extra)

   Bases: :py:obj:`Aggregate`


   An SQL function call.


   .. py:attribute:: function
      :value: 'MIN'



   .. py:attribute:: name
      :value: 'Min'



.. py:class:: StdDev(expression, sample=False, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`Aggregate`


   An SQL function call.


   .. py:attribute:: name
      :value: 'StdDev'



   .. py:attribute:: function
      :value: 'STDDEV_POP'



.. py:class:: Sum(*expressions, distinct=False, filter=None, default=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.FixDurationInputMixin`, :py:obj:`Aggregate`


   An SQL function call.


   .. py:attribute:: function
      :value: 'SUM'



   .. py:attribute:: name
      :value: 'Sum'



   .. py:attribute:: allow_distinct
      :value: True



.. py:class:: Variance(expression, sample=False, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`Aggregate`


   An SQL function call.


   .. py:attribute:: name
      :value: 'Variance'



   .. py:attribute:: function
      :value: 'VAR_POP'



