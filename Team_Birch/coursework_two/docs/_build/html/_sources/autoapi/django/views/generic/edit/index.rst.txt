django.views.generic.edit
=========================

.. py:module:: django.views.generic.edit


Exceptions
----------

.. autoapisummary::

   django.views.generic.edit.DeleteViewCustomDeleteWarning


Classes
-------

.. autoapisummary::

   django.views.generic.edit.FormMixin
   django.views.generic.edit.ModelFormMixin
   django.views.generic.edit.ProcessFormView
   django.views.generic.edit.BaseFormView
   django.views.generic.edit.FormView
   django.views.generic.edit.BaseCreateView
   django.views.generic.edit.CreateView
   django.views.generic.edit.BaseUpdateView
   django.views.generic.edit.UpdateView
   django.views.generic.edit.DeletionMixin
   django.views.generic.edit.BaseDeleteView
   django.views.generic.edit.DeleteView


Module Contents
---------------

.. py:class:: FormMixin

   Bases: :py:obj:`django.views.generic.base.ContextMixin`


   Provide a way to show and handle a form in a request.


   .. py:attribute:: initial


   .. py:attribute:: form_class
      :value: None



   .. py:attribute:: success_url
      :value: None



   .. py:attribute:: prefix
      :value: None



   .. py:method:: get_initial()

      Return the initial data to use for forms on this view.



   .. py:method:: get_prefix()

      Return the prefix to use for forms.



   .. py:method:: get_form_class()

      Return the form class to use.



   .. py:method:: get_form(form_class=None)

      Return an instance of the form to be used in this view.



   .. py:method:: get_form_kwargs()

      Return the keyword arguments for instantiating the form.



   .. py:method:: get_success_url()

      Return the URL to redirect to after processing a valid form.



   .. py:method:: form_valid(form)

      If the form is valid, redirect to the supplied URL.



   .. py:method:: form_invalid(form)

      If the form is invalid, render the invalid form.



   .. py:method:: get_context_data(**kwargs)

      Insert the form into the context dict.



.. py:class:: ModelFormMixin

   Bases: :py:obj:`FormMixin`, :py:obj:`django.views.generic.detail.SingleObjectMixin`


   Provide a way to show and handle a ModelForm in a request.


   .. py:attribute:: fields
      :value: None



   .. py:method:: get_form_class()

      Return the form class to use in this view.



   .. py:method:: get_form_kwargs()

      Return the keyword arguments for instantiating the form.



   .. py:method:: get_success_url()

      Return the URL to redirect to after processing a valid form.



   .. py:method:: form_valid(form)

      If the form is valid, save the associated model.



.. py:class:: ProcessFormView

   Bases: :py:obj:`django.views.generic.base.View`


   Render a form on GET and processes it on POST.


   .. py:method:: get(request, *args, **kwargs)

      Handle GET requests: instantiate a blank version of the form.



   .. py:method:: post(request, *args, **kwargs)

      Handle POST requests: instantiate a form instance with the passed
      POST variables and then check if it's valid.



   .. py:method:: put(*args, **kwargs)


.. py:class:: BaseFormView

   Bases: :py:obj:`FormMixin`, :py:obj:`ProcessFormView`


   A base view for displaying a form.


.. py:class:: FormView

   Bases: :py:obj:`django.views.generic.base.TemplateResponseMixin`, :py:obj:`BaseFormView`


   A view for displaying a form and rendering a template response.


.. py:class:: BaseCreateView

   Bases: :py:obj:`ModelFormMixin`, :py:obj:`ProcessFormView`


   Base view for creating a new object instance.

   Using this base class requires subclassing to provide a response mixin.


   .. py:method:: get(request, *args, **kwargs)

      Handle GET requests: instantiate a blank version of the form.



   .. py:method:: post(request, *args, **kwargs)

      Handle POST requests: instantiate a form instance with the passed
      POST variables and then check if it's valid.



.. py:class:: CreateView

   Bases: :py:obj:`django.views.generic.detail.SingleObjectTemplateResponseMixin`, :py:obj:`BaseCreateView`


   View for creating a new object, with a response rendered by a template.


   .. py:attribute:: template_name_suffix
      :value: '_form'



.. py:class:: BaseUpdateView

   Bases: :py:obj:`ModelFormMixin`, :py:obj:`ProcessFormView`


   Base view for updating an existing object.

   Using this base class requires subclassing to provide a response mixin.


   .. py:method:: get(request, *args, **kwargs)

      Handle GET requests: instantiate a blank version of the form.



   .. py:method:: post(request, *args, **kwargs)

      Handle POST requests: instantiate a form instance with the passed
      POST variables and then check if it's valid.



.. py:class:: UpdateView

   Bases: :py:obj:`django.views.generic.detail.SingleObjectTemplateResponseMixin`, :py:obj:`BaseUpdateView`


   View for updating an object, with a response rendered by a template.


   .. py:attribute:: template_name_suffix
      :value: '_form'



.. py:class:: DeletionMixin

   Provide the ability to delete objects.


   .. py:attribute:: success_url
      :value: None



   .. py:method:: delete(request, *args, **kwargs)

      Call the delete() method on the fetched object and then redirect to the
      success URL.



   .. py:method:: post(request, *args, **kwargs)


   .. py:method:: get_success_url()


.. py:exception:: DeleteViewCustomDeleteWarning

   Bases: :py:obj:`Warning`


   Base class for warning categories.


.. py:class:: BaseDeleteView(*args, **kwargs)

   Bases: :py:obj:`DeletionMixin`, :py:obj:`FormMixin`, :py:obj:`django.views.generic.detail.BaseDetailView`


   Base view for deleting an object.

   Using this base class requires subclassing to provide a response mixin.


   .. py:attribute:: form_class


   .. py:method:: post(request, *args, **kwargs)


   .. py:method:: form_valid(form)

      If the form is valid, redirect to the supplied URL.



.. py:class:: DeleteView(*args, **kwargs)

   Bases: :py:obj:`django.views.generic.detail.SingleObjectTemplateResponseMixin`, :py:obj:`BaseDeleteView`


   View for deleting an object retrieved with self.get_object(), with a
   response rendered by a template.


   .. py:attribute:: template_name_suffix
      :value: '_confirm_delete'



