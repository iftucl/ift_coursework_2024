django.views.generic.base
=========================

.. py:module:: django.views.generic.base


Attributes
----------

.. autoapisummary::

   django.views.generic.base.logger


Classes
-------

.. autoapisummary::

   django.views.generic.base.ContextMixin
   django.views.generic.base.View
   django.views.generic.base.TemplateResponseMixin
   django.views.generic.base.TemplateView
   django.views.generic.base.RedirectView


Module Contents
---------------

.. py:data:: logger

.. py:class:: ContextMixin

   A default context mixin that passes the keyword arguments received by
   get_context_data() as the template context.


   .. py:attribute:: extra_context
      :value: None



   .. py:method:: get_context_data(**kwargs)


.. py:class:: View(**kwargs)

   Intentionally simple parent class for all views. Only implements
   dispatch-by-method and simple sanity checking.


   .. py:attribute:: http_method_names
      :value: ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace']



   .. py:method:: view_is_async()


   .. py:method:: as_view(**initkwargs)
      :classmethod:


      Main entry point for a request-response process.



   .. py:method:: setup(request, *args, **kwargs)

      Initialize attributes shared by all view methods.



   .. py:method:: dispatch(request, *args, **kwargs)


   .. py:method:: http_method_not_allowed(request, *args, **kwargs)


   .. py:method:: options(request, *args, **kwargs)

      Handle responding to requests for the OPTIONS HTTP verb.



.. py:class:: TemplateResponseMixin

   A mixin that can be used to render a template.


   .. py:attribute:: template_name
      :value: None



   .. py:attribute:: template_engine
      :value: None



   .. py:attribute:: response_class


   .. py:attribute:: content_type
      :value: None



   .. py:method:: render_to_response(context, **response_kwargs)

      Return a response, using the `response_class` for this view, with a
      template rendered with the given context.

      Pass response_kwargs to the constructor of the response class.



   .. py:method:: get_template_names()

      Return a list of template names to be used for the request. Must return
      a list. May not be called if render_to_response() is overridden.



.. py:class:: TemplateView(**kwargs)

   Bases: :py:obj:`TemplateResponseMixin`, :py:obj:`ContextMixin`, :py:obj:`View`


   Render a template. Pass keyword arguments from the URLconf to the context.


   .. py:method:: get(request, *args, **kwargs)


.. py:class:: RedirectView(**kwargs)

   Bases: :py:obj:`View`


   Provide a redirect on any GET request.


   .. py:attribute:: permanent
      :value: False



   .. py:attribute:: url
      :value: None



   .. py:attribute:: pattern_name
      :value: None



   .. py:attribute:: query_string
      :value: False



   .. py:method:: get_redirect_url(*args, **kwargs)

      Return the URL redirect to. Keyword arguments from the URL pattern
      match generating the redirect request are provided as kwargs to this
      method.



   .. py:method:: get(request, *args, **kwargs)


   .. py:method:: head(request, *args, **kwargs)


   .. py:method:: post(request, *args, **kwargs)


   .. py:method:: options(request, *args, **kwargs)

      Handle responding to requests for the OPTIONS HTTP verb.



   .. py:method:: delete(request, *args, **kwargs)


   .. py:method:: put(request, *args, **kwargs)


   .. py:method:: patch(request, *args, **kwargs)


