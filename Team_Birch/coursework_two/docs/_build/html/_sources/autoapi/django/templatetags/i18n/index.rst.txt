django.templatetags.i18n
========================

.. py:module:: django.templatetags.i18n


Attributes
----------

.. autoapisummary::

   django.templatetags.i18n.register


Classes
-------

.. autoapisummary::

   django.templatetags.i18n.GetAvailableLanguagesNode
   django.templatetags.i18n.GetLanguageInfoNode
   django.templatetags.i18n.GetLanguageInfoListNode
   django.templatetags.i18n.GetCurrentLanguageNode
   django.templatetags.i18n.GetCurrentLanguageBidiNode
   django.templatetags.i18n.TranslateNode
   django.templatetags.i18n.BlockTranslateNode
   django.templatetags.i18n.LanguageNode


Functions
---------

.. autoapisummary::

   django.templatetags.i18n.do_get_available_languages
   django.templatetags.i18n.do_get_language_info
   django.templatetags.i18n.do_get_language_info_list
   django.templatetags.i18n.language_name
   django.templatetags.i18n.language_name_translated
   django.templatetags.i18n.language_name_local
   django.templatetags.i18n.language_bidi
   django.templatetags.i18n.do_get_current_language
   django.templatetags.i18n.do_get_current_language_bidi
   django.templatetags.i18n.do_translate
   django.templatetags.i18n.do_block_translate
   django.templatetags.i18n.language


Module Contents
---------------

.. py:data:: register

.. py:class:: GetAvailableLanguagesNode(variable)

   Bases: :py:obj:`django.template.Node`


   .. py:attribute:: variable


   .. py:method:: render(context)


.. py:class:: GetLanguageInfoNode(lang_code, variable)

   Bases: :py:obj:`django.template.Node`


   .. py:attribute:: lang_code


   .. py:attribute:: variable


   .. py:method:: render(context)


.. py:class:: GetLanguageInfoListNode(languages, variable)

   Bases: :py:obj:`django.template.Node`


   .. py:attribute:: languages


   .. py:attribute:: variable


   .. py:method:: get_language_info(language)


   .. py:method:: render(context)


.. py:class:: GetCurrentLanguageNode(variable)

   Bases: :py:obj:`django.template.Node`


   .. py:attribute:: variable


   .. py:method:: render(context)


.. py:class:: GetCurrentLanguageBidiNode(variable)

   Bases: :py:obj:`django.template.Node`


   .. py:attribute:: variable


   .. py:method:: render(context)


.. py:class:: TranslateNode(filter_expression, noop, asvar=None, message_context=None)

   Bases: :py:obj:`django.template.Node`


   .. py:attribute:: child_nodelists
      :value: ()



   .. py:attribute:: noop


   .. py:attribute:: asvar
      :value: None



   .. py:attribute:: message_context
      :value: None



   .. py:attribute:: filter_expression


   .. py:method:: render(context)


.. py:class:: BlockTranslateNode(extra_context, singular, plural=None, countervar=None, counter=None, message_context=None, trimmed=False, asvar=None, tag_name='blocktranslate')

   Bases: :py:obj:`django.template.Node`


   .. py:attribute:: extra_context


   .. py:attribute:: singular


   .. py:attribute:: plural
      :value: None



   .. py:attribute:: countervar
      :value: None



   .. py:attribute:: counter
      :value: None



   .. py:attribute:: message_context
      :value: None



   .. py:attribute:: trimmed
      :value: False



   .. py:attribute:: asvar
      :value: None



   .. py:attribute:: tag_name
      :value: 'blocktranslate'



   .. py:method:: render_token_list(tokens)


   .. py:method:: render(context, nested=False)


.. py:class:: LanguageNode(nodelist, language)

   Bases: :py:obj:`django.template.Node`


   .. py:attribute:: nodelist


   .. py:attribute:: language


   .. py:method:: render(context)


.. py:function:: do_get_available_languages(parser, token)

   Store a list of available languages in the context.

   Usage::

       {% get_available_languages as languages %}
       {% for language in languages %}
       ...
       {% endfor %}

   This puts settings.LANGUAGES into the named variable.


.. py:function:: do_get_language_info(parser, token)

   Store the language information dictionary for the given language code in a
   context variable.

   Usage::

       {% get_language_info for LANGUAGE_CODE as l %}
       {{ l.code }}
       {{ l.name }}
       {{ l.name_translated }}
       {{ l.name_local }}
       {{ l.bidi|yesno:"bi-directional,uni-directional" }}


.. py:function:: do_get_language_info_list(parser, token)

   Store a list of language information dictionaries for the given language
   codes in a context variable. The language codes can be specified either as
   a list of strings or a settings.LANGUAGES style list (or any sequence of
   sequences whose first items are language codes).

   Usage::

       {% get_language_info_list for LANGUAGES as langs %}
       {% for l in langs %}
         {{ l.code }}
         {{ l.name }}
         {{ l.name_translated }}
         {{ l.name_local }}
         {{ l.bidi|yesno:"bi-directional,uni-directional" }}
       {% endfor %}


.. py:function:: language_name(lang_code)

.. py:function:: language_name_translated(lang_code)

.. py:function:: language_name_local(lang_code)

.. py:function:: language_bidi(lang_code)

.. py:function:: do_get_current_language(parser, token)

   Store the current language in the context.

   Usage::

       {% get_current_language as language %}

   This fetches the currently active language and puts its value into the
   ``language`` context variable.


.. py:function:: do_get_current_language_bidi(parser, token)

   Store the current language layout in the context.

   Usage::

       {% get_current_language_bidi as bidi %}

   This fetches the currently active language's layout and puts its value into
   the ``bidi`` context variable. True indicates right-to-left layout,
   otherwise left-to-right.


.. py:function:: do_translate(parser, token)

   Mark a string for translation and translate the string for the current
   language.

   Usage::

       {% translate "this is a test" %}

   This marks the string for translation so it will be pulled out by
   makemessages into the .po files and runs the string through the translation
   engine.

   There is a second form::

       {% translate "this is a test" noop %}

   This marks the string for translation, but returns the string unchanged.
   Use it when you need to store values into forms that should be translated
   later on.

   You can use variables instead of constant strings
   to translate stuff you marked somewhere else::

       {% translate variable %}

   This tries to translate the contents of the variable ``variable``. Make
   sure that the string in there is something that is in the .po file.

   It is possible to store the translated string into a variable::

       {% translate "this is a test" as var %}
       {{ var }}

   Contextual translations are also supported::

       {% translate "this is a test" context "greeting" %}

   This is equivalent to calling pgettext instead of (u)gettext.


.. py:function:: do_block_translate(parser, token)

   Translate a block of text with parameters.

   Usage::

       {% blocktranslate with bar=foo|filter boo=baz|filter %}
       This is {{ bar }} and {{ boo }}.
       {% endblocktranslate %}

   Additionally, this supports pluralization::

       {% blocktranslate count count=var|length %}
       There is {{ count }} object.
       {% plural %}
       There are {{ count }} objects.
       {% endblocktranslate %}

   This is much like ngettext, only in template syntax.

   The "var as value" legacy format is still supported::

       {% blocktranslate with foo|filter as bar and baz|filter as boo %}
       {% blocktranslate count var|length as count %}

   The translated string can be stored in a variable using `asvar`::

       {% blocktranslate with bar=foo|filter boo=baz|filter asvar var %}
       This is {{ bar }} and {{ boo }}.
       {% endblocktranslate %}
       {{ var }}

   Contextual translations are supported::

       {% blocktranslate with bar=foo|filter context "greeting" %}
           This is {{ bar }}.
       {% endblocktranslate %}

   This is equivalent to calling pgettext/npgettext instead of
   (u)gettext/(u)ngettext.


.. py:function:: language(parser, token)

   Enable the given language just for this block.

   Usage::

       {% language "de" %}
           This is {{ bar }} and {{ boo }}.
       {% endlanguage %}


