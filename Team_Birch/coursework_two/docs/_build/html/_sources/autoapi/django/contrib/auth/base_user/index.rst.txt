django.contrib.auth.base_user
=============================

.. py:module:: django.contrib.auth.base_user

.. autoapi-nested-parse::

   This module allows importing AbstractBaseUser even when django.contrib.auth is
   not in INSTALLED_APPS.



Classes
-------

.. autoapisummary::

   django.contrib.auth.base_user.BaseUserManager
   django.contrib.auth.base_user.AbstractBaseUser


Module Contents
---------------

.. py:class:: BaseUserManager

   Bases: :py:obj:`django.db.models.Manager`


   .. py:method:: normalize_email(email)
      :classmethod:


      Normalize the email address by lowercasing the domain part of it.



   .. py:method:: make_random_password(length=10, allowed_chars='abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789')

      Generate a random password with the given length and given
      allowed_chars. The default value of allowed_chars does not have "I" or
      "O" or letters and digits that look similar -- just to avoid confusion.



   .. py:method:: get_by_natural_key(username)


.. py:class:: AbstractBaseUser

   Bases: :py:obj:`django.db.models.Model`


   .. py:attribute:: password


   .. py:attribute:: last_login


   .. py:attribute:: is_active
      :value: True



   .. py:attribute:: REQUIRED_FIELDS
      :value: []



   .. py:class:: Meta

      .. py:attribute:: abstract
         :value: True




   .. py:method:: save(*args, **kwargs)


   .. py:method:: get_username()

      Return the username for this User.



   .. py:method:: clean()


   .. py:method:: natural_key()


   .. py:property:: is_anonymous

      Always return False. This is a way of comparing User objects to
      anonymous users.


   .. py:property:: is_authenticated

      Always return True. This is a way to tell if the user has been
      authenticated in templates.


   .. py:method:: set_password(raw_password)


   .. py:method:: check_password(raw_password)

      Return a boolean of whether the raw_password was correct. Handles
      hashing formats behind the scenes.



   .. py:method:: set_unusable_password()


   .. py:method:: has_usable_password()

      Return False if set_unusable_password() has been called for this user.



   .. py:method:: get_session_auth_hash()

      Return an HMAC of the password field.



   .. py:method:: get_session_auth_fallback_hash()


   .. py:method:: get_email_field_name()
      :classmethod:



   .. py:method:: normalize_username(username)
      :classmethod:



