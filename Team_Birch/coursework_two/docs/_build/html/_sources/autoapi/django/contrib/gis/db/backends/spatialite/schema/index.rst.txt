django.contrib.gis.db.backends.spatialite.schema
================================================

.. py:module:: django.contrib.gis.db.backends.spatialite.schema


Classes
-------

.. autoapisummary::

   django.contrib.gis.db.backends.spatialite.schema.SpatialiteSchemaEditor


Module Contents
---------------

.. py:class:: SpatialiteSchemaEditor(*args, **kwargs)

   Bases: :py:obj:`django.db.backends.sqlite3.schema.DatabaseSchemaEditor`


   .. py:attribute:: sql_add_geometry_column
      :value: 'SELECT AddGeometryColumn(%(table)s, %(column)s, %(srid)s, %(geom_type)s, %(dim)s, %(null)s)'



   .. py:attribute:: sql_add_spatial_index
      :value: 'SELECT CreateSpatialIndex(%(table)s, %(column)s)'



   .. py:attribute:: sql_drop_spatial_index
      :value: 'DROP TABLE idx_%(table)s_%(column)s'



   .. py:attribute:: sql_recover_geometry_metadata
      :value: 'SELECT RecoverGeometryColumn(%(table)s, %(column)s, %(srid)s, %(geom_type)s, %(dim)s)'



   .. py:attribute:: sql_remove_geometry_metadata
      :value: 'SELECT DiscardGeometryColumn(%(table)s, %(column)s)'



   .. py:attribute:: sql_discard_geometry_columns
      :value: 'DELETE FROM %(geom_table)s WHERE f_table_name = %(table)s'



   .. py:attribute:: sql_update_geometry_columns
      :value: 'UPDATE %(geom_table)s SET f_table_name = %(new_table)s WHERE f_table_name = %(old_table)s'



   .. py:attribute:: geometry_tables
      :value: ['geometry_columns', 'geometry_columns_auth', 'geometry_columns_time', 'geometry_columns_statistics']



   .. py:attribute:: geometry_sql
      :value: []



   .. py:method:: geo_quote_name(name)


   .. py:method:: column_sql(model, field, include_default=False)


   .. py:method:: remove_geometry_metadata(model, field)


   .. py:method:: create_model(model)


   .. py:method:: delete_model(model, **kwargs)


   .. py:method:: add_field(model, field)


   .. py:method:: remove_field(model, field)


   .. py:method:: alter_db_table(model, old_db_table, new_db_table, disable_constraints=True)


