django.core.management.utils
============================

.. py:module:: django.core.management.utils


Functions
---------

.. autoapisummary::

   django.core.management.utils.popen_wrapper
   django.core.management.utils.handle_extensions
   django.core.management.utils.find_command
   django.core.management.utils.get_random_secret_key
   django.core.management.utils.parse_apps_and_model_labels
   django.core.management.utils.get_command_line_option
   django.core.management.utils.normalize_path_patterns
   django.core.management.utils.is_ignored_path
   django.core.management.utils.find_formatters
   django.core.management.utils.run_formatters


Module Contents
---------------

.. py:function:: popen_wrapper(args, stdout_encoding='utf-8')

   Friendly wrapper around Popen.

   Return stdout output, stderr output, and OS status code.


.. py:function:: handle_extensions(extensions)

   Organize multiple extensions that are separated with commas or passed by
   using --extension/-e multiple times.

   For example: running 'django-admin makemessages -e js,txt -e xhtml -a'
   would result in an extension list: ['.js', '.txt', '.xhtml']

   >>> handle_extensions(['.html', 'html,js,py,py,py,.py', 'py,.py'])
   {'.html', '.js', '.py'}
   >>> handle_extensions(['.html, txt,.tpl'])
   {'.html', '.tpl', '.txt'}


.. py:function:: find_command(cmd, path=None, pathext=None)

.. py:function:: get_random_secret_key()

   Return a 50 character random string usable as a SECRET_KEY setting value.


.. py:function:: parse_apps_and_model_labels(labels)

   Parse a list of "app_label.ModelName" or "app_label" strings into actual
   objects and return a two-element tuple:
       (set of model classes, set of app_configs).
   Raise a CommandError if some specified models or apps don't exist.


.. py:function:: get_command_line_option(argv, option)

   Return the value of a command line option (which should include leading
   dashes, e.g. '--testrunner') from an argument list. Return None if the
   option wasn't passed or if the argument list couldn't be parsed.


.. py:function:: normalize_path_patterns(patterns)

   Normalize an iterable of glob style patterns based on OS.


.. py:function:: is_ignored_path(path, ignore_patterns)

   Check if the given path should be ignored or not based on matching
   one of the glob style `ignore_patterns`.


.. py:function:: find_formatters()

.. py:function:: run_formatters(written_files, black_path=sentinel := object())

   Run the black formatter on the specified files.


