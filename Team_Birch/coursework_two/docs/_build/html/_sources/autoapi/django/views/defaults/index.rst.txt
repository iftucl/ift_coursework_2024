django.views.defaults
=====================

.. py:module:: django.views.defaults


Attributes
----------

.. autoapisummary::

   django.views.defaults.ERROR_404_TEMPLATE_NAME
   django.views.defaults.ERROR_403_TEMPLATE_NAME
   django.views.defaults.ERROR_400_TEMPLATE_NAME
   django.views.defaults.ERROR_500_TEMPLATE_NAME
   django.views.defaults.ERROR_PAGE_TEMPLATE


Functions
---------

.. autoapisummary::

   django.views.defaults.page_not_found
   django.views.defaults.server_error
   django.views.defaults.bad_request
   django.views.defaults.permission_denied


Module Contents
---------------

.. py:data:: ERROR_404_TEMPLATE_NAME
   :value: '404.html'


.. py:data:: ERROR_403_TEMPLATE_NAME
   :value: '403.html'


.. py:data:: ERROR_400_TEMPLATE_NAME
   :value: '400.html'


.. py:data:: ERROR_500_TEMPLATE_NAME
   :value: '500.html'


.. py:data:: ERROR_PAGE_TEMPLATE
   :value: Multiline-String

   .. raw:: html

      <details><summary>Show Value</summary>

   .. code-block:: python

      """
      <!doctype html>
      <html lang="en">
      <head>
        <title>%(title)s</title>
      </head>
      <body>
        <h1>%(title)s</h1><p>%(details)s</p>
      </body>
      </html>
      """

   .. raw:: html

      </details>



.. py:function:: page_not_found(request, exception, template_name=ERROR_404_TEMPLATE_NAME)

   Default 404 handler.

   Templates: :template:`404.html`
   Context:
       request_path
           The path of the requested URL (e.g., '/app/pages/bad_page/'). It's
           quoted to prevent a content injection attack.
       exception
           The message from the exception which triggered the 404 (if one was
           supplied), or the exception class name


.. py:function:: server_error(request, template_name=ERROR_500_TEMPLATE_NAME)

   500 error handler.

   Templates: :template:`500.html`
   Context: None


.. py:function:: bad_request(request, exception, template_name=ERROR_400_TEMPLATE_NAME)

   400 error handler.

   Templates: :template:`400.html`
   Context: None


.. py:function:: permission_denied(request, exception, template_name=ERROR_403_TEMPLATE_NAME)

   Permission denied (403) handler.

   Templates: :template:`403.html`
   Context:
       exception
           The message from the exception which triggered the 403 (if one was
           supplied).

   If the template does not exist, an Http403 response containing the text
   "403 Forbidden" (as per RFC 9110 Section 15.5.4) will be returned.


