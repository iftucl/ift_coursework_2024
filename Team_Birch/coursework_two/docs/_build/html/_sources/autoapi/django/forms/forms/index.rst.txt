django.forms.forms
==================

.. py:module:: django.forms.forms

.. autoapi-nested-parse::

   Form classes



Classes
-------

.. autoapisummary::

   django.forms.forms.BaseForm
   django.forms.forms.Form


Module Contents
---------------

.. py:class:: BaseForm(data=None, files=None, auto_id='id_%s', prefix=None, initial=None, error_class=ErrorList, label_suffix=None, empty_permitted=False, field_order=None, use_required_attribute=None, renderer=None)

   Bases: :py:obj:`django.forms.utils.RenderableFormMixin`


   The main implementation of all the Form logic. Note that this class is
   different than Form. See the comments by the Form class for more info. Any
   improvements to the form API should be made to this class, not to the Form
   class.


   .. py:attribute:: default_renderer
      :value: None



   .. py:attribute:: field_order
      :value: None



   .. py:attribute:: prefix
      :value: None



   .. py:attribute:: use_required_attribute
      :value: True



   .. py:attribute:: template_name_div
      :value: 'django/forms/div.html'



   .. py:attribute:: template_name_p
      :value: 'django/forms/p.html'



   .. py:attribute:: template_name_table
      :value: 'django/forms/table.html'



   .. py:attribute:: template_name_ul
      :value: 'django/forms/ul.html'



   .. py:attribute:: template_name_label
      :value: 'django/forms/label.html'



   .. py:attribute:: is_bound


   .. py:attribute:: data


   .. py:attribute:: files


   .. py:attribute:: auto_id
      :value: 'id_%s'



   .. py:attribute:: initial


   .. py:attribute:: error_class


   .. py:attribute:: label_suffix
      :value: None



   .. py:attribute:: empty_permitted
      :value: False



   .. py:attribute:: fields


   .. py:attribute:: renderer
      :value: None



   .. py:method:: order_fields(field_order)

      Rearrange the fields according to field_order.

      field_order is a list of field names specifying the order. Append fields
      not included in the list in the default order for backward compatibility
      with subclasses not overriding field_order. If field_order is None,
      keep all fields in the order defined in the class. Ignore unknown
      fields in field_order to allow disabling fields in form subclasses
      without redefining ordering.



   .. py:property:: errors

      Return an ErrorDict for the data provided for the form.


   .. py:method:: is_valid()

      Return True if the form has no errors, or False otherwise.



   .. py:method:: add_prefix(field_name)

      Return the field name with a prefix appended, if this Form has a
      prefix set.

      Subclasses may wish to override.



   .. py:method:: add_initial_prefix(field_name)

      Add an 'initial' prefix for checking dynamic initial values.



   .. py:property:: template_name


   .. py:method:: get_context()


   .. py:method:: non_field_errors()

      Return an ErrorList of errors that aren't associated with a particular
      field -- i.e., from Form.clean(). Return an empty ErrorList if there
      are none.



   .. py:method:: add_error(field, error)

      Update the content of `self._errors`.

      The `field` argument is the name of the field to which the errors
      should be added. If it's None, treat the errors as NON_FIELD_ERRORS.

      The `error` argument can be a single error, a list of errors, or a
      dictionary that maps field names to lists of errors. An "error" can be
      either a simple string or an instance of ValidationError with its
      message attribute set and a "list or dictionary" can be an actual
      `list` or `dict` or an instance of ValidationError with its
      `error_list` or `error_dict` attribute set.

      If `error` is a dictionary, the `field` argument *must* be None and
      errors will be added to the fields that correspond to the keys of the
      dictionary.



   .. py:method:: has_error(field, code=None)


   .. py:method:: full_clean()

      Clean all of self.data and populate self._errors and self.cleaned_data.



   .. py:method:: clean()

      Hook for doing any extra form-wide cleaning after Field.clean() has been
      called on every field. Any ValidationError raised by this method will
      not be associated with a particular field; it will have a special-case
      association with the field named '__all__'.



   .. py:method:: has_changed()

      Return True if data differs from initial.



   .. py:method:: changed_data()


   .. py:property:: media

      Return all media required to render the widgets on this form.


   .. py:method:: is_multipart()

      Return True if the form needs to be multipart-encoded, i.e. it has
      FileInput, or False otherwise.



   .. py:method:: hidden_fields()

      Return a list of all the BoundField objects that are hidden fields.
      Useful for manual form layout in templates.



   .. py:method:: visible_fields()

      Return a list of BoundField objects that aren't hidden fields.
      The opposite of the hidden_fields() method.



   .. py:method:: get_initial_for_field(field, field_name)

      Return initial data for field on form. Use initial data from the form
      or the field, in that order. Evaluate callable values.



.. py:class:: Form(data=None, files=None, auto_id='id_%s', prefix=None, initial=None, error_class=ErrorList, label_suffix=None, empty_permitted=False, field_order=None, use_required_attribute=None, renderer=None)

   Bases: :py:obj:`BaseForm`


   A collection of Fields, plus their associated data.


