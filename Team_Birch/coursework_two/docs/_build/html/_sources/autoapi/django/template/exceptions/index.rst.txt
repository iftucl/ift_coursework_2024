django.template.exceptions
==========================

.. py:module:: django.template.exceptions

.. autoapi-nested-parse::

   This module contains generic exceptions used by template backends. Although,
   due to historical reasons, the Django template language also internally uses
   these exceptions, other exceptions specific to the DTL should not be added
   here.



Exceptions
----------

.. autoapisummary::

   django.template.exceptions.TemplateDoesNotExist
   django.template.exceptions.TemplateSyntaxError


Module Contents
---------------

.. py:exception:: TemplateDoesNotExist(msg, tried=None, backend=None, chain=None)

   Bases: :py:obj:`Exception`


   The exception used when a template does not exist. Optional arguments:

   backend
       The template backend class used when raising this exception.

   tried
       A list of sources that were tried when finding the template. This
       is formatted as a list of tuples containing (origin, status), where
       origin is an Origin object or duck type and status is a string with the
       reason the template wasn't found.

   chain
       A list of intermediate TemplateDoesNotExist exceptions. This is used to
       encapsulate multiple exceptions when loading templates from multiple
       engines.


   .. py:attribute:: backend
      :value: None



   .. py:attribute:: tried
      :value: None



   .. py:attribute:: chain
      :value: None



.. py:exception:: TemplateSyntaxError

   Bases: :py:obj:`Exception`


   The exception used for syntax errors during parsing or rendering.


