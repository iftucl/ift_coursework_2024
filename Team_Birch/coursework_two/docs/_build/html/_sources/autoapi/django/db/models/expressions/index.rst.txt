django.db.models.expressions
============================

.. py:module:: django.db.models.expressions


Attributes
----------

.. autoapisummary::

   django.db.models.expressions.NoneType


Classes
-------

.. autoapisummary::

   django.db.models.expressions.SQLiteNumericMixin
   django.db.models.expressions.Combinable
   django.db.models.expressions.BaseExpression
   django.db.models.expressions.Expression
   django.db.models.expressions.CombinedExpression
   django.db.models.expressions.DurationExpression
   django.db.models.expressions.TemporalSubtraction
   django.db.models.expressions.F
   django.db.models.expressions.ResolvedOuterRef
   django.db.models.expressions.OuterRef
   django.db.models.expressions.Func
   django.db.models.expressions.Value
   django.db.models.expressions.RawSQL
   django.db.models.expressions.Star
   django.db.models.expressions.Col
   django.db.models.expressions.Ref
   django.db.models.expressions.ExpressionList
   django.db.models.expressions.OrderByList
   django.db.models.expressions.ExpressionWrapper
   django.db.models.expressions.NegatedExpression
   django.db.models.expressions.When
   django.db.models.expressions.Case
   django.db.models.expressions.Subquery
   django.db.models.expressions.Exists
   django.db.models.expressions.OrderBy
   django.db.models.expressions.Window
   django.db.models.expressions.WindowFrame
   django.db.models.expressions.RowRange
   django.db.models.expressions.ValueRange


Functions
---------

.. autoapisummary::

   django.db.models.expressions.register_combinable_fields


Module Contents
---------------

.. py:class:: SQLiteNumericMixin

   Some expressions with output_field=DecimalField() must be cast to
   numeric to be properly filtered.


   .. py:method:: as_sqlite(compiler, connection, **extra_context)


.. py:class:: Combinable

   Provide the ability to combine one or two objects with
   some connector. For example F('foo') + F('bar').


   .. py:attribute:: ADD
      :value: '+'



   .. py:attribute:: SUB
      :value: '-'



   .. py:attribute:: MUL
      :value: '*'



   .. py:attribute:: DIV
      :value: '/'



   .. py:attribute:: POW
      :value: '^'



   .. py:attribute:: MOD
      :value: '%%'



   .. py:attribute:: BITAND
      :value: '&'



   .. py:attribute:: BITOR
      :value: '|'



   .. py:attribute:: BITLEFTSHIFT
      :value: '<<'



   .. py:attribute:: BITRIGHTSHIFT
      :value: '>>'



   .. py:attribute:: BITXOR
      :value: '#'



   .. py:method:: bitand(other)


   .. py:method:: bitleftshift(other)


   .. py:method:: bitrightshift(other)


   .. py:method:: bitxor(other)


   .. py:method:: bitor(other)


.. py:class:: BaseExpression(output_field=None)

   Base class for all query expressions.


   .. py:attribute:: empty_result_set_value
      :value: NotImplemented



   .. py:attribute:: is_summary
      :value: False



   .. py:attribute:: filterable
      :value: True



   .. py:attribute:: window_compatible
      :value: False



   .. py:method:: get_db_converters(connection)


   .. py:method:: get_source_expressions()


   .. py:method:: set_source_expressions(exprs)


   .. py:method:: as_sql(compiler, connection)
      :abstractmethod:


      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: contains_aggregate()


   .. py:method:: contains_over_clause()


   .. py:method:: contains_column_references()


   .. py:method:: contains_subquery()


   .. py:method:: resolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)

      Provide the chance to do any preprocessing or validation before being
      added to the query.

      :param \* query: the backend query implementation
      :param \* allow_joins: boolean allowing or denying use of joins
                             in this query
      :param \* reuse: a set of reusable joins for multijoins
      :param \* summarize: a terminal aggregate clause
      :param \* for_save: whether this expression about to be used in a save or update

      Return: an Expression to be added to the query.



   .. py:property:: conditional


   .. py:property:: field


   .. py:method:: output_field()

      Return the output type of this expressions.



   .. py:method:: convert_value()

      Expressions provide their own converters because users have the option
      of manually specifying the output_field which may be a different type
      from the one the database returns.



   .. py:method:: get_lookup(lookup)


   .. py:method:: get_transform(name)


   .. py:method:: relabeled_clone(change_map)


   .. py:method:: replace_expressions(replacements)


   .. py:method:: get_refs()


   .. py:method:: copy()


   .. py:method:: prefix_references(prefix)


   .. py:method:: get_group_by_cols()


   .. py:method:: get_source_fields()

      Return the underlying field types used by this aggregate.



   .. py:method:: asc(**kwargs)


   .. py:method:: desc(**kwargs)


   .. py:method:: reverse_ordering()


   .. py:method:: flatten()

      Recursively yield this expression and all subexpressions, in
      depth-first order.



   .. py:method:: select_format(compiler, sql, params)

      Custom format for select clauses. For example, EXISTS expressions need
      to be wrapped in CASE WHEN on Oracle.



.. py:class:: Expression(output_field=None)

   Bases: :py:obj:`BaseExpression`, :py:obj:`Combinable`


   An expression that can be combined with other expressions.


   .. py:method:: identity()


.. py:data:: NoneType

.. py:function:: register_combinable_fields(lhs, connector, rhs, result)

   Register combinable types:
       lhs <connector> rhs -> result
   e.g.
       register_combinable_fields(
           IntegerField, Combinable.ADD, FloatField, FloatField
       )


.. py:class:: CombinedExpression(lhs, connector, rhs, output_field=None)

   Bases: :py:obj:`SQLiteNumericMixin`, :py:obj:`Expression`


   Some expressions with output_field=DecimalField() must be cast to
   numeric to be properly filtered.


   .. py:attribute:: connector


   .. py:attribute:: lhs


   .. py:attribute:: rhs


   .. py:method:: get_source_expressions()


   .. py:method:: set_source_expressions(exprs)


   .. py:method:: as_sql(compiler, connection)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: resolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)

      Provide the chance to do any preprocessing or validation before being
      added to the query.

      :param \* query: the backend query implementation
      :param \* allow_joins: boolean allowing or denying use of joins
                             in this query
      :param \* reuse: a set of reusable joins for multijoins
      :param \* summarize: a terminal aggregate clause
      :param \* for_save: whether this expression about to be used in a save or update

      Return: an Expression to be added to the query.



.. py:class:: DurationExpression(lhs, connector, rhs, output_field=None)

   Bases: :py:obj:`CombinedExpression`


   Some expressions with output_field=DecimalField() must be cast to
   numeric to be properly filtered.


   .. py:method:: compile(side, compiler, connection)


   .. py:method:: as_sql(compiler, connection)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: as_sqlite(compiler, connection, **extra_context)


.. py:class:: TemporalSubtraction(lhs, rhs)

   Bases: :py:obj:`CombinedExpression`


   Some expressions with output_field=DecimalField() must be cast to
   numeric to be properly filtered.


   .. py:attribute:: output_field

      Return the output type of this expressions.


   .. py:method:: as_sql(compiler, connection)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



.. py:class:: F(name)

   Bases: :py:obj:`Combinable`


   An object capable of resolving references to existing query objects.


   .. py:attribute:: name


   .. py:method:: resolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)


   .. py:method:: replace_expressions(replacements)


   .. py:method:: asc(**kwargs)


   .. py:method:: desc(**kwargs)


   .. py:method:: copy()


.. py:class:: ResolvedOuterRef(name)

   Bases: :py:obj:`F`


   An object that contains a reference to an outer query.

   In this case, the reference to the outer query has been resolved because
   the inner query has been used as a subquery.


   .. py:attribute:: contains_aggregate
      :value: False



   .. py:attribute:: contains_over_clause
      :value: False



   .. py:method:: as_sql(*args, **kwargs)


   .. py:method:: resolve_expression(*args, **kwargs)


   .. py:method:: relabeled_clone(relabels)


   .. py:method:: get_group_by_cols()


.. py:class:: OuterRef(name)

   Bases: :py:obj:`F`


   An object capable of resolving references to existing query objects.


   .. py:attribute:: contains_aggregate
      :value: False



   .. py:attribute:: contains_over_clause
      :value: False



   .. py:method:: resolve_expression(*args, **kwargs)


   .. py:method:: relabeled_clone(relabels)


.. py:class:: Func(*expressions, output_field=None, **extra)

   Bases: :py:obj:`SQLiteNumericMixin`, :py:obj:`Expression`


   An SQL function call.


   .. py:attribute:: function
      :value: None



   .. py:attribute:: template
      :value: '%(function)s(%(expressions)s)'



   .. py:attribute:: arg_joiner
      :value: ', '



   .. py:attribute:: arity
      :value: None



   .. py:attribute:: source_expressions


   .. py:attribute:: extra


   .. py:method:: get_source_expressions()


   .. py:method:: set_source_expressions(exprs)


   .. py:method:: resolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)

      Provide the chance to do any preprocessing or validation before being
      added to the query.

      :param \* query: the backend query implementation
      :param \* allow_joins: boolean allowing or denying use of joins
                             in this query
      :param \* reuse: a set of reusable joins for multijoins
      :param \* summarize: a terminal aggregate clause
      :param \* for_save: whether this expression about to be used in a save or update

      Return: an Expression to be added to the query.



   .. py:method:: as_sql(compiler, connection, function=None, template=None, arg_joiner=None, **extra_context)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: copy()


.. py:class:: Value(value, output_field=None)

   Bases: :py:obj:`SQLiteNumericMixin`, :py:obj:`Expression`


   Represent a wrapped value as a node within an expression.


   .. py:attribute:: for_save
      :value: False



   .. py:attribute:: value


   .. py:method:: as_sql(compiler, connection)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: resolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)

      Provide the chance to do any preprocessing or validation before being
      added to the query.

      :param \* query: the backend query implementation
      :param \* allow_joins: boolean allowing or denying use of joins
                             in this query
      :param \* reuse: a set of reusable joins for multijoins
      :param \* summarize: a terminal aggregate clause
      :param \* for_save: whether this expression about to be used in a save or update

      Return: an Expression to be added to the query.



   .. py:method:: get_group_by_cols()


   .. py:property:: empty_result_set_value


.. py:class:: RawSQL(sql, params, output_field=None)

   Bases: :py:obj:`Expression`


   An expression that can be combined with other expressions.


   .. py:method:: as_sql(compiler, connection)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: get_group_by_cols()


   .. py:method:: resolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)

      Provide the chance to do any preprocessing or validation before being
      added to the query.

      :param \* query: the backend query implementation
      :param \* allow_joins: boolean allowing or denying use of joins
                             in this query
      :param \* reuse: a set of reusable joins for multijoins
      :param \* summarize: a terminal aggregate clause
      :param \* for_save: whether this expression about to be used in a save or update

      Return: an Expression to be added to the query.



.. py:class:: Star(output_field=None)

   Bases: :py:obj:`Expression`


   An expression that can be combined with other expressions.


   .. py:method:: as_sql(compiler, connection)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



.. py:class:: Col(alias, target, output_field=None)

   Bases: :py:obj:`Expression`


   An expression that can be combined with other expressions.


   .. py:attribute:: contains_column_references
      :value: True



   .. py:attribute:: possibly_multivalued
      :value: False



   .. py:method:: as_sql(compiler, connection)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: relabeled_clone(relabels)


   .. py:method:: get_group_by_cols()


   .. py:method:: get_db_converters(connection)


.. py:class:: Ref(refs, source)

   Bases: :py:obj:`Expression`


   Reference to column alias of the query. For example, Ref('sum_cost') in
   qs.annotate(sum_cost=Sum('cost')) query.


   .. py:method:: get_source_expressions()


   .. py:method:: set_source_expressions(exprs)


   .. py:method:: resolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)

      Provide the chance to do any preprocessing or validation before being
      added to the query.

      :param \* query: the backend query implementation
      :param \* allow_joins: boolean allowing or denying use of joins
                             in this query
      :param \* reuse: a set of reusable joins for multijoins
      :param \* summarize: a terminal aggregate clause
      :param \* for_save: whether this expression about to be used in a save or update

      Return: an Expression to be added to the query.



   .. py:method:: get_refs()


   .. py:method:: relabeled_clone(relabels)


   .. py:method:: as_sql(compiler, connection)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: get_group_by_cols()


.. py:class:: ExpressionList(*expressions, **extra)

   Bases: :py:obj:`Func`


   An expression containing multiple expressions. Can be used to provide a
   list of expressions as an argument to another expression, like a partition
   clause.


   .. py:attribute:: template
      :value: '%(expressions)s'



   .. py:method:: as_sqlite(compiler, connection, **extra_context)


   .. py:method:: get_group_by_cols()


.. py:class:: OrderByList(*expressions, **extra)

   Bases: :py:obj:`Func`


   An SQL function call.


   .. py:attribute:: template
      :value: 'ORDER BY %(expressions)s'



   .. py:method:: as_sql(*args, **kwargs)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: get_group_by_cols()


.. py:class:: ExpressionWrapper(expression, output_field)

   Bases: :py:obj:`SQLiteNumericMixin`, :py:obj:`Expression`


   An expression that can wrap another expression so that it can provide
   extra context to the inner expression, such as the output_field.


   .. py:attribute:: expression


   .. py:method:: set_source_expressions(exprs)


   .. py:method:: get_source_expressions()


   .. py:method:: get_group_by_cols()


   .. py:method:: as_sql(compiler, connection)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



.. py:class:: NegatedExpression(expression)

   Bases: :py:obj:`ExpressionWrapper`


   The logical negation of a conditional expression.


   .. py:method:: as_sql(compiler, connection)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: resolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)

      Provide the chance to do any preprocessing or validation before being
      added to the query.

      :param \* query: the backend query implementation
      :param \* allow_joins: boolean allowing or denying use of joins
                             in this query
      :param \* reuse: a set of reusable joins for multijoins
      :param \* summarize: a terminal aggregate clause
      :param \* for_save: whether this expression about to be used in a save or update

      Return: an Expression to be added to the query.



   .. py:method:: select_format(compiler, sql, params)

      Custom format for select clauses. For example, EXISTS expressions need
      to be wrapped in CASE WHEN on Oracle.



.. py:class:: When(condition=None, then=None, **lookups)

   Bases: :py:obj:`Expression`


   An expression that can be combined with other expressions.


   .. py:attribute:: template
      :value: 'WHEN %(condition)s THEN %(result)s'



   .. py:attribute:: conditional
      :value: False



   .. py:attribute:: condition
      :value: None



   .. py:attribute:: result


   .. py:method:: get_source_expressions()


   .. py:method:: set_source_expressions(exprs)


   .. py:method:: get_source_fields()

      Return the underlying field types used by this aggregate.



   .. py:method:: resolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)

      Provide the chance to do any preprocessing or validation before being
      added to the query.

      :param \* query: the backend query implementation
      :param \* allow_joins: boolean allowing or denying use of joins
                             in this query
      :param \* reuse: a set of reusable joins for multijoins
      :param \* summarize: a terminal aggregate clause
      :param \* for_save: whether this expression about to be used in a save or update

      Return: an Expression to be added to the query.



   .. py:method:: as_sql(compiler, connection, template=None, **extra_context)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: get_group_by_cols()


.. py:class:: Case(*cases, default=None, output_field=None, **extra)

   Bases: :py:obj:`SQLiteNumericMixin`, :py:obj:`Expression`


   An SQL searched CASE expression:

       CASE
           WHEN n > 0
               THEN 'positive'
           WHEN n < 0
               THEN 'negative'
           ELSE 'zero'
       END


   .. py:attribute:: template
      :value: 'CASE %(cases)s ELSE %(default)s END'



   .. py:attribute:: case_joiner
      :value: ' '



   .. py:attribute:: cases
      :value: []



   .. py:attribute:: default


   .. py:attribute:: extra


   .. py:method:: get_source_expressions()


   .. py:method:: set_source_expressions(exprs)


   .. py:method:: resolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)

      Provide the chance to do any preprocessing or validation before being
      added to the query.

      :param \* query: the backend query implementation
      :param \* allow_joins: boolean allowing or denying use of joins
                             in this query
      :param \* reuse: a set of reusable joins for multijoins
      :param \* summarize: a terminal aggregate clause
      :param \* for_save: whether this expression about to be used in a save or update

      Return: an Expression to be added to the query.



   .. py:method:: copy()


   .. py:method:: as_sql(compiler, connection, template=None, case_joiner=None, **extra_context)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: get_group_by_cols()


.. py:class:: Subquery(queryset, output_field=None, **extra)

   Bases: :py:obj:`BaseExpression`, :py:obj:`Combinable`


   An explicit subquery. It may contain OuterRef() references to the outer
   query which will be resolved when it is applied to that query.


   .. py:attribute:: template
      :value: '(%(subquery)s)'



   .. py:attribute:: contains_aggregate
      :value: False



   .. py:attribute:: empty_result_set_value
      :value: None



   .. py:attribute:: subquery
      :value: True



   .. py:attribute:: query


   .. py:attribute:: extra


   .. py:method:: get_source_expressions()


   .. py:method:: set_source_expressions(exprs)


   .. py:method:: copy()


   .. py:property:: external_aliases


   .. py:method:: get_external_cols()


   .. py:method:: as_sql(compiler, connection, template=None, **extra_context)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: get_group_by_cols()


.. py:class:: Exists(queryset, **kwargs)

   Bases: :py:obj:`Subquery`


   An explicit subquery. It may contain OuterRef() references to the outer
   query which will be resolved when it is applied to that query.


   .. py:attribute:: template
      :value: 'EXISTS(%(subquery)s)'



   .. py:attribute:: output_field

      Return the output type of this expressions.


   .. py:attribute:: empty_result_set_value
      :value: False



   .. py:attribute:: query


   .. py:method:: select_format(compiler, sql, params)

      Custom format for select clauses. For example, EXISTS expressions need
      to be wrapped in CASE WHEN on Oracle.



.. py:class:: OrderBy(expression, descending=False, nulls_first=None, nulls_last=None)

   Bases: :py:obj:`Expression`


   An expression that can be combined with other expressions.


   .. py:attribute:: template
      :value: '%(expression)s %(ordering)s'



   .. py:attribute:: conditional
      :value: False



   .. py:attribute:: nulls_first
      :value: None



   .. py:attribute:: nulls_last
      :value: None



   .. py:attribute:: descending
      :value: False



   .. py:attribute:: expression


   .. py:method:: set_source_expressions(exprs)


   .. py:method:: get_source_expressions()


   .. py:method:: as_sql(compiler, connection, template=None, **extra_context)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: as_oracle(compiler, connection)


   .. py:method:: get_group_by_cols()


   .. py:method:: reverse_ordering()


   .. py:method:: asc()


   .. py:method:: desc()


.. py:class:: Window(expression, partition_by=None, order_by=None, frame=None, output_field=None)

   Bases: :py:obj:`SQLiteNumericMixin`, :py:obj:`Expression`


   Some expressions with output_field=DecimalField() must be cast to
   numeric to be properly filtered.


   .. py:attribute:: template
      :value: '%(expression)s OVER (%(window)s)'



   .. py:attribute:: contains_aggregate
      :value: False



   .. py:attribute:: contains_over_clause
      :value: True



   .. py:attribute:: partition_by
      :value: None



   .. py:attribute:: order_by
      :value: None



   .. py:attribute:: frame
      :value: None



   .. py:attribute:: source_expression


   .. py:method:: get_source_expressions()


   .. py:method:: set_source_expressions(exprs)


   .. py:method:: as_sql(compiler, connection, template=None)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: as_sqlite(compiler, connection)


   .. py:method:: get_group_by_cols()


.. py:class:: WindowFrame(start=None, end=None)

   Bases: :py:obj:`Expression`


   Model the frame clause in window expressions. There are two types of frame
   clauses which are subclasses, however, all processing and validation (by no
   means intended to be complete) is done here. Thus, providing an end for a
   frame is optional (the default is UNBOUNDED FOLLOWING, which is the last
   row in the frame).


   .. py:attribute:: template
      :value: '%(frame_type)s BETWEEN %(start)s AND %(end)s'



   .. py:attribute:: start


   .. py:attribute:: end


   .. py:method:: set_source_expressions(exprs)


   .. py:method:: get_source_expressions()


   .. py:method:: as_sql(compiler, connection)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: get_group_by_cols()


   .. py:method:: window_frame_start_end(connection, start, end)
      :abstractmethod:



.. py:class:: RowRange(start=None, end=None)

   Bases: :py:obj:`WindowFrame`


   Model the frame clause in window expressions. There are two types of frame
   clauses which are subclasses, however, all processing and validation (by no
   means intended to be complete) is done here. Thus, providing an end for a
   frame is optional (the default is UNBOUNDED FOLLOWING, which is the last
   row in the frame).


   .. py:attribute:: frame_type
      :value: 'ROWS'



   .. py:method:: window_frame_start_end(connection, start, end)


.. py:class:: ValueRange(start=None, end=None)

   Bases: :py:obj:`WindowFrame`


   Model the frame clause in window expressions. There are two types of frame
   clauses which are subclasses, however, all processing and validation (by no
   means intended to be complete) is done here. Thus, providing an end for a
   frame is optional (the default is UNBOUNDED FOLLOWING, which is the last
   row in the frame).


   .. py:attribute:: frame_type
      :value: 'RANGE'



   .. py:method:: window_frame_start_end(connection, start, end)


