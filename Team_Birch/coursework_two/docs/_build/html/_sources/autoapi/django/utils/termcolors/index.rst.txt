django.utils.termcolors
=======================

.. py:module:: django.utils.termcolors

.. autoapi-nested-parse::

   termcolors.py



Attributes
----------

.. autoapisummary::

   django.utils.termcolors.color_names
   django.utils.termcolors.foreground
   django.utils.termcolors.background
   django.utils.termcolors.RESET
   django.utils.termcolors.opt_dict
   django.utils.termcolors.NOCOLOR_PALETTE
   django.utils.termcolors.DARK_PALETTE
   django.utils.termcolors.LIGHT_PALETTE
   django.utils.termcolors.PALETTES
   django.utils.termcolors.DEFAULT_PALETTE


Functions
---------

.. autoapisummary::

   django.utils.termcolors.colorize
   django.utils.termcolors.make_style
   django.utils.termcolors.parse_color_setting


Module Contents
---------------

.. py:data:: color_names
   :value: ('black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white')


.. py:data:: foreground

.. py:data:: background

.. py:data:: RESET
   :value: '0'


.. py:data:: opt_dict

.. py:function:: colorize(text='', opts=(), **kwargs)

   Return your text, enclosed in ANSI graphics codes.

   Depends on the keyword arguments 'fg' and 'bg', and the contents of
   the opts tuple/list.

   Return the RESET code if no parameters are given.

   Valid colors:
       'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white'

   Valid options:
       'bold'
       'underscore'
       'blink'
       'reverse'
       'conceal'
       'noreset' - string will not be auto-terminated with the RESET code

   .. rubric:: Examples

   colorize('hello', fg='red', bg='blue', opts=('blink',))
   colorize()
   colorize('goodbye', opts=('underscore',))
   print(colorize('first line', fg='red', opts=('noreset',)))
   print('this should be red too')
   print(colorize('and so should this'))
   print('this should not be red')


.. py:function:: make_style(opts=(), **kwargs)

   Return a function with default parameters for colorize()

   .. rubric:: Example

   bold_red = make_style(opts=('bold',), fg='red')
   print(bold_red('hello'))
   KEYWORD = make_style(fg='yellow')
   COMMENT = make_style(fg='blue', opts=('bold',))


.. py:data:: NOCOLOR_PALETTE
   :value: 'nocolor'


.. py:data:: DARK_PALETTE
   :value: 'dark'


.. py:data:: LIGHT_PALETTE
   :value: 'light'


.. py:data:: PALETTES

.. py:data:: DEFAULT_PALETTE
   :value: 'dark'


.. py:function:: parse_color_setting(config_string)

   Parse a DJANGO_COLORS environment variable to produce the system palette

   The general form of a palette definition is:

       "palette;role=fg;role=fg/bg;role=fg,option,option;role=fg/bg,option,option"

   where:
       palette is a named palette; one of 'light', 'dark', or 'nocolor'.
       role is a named style used by Django
       fg is a foreground color.
       bg is a background color.
       option is a display options.

   Specifying a named palette is the same as manually specifying the individual
   definitions for each role. Any individual definitions following the palette
   definition will augment the base palette definition.

   Valid roles:
       'error', 'success', 'warning', 'notice', 'sql_field', 'sql_coltype',
       'sql_keyword', 'sql_table', 'http_info', 'http_success',
       'http_redirect', 'http_not_modified', 'http_bad_request',
       'http_not_found', 'http_server_error', 'migrate_heading',
       'migrate_label'

   Valid colors:
       'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white'

   Valid options:
       'bold', 'underscore', 'blink', 'reverse', 'conceal', 'noreset'


