django.contrib.postgres.search
==============================

.. py:module:: django.contrib.postgres.search


Classes
-------

.. autoapisummary::

   django.contrib.postgres.search.SearchVectorExact
   django.contrib.postgres.search.SearchVectorField
   django.contrib.postgres.search.SearchQueryField
   django.contrib.postgres.search.SearchConfig
   django.contrib.postgres.search.SearchVectorCombinable
   django.contrib.postgres.search.SearchVector
   django.contrib.postgres.search.CombinedSearchVector
   django.contrib.postgres.search.SearchQueryCombinable
   django.contrib.postgres.search.SearchQuery
   django.contrib.postgres.search.CombinedSearchQuery
   django.contrib.postgres.search.SearchRank
   django.contrib.postgres.search.SearchHeadline
   django.contrib.postgres.search.TrigramBase
   django.contrib.postgres.search.TrigramWordBase
   django.contrib.postgres.search.TrigramSimilarity
   django.contrib.postgres.search.TrigramDistance
   django.contrib.postgres.search.TrigramWordDistance
   django.contrib.postgres.search.TrigramStrictWordDistance
   django.contrib.postgres.search.TrigramWordSimilarity
   django.contrib.postgres.search.TrigramStrictWordSimilarity


Module Contents
---------------

.. py:class:: SearchVectorExact

   Bases: :py:obj:`django.db.models.Lookup`


   .. py:attribute:: lookup_name
      :value: 'exact'



   .. py:method:: process_rhs(qn, connection)


   .. py:method:: as_sql(qn, connection)


.. py:class:: SearchVectorField

   Bases: :py:obj:`django.db.models.Field`


   .. py:method:: db_type(connection)


.. py:class:: SearchQueryField

   Bases: :py:obj:`django.db.models.Field`


   .. py:method:: db_type(connection)


.. py:class:: SearchConfig(config)

   Bases: :py:obj:`django.db.models.Expression`


   .. py:attribute:: config


   .. py:method:: from_parameter(config)
      :classmethod:



   .. py:method:: get_source_expressions()


   .. py:method:: set_source_expressions(exprs)


   .. py:method:: as_sql(compiler, connection)


.. py:class:: SearchVectorCombinable

   .. py:attribute:: ADD
      :value: '||'



.. py:class:: SearchVector(*expressions, config=None, weight=None)

   Bases: :py:obj:`SearchVectorCombinable`, :py:obj:`django.db.models.Func`


   .. py:attribute:: function
      :value: 'to_tsvector'



   .. py:attribute:: arg_joiner
      :value: " || ' ' || "



   .. py:attribute:: output_field


   .. py:attribute:: config
      :value: None



   .. py:attribute:: weight
      :value: None



   .. py:method:: resolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)


   .. py:method:: as_sql(compiler, connection, function=None, template=None)


.. py:class:: CombinedSearchVector(lhs, connector, rhs, config, output_field=None)

   Bases: :py:obj:`SearchVectorCombinable`, :py:obj:`django.db.models.expressions.CombinedExpression`


   .. py:attribute:: config


.. py:class:: SearchQueryCombinable

   .. py:attribute:: BITAND
      :value: '&&'



   .. py:attribute:: BITOR
      :value: '||'



.. py:class:: SearchQuery(value, output_field=None, *, config=None, invert=False, search_type='plain')

   Bases: :py:obj:`SearchQueryCombinable`, :py:obj:`django.db.models.Func`


   .. py:attribute:: output_field


   .. py:attribute:: SEARCH_TYPES


   .. py:attribute:: function


   .. py:attribute:: config
      :value: None



   .. py:attribute:: invert
      :value: False



   .. py:method:: as_sql(compiler, connection, function=None, template=None)


.. py:class:: CombinedSearchQuery(lhs, connector, rhs, config, output_field=None)

   Bases: :py:obj:`SearchQueryCombinable`, :py:obj:`django.db.models.expressions.CombinedExpression`


   .. py:attribute:: config


.. py:class:: SearchRank(vector, query, weights=None, normalization=None, cover_density=False)

   Bases: :py:obj:`django.db.models.Func`


   .. py:attribute:: function
      :value: 'ts_rank'



   .. py:attribute:: output_field


.. py:class:: SearchHeadline(expression, query, *, config=None, start_sel=None, stop_sel=None, max_words=None, min_words=None, short_word=None, highlight_all=None, max_fragments=None, fragment_delimiter=None)

   Bases: :py:obj:`django.db.models.Func`


   .. py:attribute:: function
      :value: 'ts_headline'



   .. py:attribute:: template
      :value: '%(function)s(%(expressions)s%(options)s)'



   .. py:attribute:: output_field


   .. py:attribute:: options


   .. py:method:: as_sql(compiler, connection, function=None, template=None)


.. py:class:: TrigramBase(expression, string, **extra)

   Bases: :py:obj:`django.db.models.Func`


   .. py:attribute:: output_field


.. py:class:: TrigramWordBase(string, expression, **extra)

   Bases: :py:obj:`django.db.models.Func`


   .. py:attribute:: output_field


.. py:class:: TrigramSimilarity(expression, string, **extra)

   Bases: :py:obj:`TrigramBase`


   .. py:attribute:: function
      :value: 'SIMILARITY'



.. py:class:: TrigramDistance(expression, string, **extra)

   Bases: :py:obj:`TrigramBase`


   .. py:attribute:: function
      :value: ''



   .. py:attribute:: arg_joiner
      :value: ' <-> '



.. py:class:: TrigramWordDistance(string, expression, **extra)

   Bases: :py:obj:`TrigramWordBase`


   .. py:attribute:: function
      :value: ''



   .. py:attribute:: arg_joiner
      :value: ' <<-> '



.. py:class:: TrigramStrictWordDistance(string, expression, **extra)

   Bases: :py:obj:`TrigramWordBase`


   .. py:attribute:: function
      :value: ''



   .. py:attribute:: arg_joiner
      :value: ' <<<-> '



.. py:class:: TrigramWordSimilarity(string, expression, **extra)

   Bases: :py:obj:`TrigramWordBase`


   .. py:attribute:: function
      :value: 'WORD_SIMILARITY'



.. py:class:: TrigramStrictWordSimilarity(string, expression, **extra)

   Bases: :py:obj:`TrigramWordBase`


   .. py:attribute:: function
      :value: 'STRICT_WORD_SIMILARITY'



