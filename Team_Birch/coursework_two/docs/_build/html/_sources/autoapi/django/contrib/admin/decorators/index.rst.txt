django.contrib.admin.decorators
===============================

.. py:module:: django.contrib.admin.decorators


Functions
---------

.. autoapisummary::

   django.contrib.admin.decorators.action
   django.contrib.admin.decorators.display
   django.contrib.admin.decorators.register


Module Contents
---------------

.. py:function:: action(function=None, *, permissions=None, description=None)

   Conveniently add attributes to an action function::

       @admin.action(
           permissions=['publish'],
           description='Mark selected stories as published',
       )
       def make_published(self, request, queryset):
           queryset.update(status='p')

   This is equivalent to setting some attributes (with the original, longer
   names) on the function directly::

       def make_published(self, request, queryset):
           queryset.update(status='p')
       make_published.allowed_permissions = ['publish']
       make_published.short_description = 'Mark selected stories as published'


.. py:function:: display(function=None, *, boolean=None, ordering=None, description=None, empty_value=None)

   Conveniently add attributes to a display function::

       @admin.display(
           boolean=True,
           ordering='-publish_date',
           description='Is Published?',
       )
       def is_published(self, obj):
           return obj.publish_date is not None

   This is equivalent to setting some attributes (with the original, longer
   names) on the function directly::

       def is_published(self, obj):
           return obj.publish_date is not None
       is_published.boolean = True
       is_published.admin_order_field = '-publish_date'
       is_published.short_description = 'Is Published?'


.. py:function:: register(*models, site=None)

   Register the given model(s) classes and wrapped ModelAdmin class with
   admin site:

   @register(Author)
   class AuthorAdmin(admin.ModelAdmin):
       pass

   The `site` kwarg is an admin site to use instead of the default admin site.


