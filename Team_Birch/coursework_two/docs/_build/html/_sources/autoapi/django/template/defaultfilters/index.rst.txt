django.template.defaultfilters
==============================

.. py:module:: django.template.defaultfilters

.. autoapi-nested-parse::

   Default variable filters.



Attributes
----------

.. autoapisummary::

   django.template.defaultfilters.register


Functions
---------

.. autoapisummary::

   django.template.defaultfilters.stringfilter
   django.template.defaultfilters.addslashes
   django.template.defaultfilters.capfirst
   django.template.defaultfilters.escapejs_filter
   django.template.defaultfilters.json_script
   django.template.defaultfilters.floatformat
   django.template.defaultfilters.iriencode
   django.template.defaultfilters.linenumbers
   django.template.defaultfilters.lower
   django.template.defaultfilters.make_list
   django.template.defaultfilters.slugify
   django.template.defaultfilters.stringformat
   django.template.defaultfilters.title
   django.template.defaultfilters.truncatechars
   django.template.defaultfilters.truncatechars_html
   django.template.defaultfilters.truncatewords
   django.template.defaultfilters.truncatewords_html
   django.template.defaultfilters.upper
   django.template.defaultfilters.urlencode
   django.template.defaultfilters.urlize
   django.template.defaultfilters.urlizetrunc
   django.template.defaultfilters.wordcount
   django.template.defaultfilters.wordwrap
   django.template.defaultfilters.ljust
   django.template.defaultfilters.rjust
   django.template.defaultfilters.center
   django.template.defaultfilters.cut
   django.template.defaultfilters.escape_filter
   django.template.defaultfilters.force_escape
   django.template.defaultfilters.linebreaks_filter
   django.template.defaultfilters.linebreaksbr
   django.template.defaultfilters.safe
   django.template.defaultfilters.safeseq
   django.template.defaultfilters.striptags
   django.template.defaultfilters.dictsort
   django.template.defaultfilters.dictsortreversed
   django.template.defaultfilters.first
   django.template.defaultfilters.join
   django.template.defaultfilters.last
   django.template.defaultfilters.length
   django.template.defaultfilters.length_is
   django.template.defaultfilters.random
   django.template.defaultfilters.slice_filter
   django.template.defaultfilters.unordered_list
   django.template.defaultfilters.add
   django.template.defaultfilters.get_digit
   django.template.defaultfilters.date
   django.template.defaultfilters.time
   django.template.defaultfilters.timesince_filter
   django.template.defaultfilters.timeuntil_filter
   django.template.defaultfilters.default
   django.template.defaultfilters.default_if_none
   django.template.defaultfilters.divisibleby
   django.template.defaultfilters.yesno
   django.template.defaultfilters.filesizeformat
   django.template.defaultfilters.pluralize
   django.template.defaultfilters.phone2numeric_filter
   django.template.defaultfilters.pprint


Module Contents
---------------

.. py:data:: register

.. py:function:: stringfilter(func)

   Decorator for filters which should only receive strings. The object
   passed as the first positional argument will be converted to a string.


.. py:function:: addslashes(value)

   Add slashes before quotes. Useful for escaping strings in CSV, for
   example. Less useful for escaping JavaScript; use the ``escapejs``
   filter instead.


.. py:function:: capfirst(value)

   Capitalize the first character of the value.


.. py:function:: escapejs_filter(value)

   Hex encode characters for use in JavaScript strings.


.. py:function:: json_script(value, element_id=None)

   Output value JSON-encoded, wrapped in a <script type="application/json">
   tag (with an optional id).


.. py:function:: floatformat(text, arg=-1)

   Display a float to a specified number of decimal places.

   If called without an argument, display the floating point number with one
   decimal place -- but only if there's a decimal place to be displayed:

   * num1 = 34.23234
   * num2 = 34.00000
   * num3 = 34.26000
   * {{ num1|floatformat }} displays "34.2"
   * {{ num2|floatformat }} displays "34"
   * {{ num3|floatformat }} displays "34.3"

   If arg is positive, always display exactly arg number of decimal places:

   * {{ num1|floatformat:3 }} displays "34.232"
   * {{ num2|floatformat:3 }} displays "34.000"
   * {{ num3|floatformat:3 }} displays "34.260"

   If arg is negative, display arg number of decimal places -- but only if
   there are places to be displayed:

   * {{ num1|floatformat:"-3" }} displays "34.232"
   * {{ num2|floatformat:"-3" }} displays "34"
   * {{ num3|floatformat:"-3" }} displays "34.260"

   If arg has the 'g' suffix, force the result to be grouped by the
   THOUSAND_SEPARATOR for the active locale. When the active locale is
   en (English):

   * {{ 6666.6666|floatformat:"2g" }} displays "6,666.67"
   * {{ 10000|floatformat:"g" }} displays "10,000"

   If arg has the 'u' suffix, force the result to be unlocalized. When the
   active locale is pl (Polish):

   * {{ 66666.6666|floatformat:"2" }} displays "66666,67"
   * {{ 66666.6666|floatformat:"2u" }} displays "66666.67"

   If the input float is infinity or NaN, display the string representation
   of that value.


.. py:function:: iriencode(value)

   Escape an IRI value for use in a URL.


.. py:function:: linenumbers(value, autoescape=True)

   Display text with line numbers.


.. py:function:: lower(value)

   Convert a string into all lowercase.


.. py:function:: make_list(value)

   Return the value turned into a list.

   For an integer, it's a list of digits.
   For a string, it's a list of characters.


.. py:function:: slugify(value)

   Convert to ASCII. Convert spaces to hyphens. Remove characters that aren't
   alphanumerics, underscores, or hyphens. Convert to lowercase. Also strip
   leading and trailing whitespace.


.. py:function:: stringformat(value, arg)

   Format the variable according to the arg, a string formatting specifier.

   This specifier uses Python string formatting syntax, with the exception
   that the leading "%" is dropped.

   See https://docs.python.org/library/stdtypes.html#printf-style-string-formatting
   for documentation of Python string formatting.


.. py:function:: title(value)

   Convert a string into titlecase.


.. py:function:: truncatechars(value, arg)

   Truncate a string after `arg` number of characters.


.. py:function:: truncatechars_html(value, arg)

   Truncate HTML after `arg` number of chars.
   Preserve newlines in the HTML.


.. py:function:: truncatewords(value, arg)

   Truncate a string after `arg` number of words.
   Remove newlines within the string.


.. py:function:: truncatewords_html(value, arg)

   Truncate HTML after `arg` number of words.
   Preserve newlines in the HTML.


.. py:function:: upper(value)

   Convert a string into all uppercase.


.. py:function:: urlencode(value, safe=None)

   Escape a value for use in a URL.

   The ``safe`` parameter determines the characters which should not be
   escaped by Python's quote() function. If not provided, use the default safe
   characters (but an empty string can be provided when *all* characters
   should be escaped).


.. py:function:: urlize(value, autoescape=True)

   Convert URLs in plain text into clickable links.


.. py:function:: urlizetrunc(value, limit, autoescape=True)

   Convert URLs into clickable links, truncating URLs to the given character
   limit, and adding 'rel=nofollow' attribute to discourage spamming.

   Argument: Length to truncate URLs to.


.. py:function:: wordcount(value)

   Return the number of words.


.. py:function:: wordwrap(value, arg)

   Wrap words at `arg` line length.


.. py:function:: ljust(value, arg)

   Left-align the value in a field of a given width.


.. py:function:: rjust(value, arg)

   Right-align the value in a field of a given width.


.. py:function:: center(value, arg)

   Center the value in a field of a given width.


.. py:function:: cut(value, arg)

   Remove all values of arg from the given string.


.. py:function:: escape_filter(value)

   Mark the value as a string that should be auto-escaped.


.. py:function:: force_escape(value)

   Escape a string's HTML. Return a new string containing the escaped
   characters (as opposed to "escape", which marks the content for later
   possible escaping).


.. py:function:: linebreaks_filter(value, autoescape=True)

   Replace line breaks in plain text with appropriate HTML; a single
   newline becomes an HTML line break (``<br>``) and a new line
   followed by a blank line becomes a paragraph break (``</p>``).


.. py:function:: linebreaksbr(value, autoescape=True)

   Convert all newlines in a piece of plain text to HTML line breaks
   (``<br>``).


.. py:function:: safe(value)

   Mark the value as a string that should not be auto-escaped.


.. py:function:: safeseq(value)

   A "safe" filter for sequences. Mark each element in the sequence,
   individually, as safe, after converting them to strings. Return a list
   with the results.


.. py:function:: striptags(value)

   Strip all [X]HTML tags.


.. py:function:: dictsort(value, arg)

   Given a list of dicts, return that list sorted by the property given in
   the argument.


.. py:function:: dictsortreversed(value, arg)

   Given a list of dicts, return that list sorted in reverse order by the
   property given in the argument.


.. py:function:: first(value)

   Return the first item in a list.


.. py:function:: join(value, arg, autoescape=True)

   Join a list with a string, like Python's ``str.join(list)``.


.. py:function:: last(value)

   Return the last item in a list.


.. py:function:: length(value)

   Return the length of the value - useful for lists.


.. py:function:: length_is(value, arg)

   Return a boolean of whether the value's length is the argument.


.. py:function:: random(value)

   Return a random item from the list.


.. py:function:: slice_filter(value, arg)

   Return a slice of the list using the same syntax as Python's list slicing.


.. py:function:: unordered_list(value, autoescape=True)

   Recursively take a self-nested list and return an HTML unordered list --
   WITHOUT opening and closing <ul> tags.

   Assume the list is in the proper format. For example, if ``var`` contains:
   ``['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]``, then
   ``{{ var|unordered_list }}`` returns::

       <li>States
       <ul>
               <li>Kansas
               <ul>
                       <li>Lawrence</li>
                       <li>Topeka</li>
               </ul>
               </li>
               <li>Illinois</li>
       </ul>
       </li>


.. py:function:: add(value, arg)

   Add the arg to the value.


.. py:function:: get_digit(value, arg)

   Given a whole number, return the requested digit of it, where 1 is the
   right-most digit, 2 is the second-right-most digit, etc. Return the
   original value for invalid input (if input or argument is not an integer,
   or if argument is less than 1). Otherwise, output is always an integer.


.. py:function:: date(value, arg=None)

   Format a date according to the given format.


.. py:function:: time(value, arg=None)

   Format a time according to the given format.


.. py:function:: timesince_filter(value, arg=None)

   Format a date as the time since that date (i.e. "4 days, 6 hours").


.. py:function:: timeuntil_filter(value, arg=None)

   Format a date as the time until that date (i.e. "4 days, 6 hours").


.. py:function:: default(value, arg)

   If value is unavailable, use given default.


.. py:function:: default_if_none(value, arg)

   If value is None, use given default.


.. py:function:: divisibleby(value, arg)

   Return True if the value is divisible by the argument.


.. py:function:: yesno(value, arg=None)

   Given a string mapping values for true, false, and (optionally) None,
   return one of those strings according to the value:

   ==========  ======================  ==================================
   Value       Argument                Outputs
   ==========  ======================  ==================================
   ``True``    ``"yeah,no,maybe"``     ``yeah``
   ``False``   ``"yeah,no,maybe"``     ``no``
   ``None``    ``"yeah,no,maybe"``     ``maybe``
   ``None``    ``"yeah,no"``           ``"no"`` (converts None to False
                                       if no mapping for None is given.
   ==========  ======================  ==================================


.. py:function:: filesizeformat(bytes_)

   Format the value like a 'human-readable' file size (i.e. 13 KB, 4.1 MB,
   102 bytes, etc.).


.. py:function:: pluralize(value, arg='s')

   Return a plural suffix if the value is not 1, '1', or an object of
   length 1. By default, use 's' as the suffix:

   * If value is 0, vote{{ value|pluralize }} display "votes".
   * If value is 1, vote{{ value|pluralize }} display "vote".
   * If value is 2, vote{{ value|pluralize }} display "votes".

   If an argument is provided, use that string instead:

   * If value is 0, class{{ value|pluralize:"es" }} display "classes".
   * If value is 1, class{{ value|pluralize:"es" }} display "class".
   * If value is 2, class{{ value|pluralize:"es" }} display "classes".

   If the provided argument contains a comma, use the text before the comma
   for the singular case and the text after the comma for the plural case:

   * If value is 0, cand{{ value|pluralize:"y,ies" }} display "candies".
   * If value is 1, cand{{ value|pluralize:"y,ies" }} display "candy".
   * If value is 2, cand{{ value|pluralize:"y,ies" }} display "candies".


.. py:function:: phone2numeric_filter(value)

   Take a phone number and converts it in to its numerical equivalent.


.. py:function:: pprint(value)

   A wrapper around pprint.pprint -- for debugging, really.


