django.template.library
=======================

.. py:module:: django.template.library


Exceptions
----------

.. autoapisummary::

   django.template.library.InvalidTemplateLibrary


Classes
-------

.. autoapisummary::

   django.template.library.Library
   django.template.library.TagHelperNode
   django.template.library.SimpleNode
   django.template.library.InclusionNode


Functions
---------

.. autoapisummary::

   django.template.library.parse_bits
   django.template.library.import_library


Module Contents
---------------

.. py:exception:: InvalidTemplateLibrary

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


.. py:class:: Library

   A class for registering template tags and filters. Compiled filter and
   template tag functions are stored in the filters and tags attributes.
   The filter, simple_tag, and inclusion_tag methods provide a convenient
   way to register callables as tags.


   .. py:attribute:: filters


   .. py:attribute:: tags


   .. py:method:: tag(name=None, compile_function=None)


   .. py:method:: tag_function(func)


   .. py:method:: filter(name=None, filter_func=None, **flags)

      Register a callable as a template filter. Example:

      @register.filter
      def lower(value):
          return value.lower()



   .. py:method:: filter_function(func, **flags)


   .. py:method:: simple_tag(func=None, takes_context=None, name=None)

      Register a callable as a compiled template tag. Example:

      @register.simple_tag
      def hello(*args, **kwargs):
          return 'world'



   .. py:method:: inclusion_tag(filename, func=None, takes_context=None, name=None)

      Register a callable as an inclusion tag:

      @register.inclusion_tag('results.html')
      def show_results(poll):
          choices = poll.choice_set.all()
          return {'choices': choices}



.. py:class:: TagHelperNode(func, takes_context, args, kwargs)

   Bases: :py:obj:`django.template.base.Node`


   Base class for tag helper nodes such as SimpleNode and InclusionNode.
   Manages the positional and keyword arguments to be passed to the decorated
   function.


   .. py:attribute:: func


   .. py:attribute:: takes_context


   .. py:attribute:: args


   .. py:attribute:: kwargs


   .. py:method:: get_resolved_arguments(context)


.. py:class:: SimpleNode(func, takes_context, args, kwargs, target_var)

   Bases: :py:obj:`TagHelperNode`


   Base class for tag helper nodes such as SimpleNode and InclusionNode.
   Manages the positional and keyword arguments to be passed to the decorated
   function.


   .. py:attribute:: child_nodelists
      :value: ()



   .. py:attribute:: target_var


   .. py:method:: render(context)


.. py:class:: InclusionNode(func, takes_context, args, kwargs, filename)

   Bases: :py:obj:`TagHelperNode`


   Base class for tag helper nodes such as SimpleNode and InclusionNode.
   Manages the positional and keyword arguments to be passed to the decorated
   function.


   .. py:attribute:: filename


   .. py:method:: render(context)

      Render the specified template and context. Cache the template object
      in render_context to avoid reparsing and loading when used in a for
      loop.



.. py:function:: parse_bits(parser, bits, params, varargs, varkw, defaults, kwonly, kwonly_defaults, takes_context, name)

   Parse bits for template tag helpers simple_tag and inclusion_tag, in
   particular by detecting syntax errors and by extracting positional and
   keyword arguments.


.. py:function:: import_library(name)

   Load a Library object from a template tag module.


