django.db.backends.oracle.operations
====================================

.. py:module:: django.db.backends.oracle.operations


Classes
-------

.. autoapisummary::

   django.db.backends.oracle.operations.DatabaseOperations


Module Contents
---------------

.. py:class:: DatabaseOperations

   Bases: :py:obj:`django.db.backends.base.operations.BaseDatabaseOperations`


   .. py:attribute:: integer_field_ranges


   .. py:attribute:: set_operators


   .. py:attribute:: cast_char_field_without_max_length
      :value: 'NVARCHAR2(2000)'



   .. py:attribute:: cast_data_types


   .. py:method:: cache_key_culling_sql()


   .. py:method:: date_extract_sql(lookup_type, sql, params)


   .. py:method:: date_trunc_sql(lookup_type, sql, params, tzname=None)


   .. py:method:: datetime_cast_date_sql(sql, params, tzname)


   .. py:method:: datetime_cast_time_sql(sql, params, tzname)


   .. py:method:: datetime_extract_sql(lookup_type, sql, params, tzname)


   .. py:method:: datetime_trunc_sql(lookup_type, sql, params, tzname)


   .. py:method:: time_trunc_sql(lookup_type, sql, params, tzname=None)


   .. py:method:: get_db_converters(expression)


   .. py:method:: convert_textfield_value(value, expression, connection)


   .. py:method:: convert_binaryfield_value(value, expression, connection)


   .. py:method:: convert_booleanfield_value(value, expression, connection)


   .. py:method:: convert_datetimefield_value(value, expression, connection)


   .. py:method:: convert_datefield_value(value, expression, connection)


   .. py:method:: convert_timefield_value(value, expression, connection)


   .. py:method:: convert_uuidfield_value(value, expression, connection)


   .. py:method:: convert_empty_string(value, expression, connection)
      :staticmethod:



   .. py:method:: convert_empty_bytes(value, expression, connection)
      :staticmethod:



   .. py:method:: deferrable_sql()


   .. py:method:: fetch_returned_insert_columns(cursor, returning_params)


   .. py:method:: no_limit_value()


   .. py:method:: limit_offset_sql(low_mark, high_mark)


   .. py:method:: last_executed_query(cursor, sql, params)


   .. py:method:: last_insert_id(cursor, table_name, pk_name)


   .. py:method:: lookup_cast(lookup_type, internal_type=None)


   .. py:method:: max_in_list_size()


   .. py:method:: max_name_length()


   .. py:method:: pk_default_value()


   .. py:method:: prep_for_iexact_query(x)


   .. py:method:: process_clob(value)


   .. py:method:: quote_name(name)


   .. py:method:: regex_lookup(lookup_type)


   .. py:method:: return_insert_columns(fields)


   .. py:method:: sql_flush(style, tables, *, reset_sequences=False, allow_cascade=False)


   .. py:method:: sequence_reset_by_name_sql(style, sequences)


   .. py:method:: sequence_reset_sql(style, model_list)


   .. py:method:: start_transaction_sql()


   .. py:method:: tablespace_sql(tablespace, inline=False)


   .. py:method:: adapt_datefield_value(value)

      Transform a date value to an object compatible with what is expected
      by the backend driver for date columns.
      The default implementation transforms the date to text, but that is not
      necessary for Oracle.



   .. py:method:: adapt_datetimefield_value(value)

      Transform a datetime value to an object compatible with what is expected
      by the backend driver for datetime columns.

      If naive datetime is passed assumes that is in UTC. Normally Django
      models.DateTimeField makes sure that if USE_TZ is True passed datetime
      is timezone aware.



   .. py:method:: adapt_timefield_value(value)


   .. py:method:: adapt_decimalfield_value(value, max_digits=None, decimal_places=None)


   .. py:method:: combine_expression(connector, sub_expressions)


   .. py:method:: bulk_insert_sql(fields, placeholder_rows)


   .. py:method:: subtract_temporals(internal_type, lhs, rhs)


   .. py:method:: bulk_batch_size(fields, objs)

      Oracle restricts the number of parameters in a query.



   .. py:method:: conditional_expression_supported_in_where_clause(expression)

      Oracle supports only EXISTS(...) or filters in the WHERE clause, others
      must be compared with True.



