django.contrib.gis.utils.layermapping
=====================================

.. py:module:: django.contrib.gis.utils.layermapping

.. autoapi-nested-parse::

   The LayerMapping class provides a way to map the contents of OGR
   vector files (e.g. SHP files) to Geographic-enabled Django models.

   For more information, please consult the GeoDjango documentation:
     https://docs.djangoproject.com/en/dev/ref/contrib/gis/layermapping/



Exceptions
----------

.. autoapisummary::

   django.contrib.gis.utils.layermapping.LayerMapError
   django.contrib.gis.utils.layermapping.InvalidString
   django.contrib.gis.utils.layermapping.InvalidDecimal
   django.contrib.gis.utils.layermapping.InvalidInteger
   django.contrib.gis.utils.layermapping.MissingForeignKey


Classes
-------

.. autoapisummary::

   django.contrib.gis.utils.layermapping.LayerMapping


Module Contents
---------------

.. py:exception:: LayerMapError

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


.. py:exception:: InvalidString

   Bases: :py:obj:`LayerMapError`


   Common base class for all non-exit exceptions.


.. py:exception:: InvalidDecimal

   Bases: :py:obj:`LayerMapError`


   Common base class for all non-exit exceptions.


.. py:exception:: InvalidInteger

   Bases: :py:obj:`LayerMapError`


   Common base class for all non-exit exceptions.


.. py:exception:: MissingForeignKey

   Bases: :py:obj:`LayerMapError`


   Common base class for all non-exit exceptions.


.. py:class:: LayerMapping(model, data, mapping, layer=0, source_srs=None, encoding='utf-8', transaction_mode='commit_on_success', transform=True, unique=None, using=None)

   A class that maps OGR Layers to GeoDjango Models.


   .. py:attribute:: MULTI_TYPES


   .. py:attribute:: FIELD_TYPES


   .. py:attribute:: layer


   .. py:attribute:: using
      :value: None



   .. py:attribute:: spatial_backend


   .. py:attribute:: mapping


   .. py:attribute:: model


   .. py:attribute:: transaction_mode
      :value: 'commit_on_success'



   .. py:method:: check_fid_range(fid_range)

      Check the `fid_range` keyword.



   .. py:method:: check_layer()

      Check the Layer metadata and ensure that it's compatible with the
      mapping information and model. Unlike previous revisions, there is no
      need to increment through each feature in the Layer.



   .. py:method:: check_srs(source_srs)

      Check the compatibility of the given spatial reference object.



   .. py:method:: check_unique(unique)

      Check the `unique` keyword parameter -- may be a sequence or string.



   .. py:method:: feature_kwargs(feat)

      Given an OGR Feature, return a dictionary of keyword arguments for
      constructing the mapped model.



   .. py:method:: unique_kwargs(kwargs)

      Given the feature keyword arguments (from `feature_kwargs`), construct
      and return the uniqueness keyword arguments -- a subset of the feature
      kwargs.



   .. py:method:: verify_ogr_field(ogr_field, model_field)

      Verify if the OGR Field contents are acceptable to the model field. If
      they are, return the verified value, otherwise raise an exception.



   .. py:method:: verify_fk(feat, rel_model, rel_mapping)

      Given an OGR Feature, the related model and its dictionary mapping,
      retrieve the related model for the ForeignKey mapping.



   .. py:method:: verify_geom(geom, model_field)

      Verify the geometry -- construct and return a GeometryCollection
      if necessary (for example if the model field is MultiPolygonField while
      the mapped shapefile only contains Polygons).



   .. py:method:: coord_transform()

      Return the coordinate transformation object.



   .. py:method:: geometry_field()

      Return the GeometryField instance associated with the geographic column.



   .. py:method:: make_multi(geom_type, model_field)

      Given the OGRGeomType for a geometry and its associated GeometryField,
      determine whether the geometry should be turned into a GeometryCollection.



   .. py:method:: save(verbose=False, fid_range=False, step=False, progress=False, silent=False, stream=sys.stdout, strict=False)

      Save the contents from the OGR DataSource Layer into the database
      according to the mapping dictionary given at initialization.

      Keyword Parameters:
       verbose:
         If set, information will be printed subsequent to each model save
         executed on the database.

       fid_range:
         May be set with a slice or tuple of (begin, end) feature ID's to map
         from the data source.  In other words, this keyword enables the user
         to selectively import a subset range of features in the geographic
         data source.

       step:
         If set with an integer, transactions will occur at every step
         interval. For example, if step=1000, a commit would occur after
         the 1,000th feature, the 2,000th feature etc.

       progress:
         When this keyword is set, status information will be printed giving
         the number of features processed and successfully saved.  By default,
         progress information will pe printed every 1000 features processed,
         however, this default may be overridden by setting this keyword with an
         integer for the desired interval.

       stream:
         Status information will be written to this file handle.  Defaults to
         using `sys.stdout`, but any object with a `write` method is supported.

       silent:
         By default, non-fatal error notifications are printed to stdout, but
         this keyword may be set to disable these notifications.

       strict:
         Execution of the model mapping will cease upon the first error
         encountered.  The default behavior is to attempt to continue.



