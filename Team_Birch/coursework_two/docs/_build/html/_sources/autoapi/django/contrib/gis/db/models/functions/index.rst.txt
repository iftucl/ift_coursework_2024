django.contrib.gis.db.models.functions
======================================

.. py:module:: django.contrib.gis.db.models.functions


Attributes
----------

.. autoapisummary::

   django.contrib.gis.db.models.functions.NUMERIC_TYPES


Classes
-------

.. autoapisummary::

   django.contrib.gis.db.models.functions.GeoFuncMixin
   django.contrib.gis.db.models.functions.GeoFunc
   django.contrib.gis.db.models.functions.GeomOutputGeoFunc
   django.contrib.gis.db.models.functions.SQLiteDecimalToFloatMixin
   django.contrib.gis.db.models.functions.OracleToleranceMixin
   django.contrib.gis.db.models.functions.Area
   django.contrib.gis.db.models.functions.Azimuth
   django.contrib.gis.db.models.functions.AsGeoJSON
   django.contrib.gis.db.models.functions.AsGML
   django.contrib.gis.db.models.functions.AsKML
   django.contrib.gis.db.models.functions.AsSVG
   django.contrib.gis.db.models.functions.AsWKB
   django.contrib.gis.db.models.functions.AsWKT
   django.contrib.gis.db.models.functions.BoundingCircle
   django.contrib.gis.db.models.functions.Centroid
   django.contrib.gis.db.models.functions.Difference
   django.contrib.gis.db.models.functions.DistanceResultMixin
   django.contrib.gis.db.models.functions.Distance
   django.contrib.gis.db.models.functions.Envelope
   django.contrib.gis.db.models.functions.ForcePolygonCW
   django.contrib.gis.db.models.functions.FromWKB
   django.contrib.gis.db.models.functions.FromWKT
   django.contrib.gis.db.models.functions.GeoHash
   django.contrib.gis.db.models.functions.GeometryDistance
   django.contrib.gis.db.models.functions.Intersection
   django.contrib.gis.db.models.functions.IsEmpty
   django.contrib.gis.db.models.functions.IsValid
   django.contrib.gis.db.models.functions.Length
   django.contrib.gis.db.models.functions.LineLocatePoint
   django.contrib.gis.db.models.functions.MakeValid
   django.contrib.gis.db.models.functions.MemSize
   django.contrib.gis.db.models.functions.NumGeometries
   django.contrib.gis.db.models.functions.NumPoints
   django.contrib.gis.db.models.functions.Perimeter
   django.contrib.gis.db.models.functions.PointOnSurface
   django.contrib.gis.db.models.functions.Reverse
   django.contrib.gis.db.models.functions.Scale
   django.contrib.gis.db.models.functions.SnapToGrid
   django.contrib.gis.db.models.functions.SymDifference
   django.contrib.gis.db.models.functions.Transform
   django.contrib.gis.db.models.functions.Translate
   django.contrib.gis.db.models.functions.Union


Module Contents
---------------

.. py:data:: NUMERIC_TYPES

.. py:class:: GeoFuncMixin(*expressions, **extra)

   .. py:attribute:: function
      :value: None



   .. py:attribute:: geom_param_pos
      :value: (0,)



   .. py:property:: name


   .. py:method:: geo_field()


   .. py:method:: as_sql(compiler, connection, function=None, **extra_context)


   .. py:method:: resolve_expression(*args, **kwargs)


.. py:class:: GeoFunc(*expressions, **extra)

   Bases: :py:obj:`GeoFuncMixin`, :py:obj:`django.db.models.Func`


.. py:class:: GeomOutputGeoFunc(*expressions, **extra)

   Bases: :py:obj:`GeoFunc`


   .. py:method:: output_field()


.. py:class:: SQLiteDecimalToFloatMixin

   By default, Decimal values are converted to str by the SQLite backend, which
   is not acceptable by the GIS functions expecting numeric values.


   .. py:method:: as_sqlite(compiler, connection, **extra_context)


.. py:class:: OracleToleranceMixin

   .. py:attribute:: tolerance
      :value: 0.05



   .. py:method:: as_oracle(compiler, connection, **extra_context)


.. py:class:: Area(*expressions, **extra)

   Bases: :py:obj:`OracleToleranceMixin`, :py:obj:`GeoFunc`


   .. py:attribute:: arity
      :value: 1



   .. py:method:: output_field()


   .. py:method:: as_sql(compiler, connection, **extra_context)


   .. py:method:: as_sqlite(compiler, connection, **extra_context)


.. py:class:: Azimuth(*expressions, **extra)

   Bases: :py:obj:`GeoFunc`


   .. py:attribute:: output_field


   .. py:attribute:: arity
      :value: 2



   .. py:attribute:: geom_param_pos
      :value: (0, 1)



.. py:class:: AsGeoJSON(expression, bbox=False, crs=False, precision=8, **extra)

   Bases: :py:obj:`GeoFunc`


   .. py:attribute:: output_field


   .. py:method:: as_oracle(compiler, connection, **extra_context)


.. py:class:: AsGML(expression, version=2, precision=8, **extra)

   Bases: :py:obj:`GeoFunc`


   .. py:attribute:: geom_param_pos
      :value: (1,)



   .. py:attribute:: output_field


   .. py:method:: as_oracle(compiler, connection, **extra_context)


.. py:class:: AsKML(expression, precision=8, **extra)

   Bases: :py:obj:`GeoFunc`


   .. py:attribute:: output_field


.. py:class:: AsSVG(expression, relative=False, precision=8, **extra)

   Bases: :py:obj:`GeoFunc`


   .. py:attribute:: output_field


.. py:class:: AsWKB(*expressions, **extra)

   Bases: :py:obj:`GeoFunc`


   .. py:attribute:: output_field


   .. py:attribute:: arity
      :value: 1



.. py:class:: AsWKT(*expressions, **extra)

   Bases: :py:obj:`GeoFunc`


   .. py:attribute:: output_field


   .. py:attribute:: arity
      :value: 1



.. py:class:: BoundingCircle(expression, num_seg=48, **extra)

   Bases: :py:obj:`OracleToleranceMixin`, :py:obj:`GeomOutputGeoFunc`


   .. py:method:: as_oracle(compiler, connection, **extra_context)


.. py:class:: Centroid(*expressions, **extra)

   Bases: :py:obj:`OracleToleranceMixin`, :py:obj:`GeomOutputGeoFunc`


   .. py:attribute:: arity
      :value: 1



.. py:class:: Difference(*expressions, **extra)

   Bases: :py:obj:`OracleToleranceMixin`, :py:obj:`GeomOutputGeoFunc`


   .. py:attribute:: arity
      :value: 2



   .. py:attribute:: geom_param_pos
      :value: (0, 1)



.. py:class:: DistanceResultMixin

   .. py:method:: output_field()


   .. py:method:: source_is_geography()


.. py:class:: Distance(expr1, expr2, spheroid=None, **extra)

   Bases: :py:obj:`DistanceResultMixin`, :py:obj:`OracleToleranceMixin`, :py:obj:`GeoFunc`


   .. py:attribute:: geom_param_pos
      :value: (0, 1)



   .. py:attribute:: spheroid
      :value: None



   .. py:method:: as_postgresql(compiler, connection, **extra_context)


   .. py:method:: as_sqlite(compiler, connection, **extra_context)


.. py:class:: Envelope(*expressions, **extra)

   Bases: :py:obj:`GeomOutputGeoFunc`


   .. py:attribute:: arity
      :value: 1



.. py:class:: ForcePolygonCW(*expressions, **extra)

   Bases: :py:obj:`GeomOutputGeoFunc`


   .. py:attribute:: arity
      :value: 1



.. py:class:: FromWKB(*expressions, **extra)

   Bases: :py:obj:`GeoFunc`


   .. py:attribute:: output_field


   .. py:attribute:: arity
      :value: 1



   .. py:attribute:: geom_param_pos
      :value: ()



.. py:class:: FromWKT(*expressions, **extra)

   Bases: :py:obj:`GeoFunc`


   .. py:attribute:: output_field


   .. py:attribute:: arity
      :value: 1



   .. py:attribute:: geom_param_pos
      :value: ()



.. py:class:: GeoHash(expression, precision=None, **extra)

   Bases: :py:obj:`GeoFunc`


   .. py:attribute:: output_field


   .. py:method:: as_mysql(compiler, connection, **extra_context)


.. py:class:: GeometryDistance(*expressions, **extra)

   Bases: :py:obj:`GeoFunc`


   .. py:attribute:: output_field


   .. py:attribute:: arity
      :value: 2



   .. py:attribute:: function
      :value: ''



   .. py:attribute:: arg_joiner
      :value: ' <-> '



   .. py:attribute:: geom_param_pos
      :value: (0, 1)



.. py:class:: Intersection(*expressions, **extra)

   Bases: :py:obj:`OracleToleranceMixin`, :py:obj:`GeomOutputGeoFunc`


   .. py:attribute:: arity
      :value: 2



   .. py:attribute:: geom_param_pos
      :value: (0, 1)



.. py:class:: IsEmpty(*expressions, **extra)

   Bases: :py:obj:`GeoFuncMixin`, :py:obj:`django.db.models.Transform`


   .. py:attribute:: lookup_name
      :value: 'isempty'



   .. py:attribute:: output_field


.. py:class:: IsValid(*expressions, **extra)

   Bases: :py:obj:`OracleToleranceMixin`, :py:obj:`GeoFuncMixin`, :py:obj:`django.db.models.Transform`


   .. py:attribute:: lookup_name
      :value: 'isvalid'



   .. py:attribute:: output_field


   .. py:method:: as_oracle(compiler, connection, **extra_context)


.. py:class:: Length(expr1, spheroid=True, **extra)

   Bases: :py:obj:`DistanceResultMixin`, :py:obj:`OracleToleranceMixin`, :py:obj:`GeoFunc`


   .. py:attribute:: spheroid
      :value: True



   .. py:method:: as_sql(compiler, connection, **extra_context)


   .. py:method:: as_postgresql(compiler, connection, **extra_context)


   .. py:method:: as_sqlite(compiler, connection, **extra_context)


.. py:class:: LineLocatePoint(*expressions, **extra)

   Bases: :py:obj:`GeoFunc`


   .. py:attribute:: output_field


   .. py:attribute:: arity
      :value: 2



   .. py:attribute:: geom_param_pos
      :value: (0, 1)



.. py:class:: MakeValid(*expressions, **extra)

   Bases: :py:obj:`GeomOutputGeoFunc`


.. py:class:: MemSize(*expressions, **extra)

   Bases: :py:obj:`GeoFunc`


   .. py:attribute:: output_field


   .. py:attribute:: arity
      :value: 1



.. py:class:: NumGeometries(*expressions, **extra)

   Bases: :py:obj:`GeoFunc`


   .. py:attribute:: output_field


   .. py:attribute:: arity
      :value: 1



.. py:class:: NumPoints(*expressions, **extra)

   Bases: :py:obj:`GeoFunc`


   .. py:attribute:: output_field


   .. py:attribute:: arity
      :value: 1



.. py:class:: Perimeter(*expressions, **extra)

   Bases: :py:obj:`DistanceResultMixin`, :py:obj:`OracleToleranceMixin`, :py:obj:`GeoFunc`


   .. py:attribute:: arity
      :value: 1



   .. py:method:: as_postgresql(compiler, connection, **extra_context)


   .. py:method:: as_sqlite(compiler, connection, **extra_context)


.. py:class:: PointOnSurface(*expressions, **extra)

   Bases: :py:obj:`OracleToleranceMixin`, :py:obj:`GeomOutputGeoFunc`


   .. py:attribute:: arity
      :value: 1



.. py:class:: Reverse(*expressions, **extra)

   Bases: :py:obj:`GeoFunc`


   .. py:attribute:: arity
      :value: 1



.. py:class:: Scale(expression, x, y, z=0.0, **extra)

   Bases: :py:obj:`SQLiteDecimalToFloatMixin`, :py:obj:`GeomOutputGeoFunc`


   By default, Decimal values are converted to str by the SQLite backend, which
   is not acceptable by the GIS functions expecting numeric values.


.. py:class:: SnapToGrid(expression, *args, **extra)

   Bases: :py:obj:`SQLiteDecimalToFloatMixin`, :py:obj:`GeomOutputGeoFunc`


   By default, Decimal values are converted to str by the SQLite backend, which
   is not acceptable by the GIS functions expecting numeric values.


.. py:class:: SymDifference(*expressions, **extra)

   Bases: :py:obj:`OracleToleranceMixin`, :py:obj:`GeomOutputGeoFunc`


   .. py:attribute:: arity
      :value: 2



   .. py:attribute:: geom_param_pos
      :value: (0, 1)



.. py:class:: Transform(expression, srid, **extra)

   Bases: :py:obj:`GeomOutputGeoFunc`


.. py:class:: Translate(expression, x, y, z=0.0, **extra)

   Bases: :py:obj:`Scale`


   By default, Decimal values are converted to str by the SQLite backend, which
   is not acceptable by the GIS functions expecting numeric values.


   .. py:method:: as_sqlite(compiler, connection, **extra_context)


.. py:class:: Union(*expressions, **extra)

   Bases: :py:obj:`OracleToleranceMixin`, :py:obj:`GeomOutputGeoFunc`


   .. py:attribute:: arity
      :value: 2



   .. py:attribute:: geom_param_pos
      :value: (0, 1)



