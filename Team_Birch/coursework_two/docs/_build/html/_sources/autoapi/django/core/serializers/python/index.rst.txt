django.core.serializers.python
==============================

.. py:module:: django.core.serializers.python

.. autoapi-nested-parse::

   A Python "serializer". Doesn't do much serializing per se -- just converts to
   and from basic Python data types (lists, dicts, strings, etc.). Useful as a basis for
   other serializers.



Classes
-------

.. autoapisummary::

   django.core.serializers.python.Serializer


Functions
---------

.. autoapisummary::

   django.core.serializers.python.Deserializer


Module Contents
---------------

.. py:class:: Serializer

   Bases: :py:obj:`django.core.serializers.base.Serializer`


   Serialize a QuerySet to basic Python objects.


   .. py:attribute:: internal_use_only
      :value: True



   .. py:method:: start_serialization()


   .. py:method:: end_serialization()


   .. py:method:: start_object(obj)


   .. py:method:: end_object(obj)


   .. py:method:: get_dump_object(obj)


   .. py:method:: handle_field(obj, field)


   .. py:method:: handle_fk_field(obj, field)


   .. py:method:: handle_m2m_field(obj, field)


   .. py:method:: getvalue()


.. py:function:: Deserializer(object_list, *, using=DEFAULT_DB_ALIAS, ignorenonexistent=False, **options)

   Deserialize simple Python objects back into Django ORM instances.

   It's expected that you pass the Python objects themselves (instead of a
   stream or a string) to the constructor


