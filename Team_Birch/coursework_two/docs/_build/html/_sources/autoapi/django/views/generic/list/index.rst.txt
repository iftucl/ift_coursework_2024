django.views.generic.list
=========================

.. py:module:: django.views.generic.list


Classes
-------

.. autoapisummary::

   django.views.generic.list.MultipleObjectMixin
   django.views.generic.list.BaseListView
   django.views.generic.list.MultipleObjectTemplateResponseMixin
   django.views.generic.list.ListView


Module Contents
---------------

.. py:class:: MultipleObjectMixin

   Bases: :py:obj:`django.views.generic.base.ContextMixin`


   A mixin for views manipulating multiple objects.


   .. py:attribute:: allow_empty
      :value: True



   .. py:attribute:: queryset
      :value: None



   .. py:attribute:: model
      :value: None



   .. py:attribute:: paginate_by
      :value: None



   .. py:attribute:: paginate_orphans
      :value: 0



   .. py:attribute:: context_object_name
      :value: None



   .. py:attribute:: paginator_class


   .. py:attribute:: page_kwarg
      :value: 'page'



   .. py:attribute:: ordering
      :value: None



   .. py:method:: get_queryset()

      Return the list of items for this view.

      The return value must be an iterable and may be an instance of
      `QuerySet` in which case `QuerySet` specific behavior will be enabled.



   .. py:method:: get_ordering()

      Return the field or fields to use for ordering the queryset.



   .. py:method:: paginate_queryset(queryset, page_size)

      Paginate the queryset, if needed.



   .. py:method:: get_paginate_by(queryset)

      Get the number of items to paginate by, or ``None`` for no pagination.



   .. py:method:: get_paginator(queryset, per_page, orphans=0, allow_empty_first_page=True, **kwargs)

      Return an instance of the paginator for this view.



   .. py:method:: get_paginate_orphans()

      Return the maximum number of orphans extend the last page by when
      paginating.



   .. py:method:: get_allow_empty()

      Return ``True`` if the view should display empty lists and ``False``
      if a 404 should be raised instead.



   .. py:method:: get_context_object_name(object_list)

      Get the name of the item to be used in the context.



   .. py:method:: get_context_data(*, object_list=None, **kwargs)

      Get the context for this view.



.. py:class:: BaseListView

   Bases: :py:obj:`MultipleObjectMixin`, :py:obj:`django.views.generic.base.View`


   A base view for displaying a list of objects.


   .. py:method:: get(request, *args, **kwargs)


.. py:class:: MultipleObjectTemplateResponseMixin

   Bases: :py:obj:`django.views.generic.base.TemplateResponseMixin`


   Mixin for responding with a template and list of objects.


   .. py:attribute:: template_name_suffix
      :value: '_list'



   .. py:method:: get_template_names()

      Return a list of template names to be used for the request. Must return
      a list. May not be called if render_to_response is overridden.



.. py:class:: ListView

   Bases: :py:obj:`MultipleObjectTemplateResponseMixin`, :py:obj:`BaseListView`


   Render some list of objects, set by `self.model` or `self.queryset`.
   `self.queryset` can actually be any iterable of items, not just a queryset.


