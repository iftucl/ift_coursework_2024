django.db.models.query
======================

.. py:module:: django.db.models.query

.. autoapi-nested-parse::

   The main QuerySet implementation. This provides the public API for the ORM.



Attributes
----------

.. autoapisummary::

   django.db.models.query.MAX_GET_RESULTS
   django.db.models.query.REPR_OUTPUT_SIZE


Classes
-------

.. autoapisummary::

   django.db.models.query.BaseIterable
   django.db.models.query.ModelIterable
   django.db.models.query.RawModelIterable
   django.db.models.query.ValuesIterable
   django.db.models.query.ValuesListIterable
   django.db.models.query.NamedValuesListIterable
   django.db.models.query.FlatValuesListIterable
   django.db.models.query.QuerySet
   django.db.models.query.InstanceCheckMeta
   django.db.models.query.EmptyQuerySet
   django.db.models.query.RawQuerySet
   django.db.models.query.Prefetch
   django.db.models.query.RelatedPopulator


Functions
---------

.. autoapisummary::

   django.db.models.query.normalize_prefetch_lookups
   django.db.models.query.prefetch_related_objects
   django.db.models.query.get_prefetcher
   django.db.models.query.prefetch_one_level
   django.db.models.query.get_related_populators


Module Contents
---------------

.. py:data:: MAX_GET_RESULTS
   :value: 21


.. py:data:: REPR_OUTPUT_SIZE
   :value: 20


.. py:class:: BaseIterable(queryset, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE)

   .. py:attribute:: queryset


   .. py:attribute:: chunked_fetch
      :value: False



   .. py:attribute:: chunk_size


.. py:class:: ModelIterable(queryset, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE)

   Bases: :py:obj:`BaseIterable`


   Iterable that yields a model instance for each row.


.. py:class:: RawModelIterable(queryset, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE)

   Bases: :py:obj:`BaseIterable`


   Iterable that yields a model instance for each row from a raw queryset.


.. py:class:: ValuesIterable(queryset, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE)

   Bases: :py:obj:`BaseIterable`


   Iterable returned by QuerySet.values() that yields a dict for each row.


.. py:class:: ValuesListIterable(queryset, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE)

   Bases: :py:obj:`BaseIterable`


   Iterable returned by QuerySet.values_list(flat=False) that yields a tuple
   for each row.


.. py:class:: NamedValuesListIterable(queryset, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE)

   Bases: :py:obj:`ValuesListIterable`


   Iterable returned by QuerySet.values_list(named=True) that yields a
   namedtuple for each row.


.. py:class:: FlatValuesListIterable(queryset, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE)

   Bases: :py:obj:`BaseIterable`


   Iterable returned by QuerySet.values_list(flat=True) that yields single
   values.


.. py:class:: QuerySet(model=None, query=None, using=None, hints=None)

   Bases: :py:obj:`django.db.models.utils.AltersData`


   Represent a lazy database lookup for a set of objects.


   .. py:attribute:: model
      :value: None



   .. py:property:: query


   .. py:method:: as_manager()
      :classmethod:



   .. py:method:: iterator(chunk_size=None)

      An iterator over the results from applying this QuerySet to the
      database. chunk_size must be provided for QuerySets that prefetch
      related objects. Otherwise, a default chunk_size of 2000 is supplied.



   .. py:method:: aiterator(chunk_size=2000)
      :async:


      An asynchronous iterator over the results from applying this QuerySet
      to the database.



   .. py:method:: aggregate(*args, **kwargs)

      Return a dictionary containing the calculations (aggregation)
      over the current queryset.

      If args is present the expression is passed as a kwarg using
      the Aggregate object's default alias.



   .. py:method:: aaggregate(*args, **kwargs)
      :async:



   .. py:method:: count()

      Perform a SELECT COUNT() and return the number of records as an
      integer.

      If the QuerySet is already fully cached, return the length of the
      cached results set to avoid multiple SELECT COUNT(*) calls.



   .. py:method:: acount()
      :async:



   .. py:method:: get(*args, **kwargs)

      Perform the query and return a single object matching the given
      keyword arguments.



   .. py:method:: aget(*args, **kwargs)
      :async:



   .. py:method:: create(**kwargs)

      Create a new object with the given kwargs, saving it to the database
      and returning the created object.



   .. py:method:: acreate(**kwargs)
      :async:



   .. py:method:: bulk_create(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)

      Insert each of the instances into the database. Do *not* call
      save() on each of the instances, do not send any pre/post_save
      signals, and do not set the primary key attribute if it is an
      autoincrement field (except if features.can_return_rows_from_bulk_insert=True).
      Multi-table models are not supported.



   .. py:method:: abulk_create(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)
      :async:



   .. py:method:: bulk_update(objs, fields, batch_size=None)

      Update the given fields in each of the given objects in the database.



   .. py:method:: abulk_update(objs, fields, batch_size=None)
      :async:



   .. py:method:: get_or_create(defaults=None, **kwargs)

      Look up an object with the given kwargs, creating one if necessary.
      Return a tuple of (object, created), where created is a boolean
      specifying whether an object was created.



   .. py:method:: aget_or_create(defaults=None, **kwargs)
      :async:



   .. py:method:: update_or_create(defaults=None, **kwargs)

      Look up an object with the given kwargs, updating one with defaults
      if it exists, otherwise create a new one.
      Return a tuple (object, created), where created is a boolean
      specifying whether an object was created.



   .. py:method:: aupdate_or_create(defaults=None, **kwargs)
      :async:



   .. py:method:: earliest(*fields)


   .. py:method:: aearliest(*fields)
      :async:



   .. py:method:: latest(*fields)

      Return the latest object according to fields (if given) or by the
      model's Meta.get_latest_by.



   .. py:method:: alatest(*fields)
      :async:



   .. py:method:: first()

      Return the first object of a query or None if no match is found.



   .. py:method:: afirst()
      :async:



   .. py:method:: last()

      Return the last object of a query or None if no match is found.



   .. py:method:: alast()
      :async:



   .. py:method:: in_bulk(id_list=None, *, field_name='pk')

      Return a dictionary mapping each of the given IDs to the object with
      that ID. If `id_list` isn't provided, evaluate the entire QuerySet.



   .. py:method:: ain_bulk(id_list=None, *, field_name='pk')
      :async:



   .. py:method:: delete()

      Delete the records in the current QuerySet.



   .. py:method:: adelete()
      :async:



   .. py:method:: update(**kwargs)

      Update all elements in the current QuerySet, setting all the given
      fields to the appropriate values.



   .. py:method:: aupdate(**kwargs)
      :async:



   .. py:method:: exists()

      Return True if the QuerySet would have any results, False otherwise.



   .. py:method:: aexists()
      :async:



   .. py:method:: contains(obj)

      Return True if the QuerySet contains the provided obj,
      False otherwise.



   .. py:method:: acontains(obj)
      :async:



   .. py:method:: explain(*, format=None, **options)

      Runs an EXPLAIN on the SQL query this QuerySet would perform, and
      returns the results.



   .. py:method:: aexplain(*, format=None, **options)
      :async:



   .. py:method:: raw(raw_query, params=(), translations=None, using=None)


   .. py:method:: values(*fields, **expressions)


   .. py:method:: values_list(*fields, flat=False, named=False)


   .. py:method:: dates(field_name, kind, order='ASC')

      Return a list of date objects representing all available dates for
      the given field_name, scoped to 'kind'.



   .. py:method:: datetimes(field_name, kind, order='ASC', tzinfo=None, is_dst=timezone.NOT_PASSED)

      Return a list of datetime objects representing all available
      datetimes for the given field_name, scoped to 'kind'.



   .. py:method:: none()

      Return an empty QuerySet.



   .. py:method:: all()

      Return a new QuerySet that is a copy of the current one. This allows a
      QuerySet to proxy for a model manager in some cases.



   .. py:method:: filter(*args, **kwargs)

      Return a new QuerySet instance with the args ANDed to the existing
      set.



   .. py:method:: exclude(*args, **kwargs)

      Return a new QuerySet instance with NOT (args) ANDed to the existing
      set.



   .. py:method:: complex_filter(filter_obj)

      Return a new QuerySet instance with filter_obj added to the filters.

      filter_obj can be a Q object or a dictionary of keyword lookup
      arguments.

      This exists to support framework features such as 'limit_choices_to',
      and usually it will be more natural to use other methods.



   .. py:method:: union(*other_qs, all=False)


   .. py:method:: intersection(*other_qs)


   .. py:method:: difference(*other_qs)


   .. py:method:: select_for_update(nowait=False, skip_locked=False, of=(), no_key=False)

      Return a new QuerySet instance that will select objects with a
      FOR UPDATE lock.



   .. py:method:: select_related(*fields)

      Return a new QuerySet instance that will select related objects.

      If fields are specified, they must be ForeignKey fields and only those
      related objects are included in the selection.

      If select_related(None) is called, clear the list.



   .. py:method:: prefetch_related(*lookups)

      Return a new QuerySet instance that will prefetch the specified
      Many-To-One and Many-To-Many related objects when the QuerySet is
      evaluated.

      When prefetch_related() is called more than once, append to the list of
      prefetch lookups. If prefetch_related(None) is called, clear the list.



   .. py:method:: annotate(*args, **kwargs)

      Return a query set in which the returned objects have been annotated
      with extra data or aggregations.



   .. py:method:: alias(*args, **kwargs)

      Return a query set with added aliases for extra data or aggregations.



   .. py:method:: order_by(*field_names)

      Return a new QuerySet instance with the ordering changed.



   .. py:method:: distinct(*field_names)

      Return a new QuerySet instance that will select only distinct results.



   .. py:method:: extra(select=None, where=None, params=None, tables=None, order_by=None, select_params=None)

      Add extra SQL fragments to the query.



   .. py:method:: reverse()

      Reverse the ordering of the QuerySet.



   .. py:method:: defer(*fields)

      Defer the loading of data for certain fields until they are accessed.
      Add the set of deferred fields to any existing set of deferred fields.
      The only exception to this is if None is passed in as the only
      parameter, in which case removal all deferrals.



   .. py:method:: only(*fields)

      Essentially, the opposite of defer(). Only the fields passed into this
      method and that are not already specified as deferred are loaded
      immediately when the queryset is evaluated.



   .. py:method:: using(alias)

      Select which database this QuerySet should execute against.



   .. py:property:: ordered

      Return True if the QuerySet is ordered -- i.e. has an order_by()
      clause or a default ordering on the model (or is empty).


   .. py:property:: db

      Return the database used if this query is executed now.


   .. py:method:: resolve_expression(*args, **kwargs)


.. py:class:: InstanceCheckMeta

   Bases: :py:obj:`type`


.. py:class:: EmptyQuerySet(*args, **kwargs)

   Marker class to checking if a queryset is empty by .none():
       isinstance(qs.none(), EmptyQuerySet) -> True


.. py:class:: RawQuerySet(raw_query, model=None, query=None, params=(), translations=None, using=None, hints=None)

   Provide an iterator which converts the results of raw SQL queries into
   annotated model instances.


   .. py:attribute:: raw_query


   .. py:attribute:: model
      :value: None



   .. py:attribute:: query


   .. py:attribute:: params
      :value: ()



   .. py:attribute:: translations


   .. py:method:: resolve_model_init_order()

      Resolve the init field names and value positions.



   .. py:method:: prefetch_related(*lookups)

      Same as QuerySet.prefetch_related()



   .. py:method:: iterator()


   .. py:property:: db

      Return the database used if this query is executed now.


   .. py:method:: using(alias)

      Select the database this RawQuerySet should execute against.



   .. py:method:: columns()

      A list of model field names in the order they'll appear in the
      query results.



   .. py:method:: model_fields()

      A dict mapping column names to model field names.



.. py:class:: Prefetch(lookup, queryset=None, to_attr=None)

   .. py:attribute:: prefetch_through


   .. py:attribute:: prefetch_to


   .. py:attribute:: queryset
      :value: None



   .. py:attribute:: to_attr
      :value: None



   .. py:method:: add_prefix(prefix)


   .. py:method:: get_current_prefetch_to(level)


   .. py:method:: get_current_to_attr(level)


   .. py:method:: get_current_queryset(level)


.. py:function:: normalize_prefetch_lookups(lookups, prefix=None)

   Normalize lookups into Prefetch objects.


.. py:function:: prefetch_related_objects(model_instances, *related_lookups)

   Populate prefetched object caches for a list of model instances based on
   the lookups/Prefetch instances given.


.. py:function:: get_prefetcher(instance, through_attr, to_attr)

   For the attribute 'through_attr' on the given instance, find
   an object that has a get_prefetch_queryset().
   Return a 4 tuple containing:
   (the object with get_prefetch_queryset (or None),
    the descriptor object representing this relationship (or None),
    a boolean that is False if the attribute was not found at all,
    a function that takes an instance and returns a boolean that is True if
    the attribute has already been fetched for that instance)


.. py:function:: prefetch_one_level(instances, prefetcher, lookup, level)

   Helper function for prefetch_related_objects().

   Run prefetches on all instances using the prefetcher object,
   assigning results to relevant caches in instance.

   Return the prefetched objects along with any additional prefetches that
   must be done due to prefetch_related lookups found from default managers.


.. py:class:: RelatedPopulator(klass_info, select, db)

   RelatedPopulator is used for select_related() object instantiation.

   The idea is that each select_related() model will be populated by a
   different RelatedPopulator instance. The RelatedPopulator instances get
   klass_info and select (computed in SQLCompiler) plus the used db as
   input for initialization. That data is used to compute which columns
   to use, how to instantiate the model, and how to populate the links
   between the objects.

   The actual creation of the objects is done in populate() method. This
   method gets row and from_obj as input and populates the select_related()
   model instance.


   .. py:attribute:: db


   .. py:attribute:: model_cls


   .. py:attribute:: pk_idx


   .. py:attribute:: related_populators
      :value: []



   .. py:attribute:: local_setter


   .. py:attribute:: remote_setter


   .. py:method:: populate(row, from_obj)


.. py:function:: get_related_populators(klass_info, select, db)

