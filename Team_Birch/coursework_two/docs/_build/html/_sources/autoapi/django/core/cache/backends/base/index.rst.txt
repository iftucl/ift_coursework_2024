django.core.cache.backends.base
===============================

.. py:module:: django.core.cache.backends.base

.. autoapi-nested-parse::

   Base Cache class.



Attributes
----------

.. autoapisummary::

   django.core.cache.backends.base.DEFAULT_TIMEOUT
   django.core.cache.backends.base.MEMCACHE_MAX_KEY_LENGTH


Exceptions
----------

.. autoapisummary::

   django.core.cache.backends.base.InvalidCacheBackendError
   django.core.cache.backends.base.CacheKeyWarning
   django.core.cache.backends.base.InvalidCacheKey


Classes
-------

.. autoapisummary::

   django.core.cache.backends.base.BaseCache


Functions
---------

.. autoapisummary::

   django.core.cache.backends.base.default_key_func
   django.core.cache.backends.base.get_key_func
   django.core.cache.backends.base.memcache_key_warnings


Module Contents
---------------

.. py:exception:: InvalidCacheBackendError

   Bases: :py:obj:`django.core.exceptions.ImproperlyConfigured`


   Django is somehow improperly configured


.. py:exception:: CacheKeyWarning

   Bases: :py:obj:`RuntimeWarning`


   Base class for warnings about dubious runtime behavior.


.. py:exception:: InvalidCacheKey

   Bases: :py:obj:`ValueError`


   Inappropriate argument value (of correct type).


.. py:data:: DEFAULT_TIMEOUT

.. py:data:: MEMCACHE_MAX_KEY_LENGTH
   :value: 250


.. py:function:: default_key_func(key, key_prefix, version)

   Default function to generate keys.

   Construct the key used by all other methods. By default, prepend
   the `key_prefix`. KEY_FUNCTION can be used to specify an alternate
   function with custom key making behavior.


.. py:function:: get_key_func(key_func)

   Function to decide which key function to use.

   Default to ``default_key_func``.


.. py:class:: BaseCache(params)

   .. py:attribute:: default_timeout


   .. py:attribute:: key_prefix


   .. py:attribute:: version


   .. py:attribute:: key_func


   .. py:method:: get_backend_timeout(timeout=DEFAULT_TIMEOUT)

      Return the timeout value usable by this backend based upon the provided
      timeout.



   .. py:method:: make_key(key, version=None)

      Construct the key used by all other methods. By default, use the
      key_func to generate a key (which, by default, prepends the
      `key_prefix' and 'version'). A different key function can be provided
      at the time of cache construction; alternatively, you can subclass the
      cache backend to provide custom key making behavior.



   .. py:method:: validate_key(key)

      Warn about keys that would not be portable to the memcached
      backend. This encourages (but does not force) writing backend-portable
      cache code.



   .. py:method:: make_and_validate_key(key, version=None)

      Helper to make and validate keys.



   .. py:method:: add(key, value, timeout=DEFAULT_TIMEOUT, version=None)
      :abstractmethod:


      Set a value in the cache if the key does not already exist. If
      timeout is given, use that timeout for the key; otherwise use the
      default cache timeout.

      Return True if the value was stored, False otherwise.



   .. py:method:: aadd(key, value, timeout=DEFAULT_TIMEOUT, version=None)
      :async:



   .. py:method:: get(key, default=None, version=None)
      :abstractmethod:


      Fetch a given key from the cache. If the key does not exist, return
      default, which itself defaults to None.



   .. py:method:: aget(key, default=None, version=None)
      :async:



   .. py:method:: set(key, value, timeout=DEFAULT_TIMEOUT, version=None)
      :abstractmethod:


      Set a value in the cache. If timeout is given, use that timeout for the
      key; otherwise use the default cache timeout.



   .. py:method:: aset(key, value, timeout=DEFAULT_TIMEOUT, version=None)
      :async:



   .. py:method:: touch(key, timeout=DEFAULT_TIMEOUT, version=None)
      :abstractmethod:


      Update the key's expiry time using timeout. Return True if successful
      or False if the key does not exist.



   .. py:method:: atouch(key, timeout=DEFAULT_TIMEOUT, version=None)
      :async:



   .. py:method:: delete(key, version=None)
      :abstractmethod:


      Delete a key from the cache and return whether it succeeded, failing
      silently.



   .. py:method:: adelete(key, version=None)
      :async:



   .. py:method:: get_many(keys, version=None)

      Fetch a bunch of keys from the cache. For certain backends (memcached,
      pgsql) this can be *much* faster when fetching multiple values.

      Return a dict mapping each key in keys to its value. If the given
      key is missing, it will be missing from the response dict.



   .. py:method:: aget_many(keys, version=None)
      :async:


      See get_many().



   .. py:method:: get_or_set(key, default, timeout=DEFAULT_TIMEOUT, version=None)

      Fetch a given key from the cache. If the key does not exist,
      add the key and set it to the default value. The default value can
      also be any callable. If timeout is given, use that timeout for the
      key; otherwise use the default cache timeout.

      Return the value of the key stored or retrieved.



   .. py:method:: aget_or_set(key, default, timeout=DEFAULT_TIMEOUT, version=None)
      :async:


      See get_or_set().



   .. py:method:: has_key(key, version=None)

      Return True if the key is in the cache and has not expired.



   .. py:method:: ahas_key(key, version=None)
      :async:



   .. py:method:: incr(key, delta=1, version=None)

      Add delta to value in the cache. If the key does not exist, raise a
      ValueError exception.



   .. py:method:: aincr(key, delta=1, version=None)
      :async:


      See incr().



   .. py:method:: decr(key, delta=1, version=None)

      Subtract delta from value in the cache. If the key does not exist, raise
      a ValueError exception.



   .. py:method:: adecr(key, delta=1, version=None)
      :async:



   .. py:method:: set_many(data, timeout=DEFAULT_TIMEOUT, version=None)

      Set a bunch of values in the cache at once from a dict of key/value
      pairs.  For certain backends (memcached), this is much more efficient
      than calling set() multiple times.

      If timeout is given, use that timeout for the key; otherwise use the
      default cache timeout.

      On backends that support it, return a list of keys that failed
      insertion, or an empty list if all keys were inserted successfully.



   .. py:method:: aset_many(data, timeout=DEFAULT_TIMEOUT, version=None)
      :async:



   .. py:method:: delete_many(keys, version=None)

      Delete a bunch of values in the cache at once. For certain backends
      (memcached), this is much more efficient than calling delete() multiple
      times.



   .. py:method:: adelete_many(keys, version=None)
      :async:



   .. py:method:: clear()
      :abstractmethod:


      Remove *all* values from the cache at once.



   .. py:method:: aclear()
      :async:



   .. py:method:: incr_version(key, delta=1, version=None)

      Add delta to the cache version for the supplied key. Return the new
      version.



   .. py:method:: aincr_version(key, delta=1, version=None)
      :async:


      See incr_version().



   .. py:method:: decr_version(key, delta=1, version=None)

      Subtract delta from the cache version for the supplied key. Return the
      new version.



   .. py:method:: adecr_version(key, delta=1, version=None)
      :async:



   .. py:method:: close(**kwargs)

      Close the cache connection



   .. py:method:: aclose(**kwargs)
      :async:



.. py:function:: memcache_key_warnings(key)

