django.db.backends.oracle.base
==============================

.. py:module:: django.db.backends.oracle.base

.. autoapi-nested-parse::

   Oracle database backend for Django.

   Requires cx_Oracle: https://oracle.github.io/python-cx_Oracle/



Classes
-------

.. autoapisummary::

   django.db.backends.oracle.base.DatabaseWrapper
   django.db.backends.oracle.base.OracleParam
   django.db.backends.oracle.base.VariableWrapper
   django.db.backends.oracle.base.FormatStylePlaceholderCursor


Functions
---------

.. autoapisummary::

   django.db.backends.oracle.base.wrap_oracle_errors


Module Contents
---------------

.. py:function:: wrap_oracle_errors()

.. py:class:: DatabaseWrapper(*args, **kwargs)

   Bases: :py:obj:`django.db.backends.base.base.BaseDatabaseWrapper`


   .. py:attribute:: vendor
      :value: 'oracle'



   .. py:attribute:: display_name
      :value: 'Oracle'



   .. py:attribute:: data_types


   .. py:attribute:: data_type_check_constraints


   .. py:attribute:: operators


   .. py:attribute:: pattern_esc
      :value: "REPLACE(REPLACE(REPLACE({}, '\\', '\\\\'), '%%', '\\%%'), '_', '\\_')"



   .. py:attribute:: Database


   .. py:attribute:: SchemaEditorClass


   .. py:attribute:: client_class


   .. py:attribute:: creation_class


   .. py:attribute:: features_class


   .. py:attribute:: introspection_class


   .. py:attribute:: ops_class


   .. py:attribute:: validation_class


   .. py:method:: get_database_version()


   .. py:method:: get_connection_params()


   .. py:method:: get_new_connection(conn_params)


   .. py:method:: init_connection_state()


   .. py:method:: create_cursor(name=None)


   .. py:method:: check_constraints(table_names=None)

      Check constraints by setting them to immediate. Return them to deferred
      afterward.



   .. py:method:: is_usable()


   .. py:method:: cx_oracle_version()


   .. py:method:: oracle_version()


.. py:class:: OracleParam(param, cursor, strings_only=False)

   Wrapper object for formatting parameters for Oracle. If the string
   representation of the value is large enough (greater than 4000 characters)
   the input size needs to be set as CLOB. Alternatively, if the parameter
   has an `input_size` attribute, then the value of the `input_size` attribute
   will be used instead. Otherwise, no input size will be set for the
   parameter when executing the query.


.. py:class:: VariableWrapper(var)

   An adapter class for cursor variables that prevents the wrapped object
   from being converted into a string when used to instantiate an OracleParam.
   This can be used generally for any other object that should be passed into
   Cursor.execute as-is.


   .. py:attribute:: var


   .. py:method:: bind_parameter(cursor)


.. py:class:: FormatStylePlaceholderCursor(connection)

   Django uses "format" (e.g. '%s') style placeholders, but Oracle uses ":var"
   style. This fixes it -- but note that if you want to use a literal "%s" in
   a query, you'll need to use "%%s".


   .. py:attribute:: charset
      :value: 'utf-8'



   .. py:attribute:: cursor


   .. py:method:: execute(query, params=None)


   .. py:method:: executemany(query, params=None)


   .. py:method:: close()


   .. py:method:: var(*args)


   .. py:method:: arrayvar(*args)


