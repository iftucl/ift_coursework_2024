django.core.files.base
======================

.. py:module:: django.core.files.base


Classes
-------

.. autoapisummary::

   django.core.files.base.File
   django.core.files.base.ContentFile


Functions
---------

.. autoapisummary::

   django.core.files.base.endswith_cr
   django.core.files.base.endswith_lf
   django.core.files.base.equals_lf


Module Contents
---------------

.. py:class:: File(file, name=None)

   Bases: :py:obj:`django.core.files.utils.FileProxyMixin`


   A mixin class used to forward file methods to an underlaying file
   object.  The internal file object has to be called "file"::

       class FileProxy(FileProxyMixin):
           def __init__(self, file):
               self.file = file


   .. py:attribute:: DEFAULT_CHUNK_SIZE
      :value: 65536



   .. py:attribute:: file


   .. py:attribute:: name
      :value: None



   .. py:method:: size()


   .. py:method:: chunks(chunk_size=None)

      Read the file and yield chunks of ``chunk_size`` bytes (defaults to
      ``File.DEFAULT_CHUNK_SIZE``).



   .. py:method:: multiple_chunks(chunk_size=None)

      Return ``True`` if you can expect multiple chunks.

      NB: If a particular file representation is in memory, subclasses should
      always return ``False`` -- there's no good reason to read from memory in
      chunks.



   .. py:method:: open(mode=None)


   .. py:method:: close()


.. py:class:: ContentFile(content, name=None)

   Bases: :py:obj:`File`


   A File-like object that takes just raw content, rather than an actual file.


   .. py:attribute:: size


   .. py:method:: open(mode=None)


   .. py:method:: close()


   .. py:method:: write(data)


.. py:function:: endswith_cr(line)

   Return True if line (a text or bytestring) ends with '
   '.


.. py:function:: endswith_lf(line)

   Return True if line (a text or bytestring) ends with '
   '.


.. py:function:: equals_lf(line)

   Return True if line (a text or bytestring) equals '
   '.


