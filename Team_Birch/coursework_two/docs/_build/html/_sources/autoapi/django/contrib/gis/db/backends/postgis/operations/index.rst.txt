django.contrib.gis.db.backends.postgis.operations
=================================================

.. py:module:: django.contrib.gis.db.backends.postgis.operations


Attributes
----------

.. autoapisummary::

   django.contrib.gis.db.backends.postgis.operations.BILATERAL


Classes
-------

.. autoapisummary::

   django.contrib.gis.db.backends.postgis.operations.PostGISOperator
   django.contrib.gis.db.backends.postgis.operations.ST_Polygon
   django.contrib.gis.db.backends.postgis.operations.PostGISOperations


Module Contents
---------------

.. py:data:: BILATERAL
   :value: 'bilateral'


.. py:class:: PostGISOperator(geography=False, raster=False, **kwargs)

   Bases: :py:obj:`django.contrib.gis.db.backends.utils.SpatialOperator`


   Class encapsulating the behavior specific to a GIS operation (used by lookups).


   .. py:attribute:: geography
      :value: False



   .. py:attribute:: raster
      :value: False



   .. py:method:: as_sql(connection, lookup, template_params, *args)


   .. py:method:: check_raster(lookup, template_params)


   .. py:method:: check_geography(lookup, template_params)

      Convert geography fields to geometry types, if necessary.



.. py:class:: ST_Polygon(expr)

   Bases: :py:obj:`django.db.models.Func`


   .. py:attribute:: function
      :value: 'ST_Polygon'



   .. py:method:: output_field()


.. py:class:: PostGISOperations

   Bases: :py:obj:`django.contrib.gis.db.backends.base.operations.BaseSpatialOperations`, :py:obj:`django.db.backends.postgresql.operations.DatabaseOperations`


   .. py:attribute:: name
      :value: 'postgis'



   .. py:attribute:: postgis
      :value: True



   .. py:attribute:: geom_func_prefix
      :value: 'ST_'



   .. py:attribute:: Adapter


   .. py:attribute:: collect
      :value: 'ST_Collect'



   .. py:attribute:: extent
      :value: 'ST_Extent'



   .. py:attribute:: extent3d
      :value: 'ST_3DExtent'



   .. py:attribute:: length3d
      :value: 'ST_3DLength'



   .. py:attribute:: makeline
      :value: 'ST_MakeLine'



   .. py:attribute:: perimeter3d
      :value: 'ST_3DPerimeter'



   .. py:attribute:: unionagg
      :value: 'ST_Union'



   .. py:attribute:: gis_operators


   .. py:attribute:: unsupported_functions


   .. py:attribute:: select
      :value: '%s'



   .. py:attribute:: select_extent
      :value: None



   .. py:method:: function_names()


   .. py:method:: spatial_version()

      Determine the version of the PostGIS library.



   .. py:method:: convert_extent(box)

      Return a 4-tuple extent for the `Extent` aggregate by converting
      the bounding box text returned by PostGIS (`box` argument), for
      example: "BOX(-90.0 30.0, -85.0 40.0)".



   .. py:method:: convert_extent3d(box3d)

      Return a 6-tuple extent for the `Extent3D` aggregate by converting
      the 3d bounding-box text returned by PostGIS (`box3d` argument), for
      example: "BOX3D(-90.0 30.0 1, -85.0 40.0 2)".



   .. py:method:: geo_db_type(f)

      Return the database field type for the given spatial field.



   .. py:method:: get_distance(f, dist_val, lookup_type)

      Retrieve the distance parameters for the given geometry field,
      distance lookup value, and the distance lookup type.

      This is the most complex implementation of the spatial backends due to
      what is supported on geodetic geometry columns vs. what's available on
      projected geometry columns.  In addition, it has to take into account
      the geography column type.



   .. py:method:: get_geom_placeholder(f, value, compiler)

      Provide a proper substitution value for Geometries or rasters that are
      not in the SRID of the field. Specifically, this routine will
      substitute in the ST_Transform() function call.



   .. py:method:: postgis_geos_version()

      Return the version of the GEOS library used with PostGIS.



   .. py:method:: postgis_lib_version()

      Return the version number of the PostGIS library used with PostgreSQL.



   .. py:method:: postgis_proj_version()

      Return the version of the PROJ library used with PostGIS.



   .. py:method:: postgis_version()

      Return PostGIS version number and compile-time options.



   .. py:method:: postgis_full_version()

      Return PostGIS version number and compile-time options.



   .. py:method:: postgis_version_tuple()

      Return the PostGIS version as a tuple (version string, major,
      minor, subminor).



   .. py:method:: proj_version_tuple()

      Return the version of PROJ used by PostGIS as a tuple of the
      major, minor, and subminor release numbers.



   .. py:method:: spatial_aggregate_name(agg_name)


   .. py:method:: geometry_columns()


   .. py:method:: spatial_ref_sys()


   .. py:method:: parse_raster(value)

      Convert a PostGIS HEX String into a dict readable by GDALRaster.



   .. py:method:: distance_expr_for_lookup(lhs, rhs, **kwargs)


   .. py:method:: get_geometry_converter(expression)


   .. py:method:: get_area_att_for_field(field)


