django.db.models.deletion
=========================

.. py:module:: django.db.models.deletion


Exceptions
----------

.. autoapisummary::

   django.db.models.deletion.ProtectedError
   django.db.models.deletion.RestrictedError


Classes
-------

.. autoapisummary::

   django.db.models.deletion.Collector


Functions
---------

.. autoapisummary::

   django.db.models.deletion.CASCADE
   django.db.models.deletion.PROTECT
   django.db.models.deletion.RESTRICT
   django.db.models.deletion.SET
   django.db.models.deletion.SET_NULL
   django.db.models.deletion.SET_DEFAULT
   django.db.models.deletion.DO_NOTHING
   django.db.models.deletion.get_candidate_relations_to_delete


Module Contents
---------------

.. py:exception:: ProtectedError(msg, protected_objects)

   Bases: :py:obj:`django.db.IntegrityError`


   Common base class for all non-exit exceptions.


   .. py:attribute:: protected_objects


.. py:exception:: RestrictedError(msg, restricted_objects)

   Bases: :py:obj:`django.db.IntegrityError`


   Common base class for all non-exit exceptions.


   .. py:attribute:: restricted_objects


.. py:function:: CASCADE(collector, field, sub_objs, using)

.. py:function:: PROTECT(collector, field, sub_objs, using)

.. py:function:: RESTRICT(collector, field, sub_objs, using)

.. py:function:: SET(value)

.. py:function:: SET_NULL(collector, field, sub_objs, using)

.. py:function:: SET_DEFAULT(collector, field, sub_objs, using)

.. py:function:: DO_NOTHING(collector, field, sub_objs, using)

.. py:function:: get_candidate_relations_to_delete(opts)

.. py:class:: Collector(using, origin=None)

   .. py:attribute:: using


   .. py:attribute:: origin
      :value: None



   .. py:attribute:: data


   .. py:attribute:: field_updates


   .. py:attribute:: restricted_objects


   .. py:attribute:: fast_deletes
      :value: []



   .. py:attribute:: dependencies


   .. py:method:: add(objs, source=None, nullable=False, reverse_dependency=False)

      Add 'objs' to the collection of objects to be deleted.  If the call is
      the result of a cascade, 'source' should be the model that caused it,
      and 'nullable' should be set to True if the relation can be null.

      Return a list of all objects that were not already collected.



   .. py:method:: add_dependency(model, dependency, reverse_dependency=False)


   .. py:method:: add_field_update(field, value, objs)

      Schedule a field update. 'objs' must be a homogeneous iterable
      collection of model instances (e.g. a QuerySet).



   .. py:method:: add_restricted_objects(field, objs)


   .. py:method:: clear_restricted_objects_from_set(model, objs)


   .. py:method:: clear_restricted_objects_from_queryset(model, qs)


   .. py:method:: can_fast_delete(objs, from_field=None)

      Determine if the objects in the given queryset-like or single object
      can be fast-deleted. This can be done if there are no cascades, no
      parents and no signal listeners for the object class.

      The 'from_field' tells where we are coming from - we need this to
      determine if the objects are in fact to be deleted. Allow also
      skipping parent -> child -> parent chain preventing fast delete of
      the child.



   .. py:method:: get_del_batches(objs, fields)

      Return the objs in suitably sized batches for the used connection.



   .. py:method:: collect(objs, source=None, nullable=False, collect_related=True, source_attr=None, reverse_dependency=False, keep_parents=False, fail_on_restricted=True)

      Add 'objs' to the collection of objects to be deleted as well as all
      parent instances.  'objs' must be a homogeneous iterable collection of
      model instances (e.g. a QuerySet).  If 'collect_related' is True,
      related objects will be handled by their respective on_delete handler.

      If the call is the result of a cascade, 'source' should be the model
      that caused it and 'nullable' should be set to True, if the relation
      can be null.

      If 'reverse_dependency' is True, 'source' will be deleted before the
      current model, rather than after. (Needed for cascading to parent
      models, the one case in which the cascade follows the forwards
      direction of an FK rather than the reverse direction.)

      If 'keep_parents' is True, data of parent model's will be not deleted.

      If 'fail_on_restricted' is False, error won't be raised even if it's
      prohibited to delete such objects due to RESTRICT, that defers
      restricted object checking in recursive calls where the top-level call
      may need to collect more objects to determine whether restricted ones
      can be deleted.



   .. py:method:: related_objects(related_model, related_fields, objs)

      Get a QuerySet of the related model to objs via related fields.



   .. py:method:: instances_with_model()


   .. py:method:: sort()


   .. py:method:: delete()


