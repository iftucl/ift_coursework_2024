django.middleware.cache
=======================

.. py:module:: django.middleware.cache

.. autoapi-nested-parse::

   Cache middleware. If enabled, each Django-powered page will be cached based on
   URL. The canonical way to enable cache middleware is to set
   ``UpdateCacheMiddleware`` as your first piece of middleware, and
   ``FetchFromCacheMiddleware`` as the last::

       MIDDLEWARE = [
           'django.middleware.cache.UpdateCacheMiddleware',
           ...
           'django.middleware.cache.FetchFromCacheMiddleware'
       ]

   This is counter-intuitive, but correct: ``UpdateCacheMiddleware`` needs to run
   last during the response phase, which processes middleware bottom-up;
   ``FetchFromCacheMiddleware`` needs to run last during the request phase, which
   processes middleware top-down.

   The single-class ``CacheMiddleware`` can be used for some simple sites.
   However, if any other piece of middleware needs to affect the cache key, you'll
   need to use the two-part ``UpdateCacheMiddleware`` and
   ``FetchFromCacheMiddleware``. This'll most often happen when you're using
   Django's ``LocaleMiddleware``.

   More details about how the caching works:

   * Only GET or HEAD-requests with status code 200 are cached.

   * The number of seconds each page is stored for is set by the "max-age" section
     of the response's "Cache-Control" header, falling back to the
     CACHE_MIDDLEWARE_SECONDS setting if the section was not found.

   * This middleware expects that a HEAD request is answered with the same response
     headers exactly like the corresponding GET request.

   * When a hit occurs, a shallow copy of the original response object is returned
     from process_request.

   * Pages will be cached based on the contents of the request headers listed in
     the response's "Vary" header.

   * This middleware also sets ETag, Last-Modified, Expires and Cache-Control
     headers on the response object.



Classes
-------

.. autoapisummary::

   django.middleware.cache.UpdateCacheMiddleware
   django.middleware.cache.FetchFromCacheMiddleware
   django.middleware.cache.CacheMiddleware


Module Contents
---------------

.. py:class:: UpdateCacheMiddleware(get_response)

   Bases: :py:obj:`django.utils.deprecation.MiddlewareMixin`


   Response-phase cache middleware that updates the cache if the response is
   cacheable.

   Must be used as part of the two-part update/fetch cache middleware.
   UpdateCacheMiddleware must be the first piece of middleware in MIDDLEWARE
   so that it'll get called last during the response phase.


   .. py:attribute:: cache_timeout


   .. py:attribute:: page_timeout
      :value: None



   .. py:attribute:: key_prefix


   .. py:attribute:: cache_alias


   .. py:property:: cache


   .. py:method:: process_response(request, response)

      Set the cache, if needed.



.. py:class:: FetchFromCacheMiddleware(get_response)

   Bases: :py:obj:`django.utils.deprecation.MiddlewareMixin`


   Request-phase cache middleware that fetches a page from the cache.

   Must be used as part of the two-part update/fetch cache middleware.
   FetchFromCacheMiddleware must be the last piece of middleware in MIDDLEWARE
   so that it'll get called last during the request phase.


   .. py:attribute:: key_prefix


   .. py:attribute:: cache_alias


   .. py:property:: cache


   .. py:method:: process_request(request)

      Check whether the page is already cached and return the cached
      version if available.



.. py:class:: CacheMiddleware(get_response, cache_timeout=None, page_timeout=None, **kwargs)

   Bases: :py:obj:`UpdateCacheMiddleware`, :py:obj:`FetchFromCacheMiddleware`


   Cache middleware that provides basic behavior for many simple sites.

   Also used as the hook point for the cache decorator, which is generated
   using the decorator-from-middleware utility.


   .. py:attribute:: page_timeout
      :value: None



