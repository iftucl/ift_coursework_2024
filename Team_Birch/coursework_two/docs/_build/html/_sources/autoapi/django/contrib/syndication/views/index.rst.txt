django.contrib.syndication.views
================================

.. py:module:: django.contrib.syndication.views


Exceptions
----------

.. autoapisummary::

   django.contrib.syndication.views.FeedDoesNotExist


Classes
-------

.. autoapisummary::

   django.contrib.syndication.views.Feed


Functions
---------

.. autoapisummary::

   django.contrib.syndication.views.add_domain


Module Contents
---------------

.. py:function:: add_domain(domain, url, secure=False)

.. py:exception:: FeedDoesNotExist

   Bases: :py:obj:`django.core.exceptions.ObjectDoesNotExist`


   The requested object does not exist


.. py:class:: Feed

   .. py:attribute:: feed_type


   .. py:attribute:: title_template
      :value: None



   .. py:attribute:: description_template
      :value: None



   .. py:attribute:: language
      :value: None



   .. py:method:: item_title(item)


   .. py:method:: item_description(item)


   .. py:method:: item_link(item)


   .. py:method:: item_enclosures(item)


   .. py:method:: feed_extra_kwargs(obj)

      Return an extra keyword arguments dictionary that is used when
      initializing the feed generator.



   .. py:method:: item_extra_kwargs(item)

      Return an extra keyword arguments dictionary that is used with
      the `add_item` call of the feed generator.



   .. py:method:: get_object(request, *args, **kwargs)


   .. py:method:: get_context_data(**kwargs)

      Return a dictionary to use as extra context if either
      ``self.description_template`` or ``self.item_template`` are used.

      Default implementation preserves the old behavior
      of using {'obj': item, 'site': current_site} as the context.



   .. py:method:: get_feed(obj, request)

      Return a feedgenerator.DefaultFeed object, fully populated, for
      this feed. Raise FeedDoesNotExist for invalid parameters.



