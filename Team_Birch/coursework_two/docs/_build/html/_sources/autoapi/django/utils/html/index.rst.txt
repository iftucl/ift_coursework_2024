django.utils.html
=================

.. py:module:: django.utils.html

.. autoapi-nested-parse::

   HTML utilities suitable for global use.



Attributes
----------

.. autoapisummary::

   django.utils.html.urlizer


Classes
-------

.. autoapisummary::

   django.utils.html.MLStripper
   django.utils.html.Urlizer


Functions
---------

.. autoapisummary::

   django.utils.html.escape
   django.utils.html.escapejs
   django.utils.html.json_script
   django.utils.html.conditional_escape
   django.utils.html.format_html
   django.utils.html.format_html_join
   django.utils.html.linebreaks
   django.utils.html.strip_tags
   django.utils.html.strip_spaces_between_tags
   django.utils.html.smart_urlquote
   django.utils.html.urlize
   django.utils.html.avoid_wrapping
   django.utils.html.html_safe


Module Contents
---------------

.. py:function:: escape(text)

   Return the given text with ampersands, quotes and angle brackets encoded
   for use in HTML.

   Always escape input, even if it's already escaped and marked as such.
   This may result in double-escaping. If this is a concern, use
   conditional_escape() instead.


.. py:function:: escapejs(value)

   Hex encode characters for use in JavaScript strings.


.. py:function:: json_script(value, element_id=None, encoder=None)

   Escape all the HTML/XML special characters with their unicode escapes, so
   value is safe to be output anywhere except for inside a tag attribute. Wrap
   the escaped JSON in a script tag.


.. py:function:: conditional_escape(text)

   Similar to escape(), except that it doesn't operate on pre-escaped strings.

   This function relies on the __html__ convention used both by Django's
   SafeData class and by third-party libraries like markupsafe.


.. py:function:: format_html(format_string, *args, **kwargs)

   Similar to str.format, but pass all arguments through conditional_escape(),
   and call mark_safe() on the result. This function should be used instead
   of str.format or % interpolation to build up small HTML fragments.


.. py:function:: format_html_join(sep, format_string, args_generator)

       A wrapper of format_html, for the common case of a group of arguments that
       need to be formatted using the same format string, and then joined using
       'sep'. 'sep' is also passed through conditional_escape.

       'args_generator' should be an iterator that returns the sequence of 'args'
       that will be passed to format_html.

       Example:

         format_html_join('
   ', "<li>{} {}</li>", ((u.first_name, u.last_name)
                                                     for u in users))



.. py:function:: linebreaks(value, autoescape=False)

   Convert newlines into <p> and <br>s.


.. py:class:: MLStripper

   Bases: :py:obj:`html.parser.HTMLParser`


   Find tags and other markup and call handler functions.

   Usage:
       p = HTMLParser()
       p.feed(data)
       ...
       p.close()

   Start tags are handled by calling self.handle_starttag() or
   self.handle_startendtag(); end tags by self.handle_endtag().  The
   data between tags is passed from the parser to the derived class
   by calling self.handle_data() with the data as argument (the data
   may be split up in arbitrary chunks).  If convert_charrefs is
   True the character references are converted automatically to the
   corresponding Unicode character (and self.handle_data() is no
   longer split in chunks), otherwise they are passed by calling
   self.handle_entityref() or self.handle_charref() with the string
   containing respectively the named or numeric reference as the
   argument.


   .. py:attribute:: fed
      :value: []



   .. py:method:: handle_data(d)


   .. py:method:: handle_entityref(name)


   .. py:method:: handle_charref(name)


   .. py:method:: get_data()


.. py:function:: strip_tags(value)

   Return the given HTML with all tags stripped.


.. py:function:: strip_spaces_between_tags(value)

   Return the given HTML with spaces between tags removed.


.. py:function:: smart_urlquote(url)

   Quote a URL if it isn't already quoted.


.. py:class:: Urlizer

   Convert any URLs in text into clickable links.

   Work on http://, https://, www. links, and also on links ending in one of
   the original seven gTLDs (.com, .edu, .gov, .int, .mil, .net, and .org).
   Links can have trailing punctuation (periods, commas, close-parens) and
   leading punctuation (opening parens) and it'll still do the right thing.


   .. py:attribute:: trailing_punctuation_chars
      :value: '.,:;!'



   .. py:attribute:: wrapping_punctuation
      :value: [('(', ')'), ('[', ']')]



   .. py:attribute:: simple_url_re


   .. py:attribute:: simple_url_2_re


   .. py:attribute:: word_split_re


   .. py:attribute:: mailto_template
      :value: 'mailto:{local}@{domain}'



   .. py:attribute:: url_template
      :value: '<a href="{href}"{attrs}>{url}</a>'



   .. py:method:: handle_word(word, *, safe_input, trim_url_limit=None, nofollow=False, autoescape=False)


   .. py:method:: trim_url(x, *, limit)


   .. py:method:: trim_punctuation(word)

      Trim trailing and wrapping punctuation from `word`. Return the items of
      the new state.



   .. py:method:: is_email_simple(value)
      :staticmethod:


      Return True if value looks like an email address.



.. py:data:: urlizer

.. py:function:: urlize(text, trim_url_limit=None, nofollow=False, autoescape=False)

.. py:function:: avoid_wrapping(value)

   Avoid text wrapping in the middle of a phrase by adding non-breaking
   spaces where there previously were normal spaces.


.. py:function:: html_safe(klass)

   A decorator that defines the __html__ method. This helps non-Django
   templates to detect classes whose __str__ methods return SafeString.


