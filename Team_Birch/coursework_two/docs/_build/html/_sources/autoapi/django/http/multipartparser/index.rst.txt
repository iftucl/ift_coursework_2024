django.http.multipartparser
===========================

.. py:module:: django.http.multipartparser

.. autoapi-nested-parse::

   Multi-part parsing for file uploads.

   Exposes one class, ``MultiPartParser``, which feeds chunks of uploaded data to
   file upload handlers for processing.



Exceptions
----------

.. autoapisummary::

   django.http.multipartparser.MultiPartParserError
   django.http.multipartparser.InputStreamExhausted


Classes
-------

.. autoapisummary::

   django.http.multipartparser.MultiPartParser


Module Contents
---------------

.. py:exception:: MultiPartParserError

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


.. py:exception:: InputStreamExhausted

   Bases: :py:obj:`Exception`


   No more reads are allowed from this device.


.. py:class:: MultiPartParser(META, input_data, upload_handlers, encoding=None)

   An RFC 7578 multipart/form-data parser.

   ``MultiValueDict.parse()`` reads the input stream in ``chunk_size`` chunks
   and returns a tuple of ``(MultiValueDict(POST), MultiValueDict(FILES))``.


   .. py:attribute:: boundary_re


   .. py:method:: parse()


   .. py:method:: handle_file_complete(old_field_name, counters)

      Handle all the signaling that takes place when a file is complete.



   .. py:method:: sanitize_file_name(file_name)

      Sanitize the filename of an upload.

      Remove all possible path separators, even though that might remove more
      than actually required by the target system. Filenames that could
      potentially cause problems (current/parent dir) are also discarded.

      It should be noted that this function could still return a "filepath"
      like "C:some_file.txt" which is handled later on by the storage layer.
      So while this function does sanitize filenames to some extent, the
      resulting filename should still be considered as untrusted user input.



   .. py:attribute:: IE_sanitize


