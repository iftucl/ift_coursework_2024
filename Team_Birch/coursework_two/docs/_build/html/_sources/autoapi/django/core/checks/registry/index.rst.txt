django.core.checks.registry
===========================

.. py:module:: django.core.checks.registry


Attributes
----------

.. autoapisummary::

   django.core.checks.registry.registry
   django.core.checks.registry.register
   django.core.checks.registry.run_checks
   django.core.checks.registry.tag_exists


Classes
-------

.. autoapisummary::

   django.core.checks.registry.Tags
   django.core.checks.registry.CheckRegistry


Module Contents
---------------

.. py:class:: Tags

   Built-in tags for internal checks.


   .. py:attribute:: admin
      :value: 'admin'



   .. py:attribute:: async_support
      :value: 'async_support'



   .. py:attribute:: caches
      :value: 'caches'



   .. py:attribute:: compatibility
      :value: 'compatibility'



   .. py:attribute:: database
      :value: 'database'



   .. py:attribute:: files
      :value: 'files'



   .. py:attribute:: models
      :value: 'models'



   .. py:attribute:: security
      :value: 'security'



   .. py:attribute:: signals
      :value: 'signals'



   .. py:attribute:: sites
      :value: 'sites'



   .. py:attribute:: staticfiles
      :value: 'staticfiles'



   .. py:attribute:: templates
      :value: 'templates'



   .. py:attribute:: translation
      :value: 'translation'



   .. py:attribute:: urls
      :value: 'urls'



.. py:class:: CheckRegistry

   .. py:attribute:: registered_checks


   .. py:attribute:: deployment_checks


   .. py:method:: register(check=None, *tags, **kwargs)

      Can be used as a function or a decorator. Register given function
      `f` labeled with given `tags`. The function should receive **kwargs
      and return list of Errors and Warnings.

      Example::

          registry = CheckRegistry()
          @registry.register('mytag', 'anothertag')
          def my_check(app_configs, **kwargs):
              # ... perform checks and collect `errors` ...
              return errors
          # or
          registry.register(my_check, 'mytag', 'anothertag')



   .. py:method:: run_checks(app_configs=None, tags=None, include_deployment_checks=False, databases=None)

      Run all registered checks and return list of Errors and Warnings.



   .. py:method:: tag_exists(tag, include_deployment_checks=False)


   .. py:method:: tags_available(deployment_checks=False)


   .. py:method:: get_checks(include_deployment_checks=False)


.. py:data:: registry

.. py:data:: register

.. py:data:: run_checks

.. py:data:: tag_exists

