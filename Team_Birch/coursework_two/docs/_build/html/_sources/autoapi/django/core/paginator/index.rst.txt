django.core.paginator
=====================

.. py:module:: django.core.paginator


Exceptions
----------

.. autoapisummary::

   django.core.paginator.UnorderedObjectListWarning
   django.core.paginator.InvalidPage
   django.core.paginator.PageNotAnInteger
   django.core.paginator.EmptyPage


Classes
-------

.. autoapisummary::

   django.core.paginator.Paginator
   django.core.paginator.Page


Module Contents
---------------

.. py:exception:: UnorderedObjectListWarning

   Bases: :py:obj:`RuntimeWarning`


   Base class for warnings about dubious runtime behavior.


.. py:exception:: InvalidPage

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


.. py:exception:: PageNotAnInteger

   Bases: :py:obj:`InvalidPage`


   Common base class for all non-exit exceptions.


.. py:exception:: EmptyPage

   Bases: :py:obj:`InvalidPage`


   Common base class for all non-exit exceptions.


.. py:class:: Paginator(object_list, per_page, orphans=0, allow_empty_first_page=True)

   .. py:attribute:: ELLIPSIS


   .. py:attribute:: object_list


   .. py:attribute:: per_page


   .. py:attribute:: orphans
      :value: 0



   .. py:attribute:: allow_empty_first_page
      :value: True



   .. py:method:: validate_number(number)

      Validate the given 1-based page number.



   .. py:method:: get_page(number)

      Return a valid page, even if the page argument isn't a number or isn't
      in range.



   .. py:method:: page(number)

      Return a Page object for the given 1-based page number.



   .. py:method:: count()

      Return the total number of objects, across all pages.



   .. py:method:: num_pages()

      Return the total number of pages.



   .. py:property:: page_range

      Return a 1-based range of pages for iterating through within
      a template for loop.


   .. py:method:: get_elided_page_range(number=1, *, on_each_side=3, on_ends=2)

      Return a 1-based range of pages with some values elided.

      If the page range is larger than a given size, the whole range is not
      provided and a compact form is returned instead, e.g. for a paginator
      with 50 pages, if page 43 were the current page, the output, with the
      default arguments, would be:

          1, 2, …, 40, 41, 42, 43, 44, 45, 46, …, 49, 50.



.. py:class:: Page(object_list, number, paginator)

   Bases: :py:obj:`collections.abc.Sequence`


   All the operations on a read-only sequence.

   Concrete subclasses must override __new__ or __init__,
   __getitem__, and __len__.


   .. py:attribute:: object_list


   .. py:attribute:: number


   .. py:attribute:: paginator


   .. py:method:: has_next()


   .. py:method:: has_previous()


   .. py:method:: has_other_pages()


   .. py:method:: next_page_number()


   .. py:method:: previous_page_number()


   .. py:method:: start_index()

      Return the 1-based index of the first object on this page,
      relative to total objects in the paginator.



   .. py:method:: end_index()

      Return the 1-based index of the last object on this page,
      relative to total objects found (hits).



