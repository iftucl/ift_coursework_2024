django.contrib.auth.views
=========================

.. py:module:: django.contrib.auth.views


Attributes
----------

.. autoapisummary::

   django.contrib.auth.views.UserModel
   django.contrib.auth.views.INTERNAL_RESET_SESSION_TOKEN


Classes
-------

.. autoapisummary::

   django.contrib.auth.views.RedirectURLMixin
   django.contrib.auth.views.LoginView
   django.contrib.auth.views.LogoutView
   django.contrib.auth.views.PasswordContextMixin
   django.contrib.auth.views.PasswordResetView
   django.contrib.auth.views.PasswordResetDoneView
   django.contrib.auth.views.PasswordResetConfirmView
   django.contrib.auth.views.PasswordResetCompleteView
   django.contrib.auth.views.PasswordChangeView
   django.contrib.auth.views.PasswordChangeDoneView


Functions
---------

.. autoapisummary::

   django.contrib.auth.views.logout_then_login
   django.contrib.auth.views.redirect_to_login


Module Contents
---------------

.. py:data:: UserModel

.. py:class:: RedirectURLMixin

   .. py:attribute:: next_page
      :value: None



   .. py:attribute:: redirect_field_name
      :value: 'next'



   .. py:attribute:: success_url_allowed_hosts


   .. py:method:: get_success_url()


   .. py:method:: get_redirect_url()

      Return the user-originating redirect URL if it's safe.



   .. py:method:: get_success_url_allowed_hosts()


   .. py:method:: get_default_redirect_url()

      Return the default redirect URL.



.. py:class:: LoginView

   Bases: :py:obj:`RedirectURLMixin`, :py:obj:`django.views.generic.edit.FormView`


   Display the login form and handle the login action.


   .. py:attribute:: form_class


   .. py:attribute:: authentication_form
      :value: None



   .. py:attribute:: template_name
      :value: 'registration/login.html'



   .. py:attribute:: redirect_authenticated_user
      :value: False



   .. py:attribute:: extra_context
      :value: None



   .. py:method:: dispatch(request, *args, **kwargs)


   .. py:method:: get_default_redirect_url()

      Return the default redirect URL.



   .. py:method:: get_form_class()


   .. py:method:: get_form_kwargs()


   .. py:method:: form_valid(form)

      Security check complete. Log the user in.



   .. py:method:: get_context_data(**kwargs)


.. py:class:: LogoutView

   Bases: :py:obj:`RedirectURLMixin`, :py:obj:`django.views.generic.base.TemplateView`


   Log out the user and display the 'You are logged out' message.


   .. py:attribute:: http_method_names
      :value: ['get', 'head', 'post', 'options']



   .. py:attribute:: template_name
      :value: 'registration/logged_out.html'



   .. py:attribute:: extra_context
      :value: None



   .. py:method:: dispatch(request, *args, **kwargs)


   .. py:method:: post(request, *args, **kwargs)

      Logout may be done via POST.



   .. py:attribute:: get


   .. py:method:: get_default_redirect_url()

      Return the default redirect URL.



   .. py:method:: get_context_data(**kwargs)


.. py:function:: logout_then_login(request, login_url=None)

   Log out the user if they are logged in. Then redirect to the login page.


.. py:function:: redirect_to_login(next, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME)

   Redirect the user to the login page, passing the given 'next' page.


.. py:class:: PasswordContextMixin

   .. py:attribute:: extra_context
      :value: None



   .. py:method:: get_context_data(**kwargs)


.. py:class:: PasswordResetView

   Bases: :py:obj:`PasswordContextMixin`, :py:obj:`django.views.generic.edit.FormView`


   .. py:attribute:: email_template_name
      :value: 'registration/password_reset_email.html'



   .. py:attribute:: extra_email_context
      :value: None



   .. py:attribute:: form_class


   .. py:attribute:: from_email
      :value: None



   .. py:attribute:: html_email_template_name
      :value: None



   .. py:attribute:: subject_template_name
      :value: 'registration/password_reset_subject.txt'



   .. py:attribute:: success_url


   .. py:attribute:: template_name
      :value: 'registration/password_reset_form.html'



   .. py:attribute:: title


   .. py:attribute:: token_generator


   .. py:method:: dispatch(*args, **kwargs)


   .. py:method:: form_valid(form)


.. py:data:: INTERNAL_RESET_SESSION_TOKEN
   :value: '_password_reset_token'


.. py:class:: PasswordResetDoneView

   Bases: :py:obj:`PasswordContextMixin`, :py:obj:`django.views.generic.base.TemplateView`


   .. py:attribute:: template_name
      :value: 'registration/password_reset_done.html'



   .. py:attribute:: title


.. py:class:: PasswordResetConfirmView

   Bases: :py:obj:`PasswordContextMixin`, :py:obj:`django.views.generic.edit.FormView`


   .. py:attribute:: form_class


   .. py:attribute:: post_reset_login
      :value: False



   .. py:attribute:: post_reset_login_backend
      :value: None



   .. py:attribute:: reset_url_token
      :value: 'set-password'



   .. py:attribute:: success_url


   .. py:attribute:: template_name
      :value: 'registration/password_reset_confirm.html'



   .. py:attribute:: title


   .. py:attribute:: token_generator


   .. py:method:: dispatch(*args, **kwargs)


   .. py:method:: get_user(uidb64)


   .. py:method:: get_form_kwargs()


   .. py:method:: form_valid(form)


   .. py:method:: get_context_data(**kwargs)


.. py:class:: PasswordResetCompleteView

   Bases: :py:obj:`PasswordContextMixin`, :py:obj:`django.views.generic.base.TemplateView`


   .. py:attribute:: template_name
      :value: 'registration/password_reset_complete.html'



   .. py:attribute:: title


   .. py:method:: get_context_data(**kwargs)


.. py:class:: PasswordChangeView

   Bases: :py:obj:`PasswordContextMixin`, :py:obj:`django.views.generic.edit.FormView`


   .. py:attribute:: form_class


   .. py:attribute:: success_url


   .. py:attribute:: template_name
      :value: 'registration/password_change_form.html'



   .. py:attribute:: title


   .. py:method:: dispatch(*args, **kwargs)


   .. py:method:: get_form_kwargs()


   .. py:method:: form_valid(form)


.. py:class:: PasswordChangeDoneView

   Bases: :py:obj:`PasswordContextMixin`, :py:obj:`django.views.generic.base.TemplateView`


   .. py:attribute:: template_name
      :value: 'registration/password_change_done.html'



   .. py:attribute:: title


   .. py:method:: dispatch(*args, **kwargs)


