django.contrib.auth.password_validation
=======================================

.. py:module:: django.contrib.auth.password_validation


Attributes
----------

.. autoapisummary::

   django.contrib.auth.password_validation.password_validators_help_text_html


Classes
-------

.. autoapisummary::

   django.contrib.auth.password_validation.MinimumLengthValidator
   django.contrib.auth.password_validation.UserAttributeSimilarityValidator
   django.contrib.auth.password_validation.CommonPasswordValidator
   django.contrib.auth.password_validation.NumericPasswordValidator


Functions
---------

.. autoapisummary::

   django.contrib.auth.password_validation.get_default_password_validators
   django.contrib.auth.password_validation.get_password_validators
   django.contrib.auth.password_validation.validate_password
   django.contrib.auth.password_validation.password_changed
   django.contrib.auth.password_validation.password_validators_help_texts
   django.contrib.auth.password_validation.exceeds_maximum_length_ratio


Module Contents
---------------

.. py:function:: get_default_password_validators()

.. py:function:: get_password_validators(validator_config)

.. py:function:: validate_password(password, user=None, password_validators=None)

   Validate that the password meets all validator requirements.

   If the password is valid, return ``None``.
   If the password is invalid, raise ValidationError with all error messages.


.. py:function:: password_changed(password, user=None, password_validators=None)

   Inform all validators that have implemented a password_changed() method
   that the password has been changed.


.. py:function:: password_validators_help_texts(password_validators=None)

   Return a list of all help texts of all configured validators.


.. py:data:: password_validators_help_text_html

.. py:class:: MinimumLengthValidator(min_length=8)

   Validate that the password is of a minimum length.


   .. py:attribute:: min_length
      :value: 8



   .. py:method:: validate(password, user=None)


   .. py:method:: get_help_text()


.. py:function:: exceeds_maximum_length_ratio(password, max_similarity, value)

   Test that value is within a reasonable range of password.

   The following ratio calculations are based on testing SequenceMatcher like
   this:

   for i in range(0,6):
     print(10**i, SequenceMatcher(a='A', b='A'*(10**i)).quick_ratio())

   which yields:

   1 1.0
   10 0.18181818181818182
   100 0.019801980198019802
   1000 0.001998001998001998
   10000 0.00019998000199980003
   100000 1.999980000199998e-05

   This means a length_ratio of 10 should never yield a similarity higher than
   0.2, for 100 this is down to 0.02 and for 1000 it is 0.002. This can be
   calculated via 2 / length_ratio. As a result we avoid the potentially
   expensive sequence matching.


.. py:class:: UserAttributeSimilarityValidator(user_attributes=DEFAULT_USER_ATTRIBUTES, max_similarity=0.7)

   Validate that the password is sufficiently different from the user's
   attributes.

   If no specific attributes are provided, look at a sensible list of
   defaults. Attributes that don't exist are ignored. Comparison is made to
   not only the full attribute value, but also its components, so that, for
   example, a password is validated against either part of an email address,
   as well as the full address.


   .. py:attribute:: DEFAULT_USER_ATTRIBUTES
      :value: ('username', 'first_name', 'last_name', 'email')



   .. py:attribute:: user_attributes
      :value: ('username', 'first_name', 'last_name', 'email')



   .. py:attribute:: max_similarity
      :value: 0.7



   .. py:method:: validate(password, user=None)


   .. py:method:: get_help_text()


.. py:class:: CommonPasswordValidator(password_list_path=DEFAULT_PASSWORD_LIST_PATH)

   Validate that the password is not a common password.

   The password is rejected if it occurs in a provided list of passwords,
   which may be gzipped. The list Django ships with contains 20000 common
   passwords (lowercased and deduplicated), created by Royce Williams:
   https://gist.github.com/roycewilliams/226886fd01572964e1431ac8afc999ce
   The password list must be lowercased to match the comparison in validate().


   .. py:method:: DEFAULT_PASSWORD_LIST_PATH()


   .. py:method:: validate(password, user=None)


   .. py:method:: get_help_text()


.. py:class:: NumericPasswordValidator

   Validate that the password is not entirely numeric.


   .. py:method:: validate(password, user=None)


   .. py:method:: get_help_text()


