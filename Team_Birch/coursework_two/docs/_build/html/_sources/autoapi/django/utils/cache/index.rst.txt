django.utils.cache
==================

.. py:module:: django.utils.cache

.. autoapi-nested-parse::

   This module contains helper functions for controlling caching. It does so by
   managing the "Vary" header of responses. It includes functions to patch the
   header of response objects directly and decorators that change functions to do
   that header-patching themselves.

   For information on the Vary header, see RFC 9110 Section 12.5.5.

   Essentially, the "Vary" HTTP header defines which headers a cache should take
   into account when building its cache key. Requests with the same path but
   different header content for headers named in "Vary" need to get different
   cache keys to prevent delivery of wrong content.

   An example: i18n middleware would need to distinguish caches by the
   "Accept-language" header.



Attributes
----------

.. autoapisummary::

   django.utils.cache.cc_delim_re


Functions
---------

.. autoapisummary::

   django.utils.cache.patch_cache_control
   django.utils.cache.get_max_age
   django.utils.cache.set_response_etag
   django.utils.cache.get_conditional_response
   django.utils.cache.patch_response_headers
   django.utils.cache.add_never_cache_headers
   django.utils.cache.patch_vary_headers
   django.utils.cache.has_vary_header
   django.utils.cache.get_cache_key
   django.utils.cache.learn_cache_key


Module Contents
---------------

.. py:data:: cc_delim_re

.. py:function:: patch_cache_control(response, **kwargs)

   Patch the Cache-Control header by adding all keyword arguments to it.
   The transformation is as follows:

   * All keyword parameter names are turned to lowercase, and underscores
     are converted to hyphens.
   * If the value of a parameter is True (exactly True, not just a
     true value), only the parameter name is added to the header.
   * All other parameters are added with their value, after applying
     str() to it.


.. py:function:: get_max_age(response)

   Return the max-age from the response Cache-Control header as an integer,
   or None if it wasn't found or wasn't an integer.


.. py:function:: set_response_etag(response)

.. py:function:: get_conditional_response(request, etag=None, last_modified=None, response=None)

.. py:function:: patch_response_headers(response, cache_timeout=None)

   Add HTTP caching headers to the given HttpResponse: Expires and
   Cache-Control.

   Each header is only added if it isn't already set.

   cache_timeout is in seconds. The CACHE_MIDDLEWARE_SECONDS setting is used
   by default.


.. py:function:: add_never_cache_headers(response)

   Add headers to a response to indicate that a page should never be cached.


.. py:function:: patch_vary_headers(response, newheaders)

   Add (or update) the "Vary" header in the given HttpResponse object.
   newheaders is a list of header names that should be in "Vary". If headers
   contains an asterisk, then "Vary" header will consist of a single asterisk
   '*'. Otherwise, existing headers in "Vary" aren't removed.


.. py:function:: has_vary_header(response, header_query)

   Check to see if the response has a given header name in its Vary header.


.. py:function:: get_cache_key(request, key_prefix=None, method='GET', cache=None)

   Return a cache key based on the request URL and query. It can be used
   in the request phase because it pulls the list of headers to take into
   account from the global URL registry and uses those to build a cache key
   to check against.

   If there isn't a headerlist stored, return None, indicating that the page
   needs to be rebuilt.


.. py:function:: learn_cache_key(request, response, cache_timeout=None, key_prefix=None, cache=None)

   Learn what headers to take into account for some request URL from the
   response object. Store those headers in a global URL registry so that
   later access to that URL will know what headers to take into account
   without building the response object itself. The headers are named in the
   Vary header of the response, but we want to prevent response generation.

   The list of headers to use for cache key generation is stored in the same
   cache as the pages themselves. If the cache ages some data out of the
   cache, this just means that we have to build the response once to get at
   the Vary header and so at the list of headers to use for the cache key.


