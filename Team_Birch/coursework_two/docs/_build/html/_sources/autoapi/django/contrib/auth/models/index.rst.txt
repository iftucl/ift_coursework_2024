django.contrib.auth.models
==========================

.. py:module:: django.contrib.auth.models


Classes
-------

.. autoapisummary::

   django.contrib.auth.models.PermissionManager
   django.contrib.auth.models.Permission
   django.contrib.auth.models.GroupManager
   django.contrib.auth.models.Group
   django.contrib.auth.models.UserManager
   django.contrib.auth.models.PermissionsMixin
   django.contrib.auth.models.AbstractUser
   django.contrib.auth.models.User
   django.contrib.auth.models.AnonymousUser


Functions
---------

.. autoapisummary::

   django.contrib.auth.models.update_last_login


Module Contents
---------------

.. py:function:: update_last_login(sender, user, **kwargs)

   A signal receiver which updates the last_login date for
   the user logging in.


.. py:class:: PermissionManager

   Bases: :py:obj:`django.db.models.Manager`


   .. py:attribute:: use_in_migrations
      :value: True



   .. py:method:: get_by_natural_key(codename, app_label, model)


.. py:class:: Permission

   Bases: :py:obj:`django.db.models.Model`


   The permissions system provides a way to assign permissions to specific
   users and groups of users.

   The permission system is used by the Django admin site, but may also be
   useful in your own code. The Django admin site uses permissions as follows:

       - The "add" permission limits the user's ability to view the "add" form
         and add an object.
       - The "change" permission limits a user's ability to view the change
         list, view the "change" form and change an object.
       - The "delete" permission limits the ability to delete an object.
       - The "view" permission limits the ability to view an object.

   Permissions are set globally per type of object, not per specific object
   instance. It is possible to say "Mary may change news stories," but it's
   not currently possible to say "Mary may change news stories, but only the
   ones she created herself" or "Mary may only change news stories that have a
   certain status or publication date."

   The permissions listed above are automatically created for each model.


   .. py:attribute:: name


   .. py:attribute:: content_type


   .. py:attribute:: codename


   .. py:attribute:: objects


   .. py:class:: Meta

      .. py:attribute:: verbose_name


      .. py:attribute:: verbose_name_plural


      .. py:attribute:: unique_together
         :value: [['content_type', 'codename']]



      .. py:attribute:: ordering
         :value: ['content_type__app_label', 'content_type__model', 'codename']




   .. py:method:: natural_key()


.. py:class:: GroupManager

   Bases: :py:obj:`django.db.models.Manager`


   The manager for the auth's Group model.


   .. py:attribute:: use_in_migrations
      :value: True



   .. py:method:: get_by_natural_key(name)


.. py:class:: Group

   Bases: :py:obj:`django.db.models.Model`


   Groups are a generic way of categorizing users to apply permissions, or
   some other label, to those users. A user can belong to any number of
   groups.

   A user in a group automatically has all the permissions granted to that
   group. For example, if the group 'Site editors' has the permission
   can_edit_home_page, any user in that group will have that permission.

   Beyond permissions, groups are a convenient way to categorize users to
   apply some label, or extended functionality, to them. For example, you
   could create a group 'Special users', and you could write code that would
   do special things to those users -- such as giving them access to a
   members-only portion of your site, or sending them members-only email
   messages.


   .. py:attribute:: name


   .. py:attribute:: permissions


   .. py:attribute:: objects


   .. py:class:: Meta

      .. py:attribute:: verbose_name


      .. py:attribute:: verbose_name_plural



   .. py:method:: natural_key()


.. py:class:: UserManager

   Bases: :py:obj:`django.contrib.auth.base_user.BaseUserManager`


   .. py:attribute:: use_in_migrations
      :value: True



   .. py:method:: create_user(username, email=None, password=None, **extra_fields)


   .. py:method:: create_superuser(username, email=None, password=None, **extra_fields)


   .. py:method:: with_perm(perm, is_active=True, include_superusers=True, backend=None, obj=None)


.. py:class:: PermissionsMixin

   Bases: :py:obj:`django.db.models.Model`


   Add the fields and methods necessary to support the Group and Permission
   models using the ModelBackend.


   .. py:attribute:: is_superuser


   .. py:attribute:: groups


   .. py:attribute:: user_permissions


   .. py:class:: Meta

      .. py:attribute:: abstract
         :value: True




   .. py:method:: get_user_permissions(obj=None)

      Return a list of permission strings that this user has directly.
      Query all available auth backends. If an object is passed in,
      return only permissions matching this object.



   .. py:method:: get_group_permissions(obj=None)

      Return a list of permission strings that this user has through their
      groups. Query all available auth backends. If an object is passed in,
      return only permissions matching this object.



   .. py:method:: get_all_permissions(obj=None)


   .. py:method:: has_perm(perm, obj=None)

      Return True if the user has the specified permission. Query all
      available auth backends, but return immediately if any backend returns
      True. Thus, a user who has permission from a single auth backend is
      assumed to have permission in general. If an object is provided, check
      permissions for that object.



   .. py:method:: has_perms(perm_list, obj=None)

      Return True if the user has each of the specified permissions. If
      object is passed, check if the user has all required perms for it.



   .. py:method:: has_module_perms(app_label)

      Return True if the user has any permissions in the given app label.
      Use similar logic as has_perm(), above.



.. py:class:: AbstractUser

   Bases: :py:obj:`django.contrib.auth.base_user.AbstractBaseUser`, :py:obj:`PermissionsMixin`


   An abstract base class implementing a fully featured User model with
   admin-compliant permissions.

   Username and password are required. Other fields are optional.


   .. py:attribute:: username_validator


   .. py:attribute:: username


   .. py:attribute:: first_name


   .. py:attribute:: last_name


   .. py:attribute:: email


   .. py:attribute:: is_staff


   .. py:attribute:: is_active


   .. py:attribute:: date_joined


   .. py:attribute:: objects


   .. py:attribute:: EMAIL_FIELD
      :value: 'email'



   .. py:attribute:: USERNAME_FIELD
      :value: 'username'



   .. py:attribute:: REQUIRED_FIELDS
      :value: ['email']



   .. py:class:: Meta

      .. py:attribute:: verbose_name


      .. py:attribute:: verbose_name_plural


      .. py:attribute:: abstract
         :value: True




   .. py:method:: clean()


   .. py:method:: get_full_name()

      Return the first_name plus the last_name, with a space in between.



   .. py:method:: get_short_name()

      Return the short name for the user.



   .. py:method:: email_user(subject, message, from_email=None, **kwargs)

      Send an email to this user.



.. py:class:: User

   Bases: :py:obj:`AbstractUser`


   Users within the Django authentication system are represented by this
   model.

   Username and password are required. Other fields are optional.


   .. py:class:: Meta

      Bases: :py:obj:`AbstractUser`


      .. py:attribute:: swappable
         :value: 'AUTH_USER_MODEL'




.. py:class:: AnonymousUser

   .. py:attribute:: id
      :value: None



   .. py:attribute:: pk
      :value: None



   .. py:attribute:: username
      :value: ''



   .. py:attribute:: is_staff
      :value: False



   .. py:attribute:: is_active
      :value: False



   .. py:attribute:: is_superuser
      :value: False



   .. py:method:: save()
      :abstractmethod:



   .. py:method:: delete()
      :abstractmethod:



   .. py:method:: set_password(raw_password)
      :abstractmethod:



   .. py:method:: check_password(raw_password)
      :abstractmethod:



   .. py:property:: groups


   .. py:property:: user_permissions


   .. py:method:: get_user_permissions(obj=None)


   .. py:method:: get_group_permissions(obj=None)


   .. py:method:: get_all_permissions(obj=None)


   .. py:method:: has_perm(perm, obj=None)


   .. py:method:: has_perms(perm_list, obj=None)


   .. py:method:: has_module_perms(module)


   .. py:property:: is_anonymous


   .. py:property:: is_authenticated


   .. py:method:: get_username()


