django.core.files.uploadhandler
===============================

.. py:module:: django.core.files.uploadhandler

.. autoapi-nested-parse::

   Base file upload handler classes, and the built-in concrete subclasses



Exceptions
----------

.. autoapisummary::

   django.core.files.uploadhandler.UploadFileException
   django.core.files.uploadhandler.StopUpload
   django.core.files.uploadhandler.SkipFile
   django.core.files.uploadhandler.StopFutureHandlers


Classes
-------

.. autoapisummary::

   django.core.files.uploadhandler.FileUploadHandler
   django.core.files.uploadhandler.TemporaryFileUploadHandler
   django.core.files.uploadhandler.MemoryFileUploadHandler


Functions
---------

.. autoapisummary::

   django.core.files.uploadhandler.load_handler


Module Contents
---------------

.. py:exception:: UploadFileException

   Bases: :py:obj:`Exception`


   Any error having to do with uploading files.


.. py:exception:: StopUpload(connection_reset=False)

   Bases: :py:obj:`UploadFileException`


   This exception is raised when an upload must abort.


   .. py:attribute:: connection_reset
      :value: False



.. py:exception:: SkipFile

   Bases: :py:obj:`UploadFileException`


   This exception is raised by an upload handler that wants to skip a given file.


.. py:exception:: StopFutureHandlers

   Bases: :py:obj:`UploadFileException`


   Upload handlers that have handled a file and do not want future handlers to
   run should raise this exception instead of returning None.


.. py:class:: FileUploadHandler(request=None)

   Base class for streaming upload handlers.


   .. py:attribute:: chunk_size
      :value: 65536



   .. py:attribute:: file_name
      :value: None



   .. py:attribute:: content_type
      :value: None



   .. py:attribute:: content_length
      :value: None



   .. py:attribute:: charset
      :value: None



   .. py:attribute:: content_type_extra
      :value: None



   .. py:attribute:: request
      :value: None



   .. py:method:: handle_raw_input(input_data, META, content_length, boundary, encoding=None)

      Handle the raw input from the client.

      :param : input_data:
               An object that supports reading via .read().
      :param : META:
               ``request.META``.
      :param : content_length:
               The (integer) value of the Content-Length header from the
               client.
      :param : boundary: The boundary from the Content-Type header. Be sure to
               prepend two '--'.



   .. py:method:: new_file(field_name, file_name, content_type, content_length, charset=None, content_type_extra=None)

      Signal that a new file has been started.

      Warning: As with any data from the client, you should not trust
      content_length (and sometimes won't even get it).



   .. py:method:: receive_data_chunk(raw_data, start)
      :abstractmethod:


      Receive data from the streamed upload parser. ``start`` is the position
      in the file of the chunk.



   .. py:method:: file_complete(file_size)
      :abstractmethod:


      Signal that a file has completed. File size corresponds to the actual
      size accumulated by all the chunks.

      Subclasses should return a valid ``UploadedFile`` object.



   .. py:method:: upload_complete()

      Signal that the upload is complete. Subclasses should perform cleanup
      that is necessary for this handler.



   .. py:method:: upload_interrupted()

      Signal that the upload was interrupted. Subclasses should perform
      cleanup that is necessary for this handler.



.. py:class:: TemporaryFileUploadHandler(request=None)

   Bases: :py:obj:`FileUploadHandler`


   Upload handler that streams data into a temporary file.


   .. py:method:: new_file(*args, **kwargs)

      Create the file object to append to as data is coming in.



   .. py:method:: receive_data_chunk(raw_data, start)

      Receive data from the streamed upload parser. ``start`` is the position
      in the file of the chunk.



   .. py:method:: file_complete(file_size)

      Signal that a file has completed. File size corresponds to the actual
      size accumulated by all the chunks.

      Subclasses should return a valid ``UploadedFile`` object.



   .. py:method:: upload_interrupted()

      Signal that the upload was interrupted. Subclasses should perform
      cleanup that is necessary for this handler.



.. py:class:: MemoryFileUploadHandler(request=None)

   Bases: :py:obj:`FileUploadHandler`


   File upload handler to stream uploads into memory (used for small files).


   .. py:method:: handle_raw_input(input_data, META, content_length, boundary, encoding=None)

      Use the content_length to signal whether or not this handler should be
      used.



   .. py:method:: new_file(*args, **kwargs)

      Signal that a new file has been started.

      Warning: As with any data from the client, you should not trust
      content_length (and sometimes won't even get it).



   .. py:method:: receive_data_chunk(raw_data, start)

      Add the data to the BytesIO file.



   .. py:method:: file_complete(file_size)

      Return a file object if this handler is activated.



.. py:function:: load_handler(path, *args, **kwargs)

   Given a path to a handler, return an instance of that handler.

   E.g.::
       >>> from django.http import HttpRequest
       >>> request = HttpRequest()
       >>> load_handler(
       ...     'django.core.files.uploadhandler.TemporaryFileUploadHandler',
       ...     request,
       ... )
       <TemporaryFileUploadHandler object at 0x...>


