django.utils.datastructures
===========================

.. py:module:: django.utils.datastructures


Exceptions
----------

.. autoapisummary::

   django.utils.datastructures.MultiValueDictKeyError


Classes
-------

.. autoapisummary::

   django.utils.datastructures.OrderedSet
   django.utils.datastructures.MultiValueDict
   django.utils.datastructures.ImmutableList
   django.utils.datastructures.DictWrapper
   django.utils.datastructures.CaseInsensitiveMapping


Module Contents
---------------

.. py:class:: OrderedSet(iterable=None)

   A set which keeps the ordering of the inserted items.


   .. py:attribute:: dict


   .. py:method:: add(item)


   .. py:method:: remove(item)


   .. py:method:: discard(item)


.. py:exception:: MultiValueDictKeyError

   Bases: :py:obj:`KeyError`


   Mapping key not found.


.. py:class:: MultiValueDict(key_to_list_mapping=())

   Bases: :py:obj:`dict`


   A subclass of dictionary customized to handle multiple values for the
   same key.

   >>> d = MultiValueDict({'name': ['Adrian', 'Simon'], 'position': ['Developer']})
   >>> d['name']
   'Simon'
   >>> d.getlist('name')
   ['Adrian', 'Simon']
   >>> d.getlist('doesnotexist')
   []
   >>> d.getlist('doesnotexist', ['Adrian', 'Simon'])
   ['Adrian', 'Simon']
   >>> d.get('lastname', 'nonexistent')
   'nonexistent'
   >>> d.setlist('lastname', ['Holovaty', 'Willison'])

   This class exists to solve the irritating problem raised by cgi.parse_qs,
   which returns a list for every key, even though most web forms submit
   single name-value pairs.


   .. py:method:: get(key, default=None)

      Return the last data value for the passed key. If key doesn't exist
      or value is an empty list, return `default`.



   .. py:method:: getlist(key, default=None)

      Return the list of values for the key. If key doesn't exist, return a
      default value.



   .. py:method:: setlist(key, list_)


   .. py:method:: setdefault(key, default=None)

      Insert key with a value of default if key is not in the dictionary.

      Return the value for key if key is in the dictionary, else default.



   .. py:method:: setlistdefault(key, default_list=None)


   .. py:method:: appendlist(key, value)

      Append an item to the internal list associated with key.



   .. py:method:: items()

      Yield (key, value) pairs, where value is the last item in the list
      associated with the key.



   .. py:method:: lists()

      Yield (key, list) pairs.



   .. py:method:: values()

      Yield the last value on every key list.



   .. py:method:: copy()

      Return a shallow copy of this object.



   .. py:method:: update(*args, **kwargs)

      Extend rather than replace existing key lists.



   .. py:method:: dict()

      Return current object as a dict with singular values.



.. py:class:: ImmutableList

   Bases: :py:obj:`tuple`


   A tuple-like object that raises useful errors when it is asked to mutate.

   Example::

       >>> a = ImmutableList(range(5), warning="You cannot mutate this.")
       >>> a[3] = '4'
       Traceback (most recent call last):
           ...
       AttributeError: You cannot mutate this.


   .. py:method:: complain(*args, **kwargs)


   .. py:attribute:: append


   .. py:attribute:: extend


   .. py:attribute:: insert


   .. py:attribute:: pop


   .. py:attribute:: remove


   .. py:attribute:: sort


   .. py:attribute:: reverse


.. py:class:: DictWrapper(data, func, prefix)

   Bases: :py:obj:`dict`


   Wrap accesses to a dictionary so that certain values (those starting with
   the specified prefix) are passed through a function before being returned.
   The prefix is removed before looking up the real value.

   Used by the SQL construction code to ensure that values are correctly
   quoted before being used.


   .. py:attribute:: func


   .. py:attribute:: prefix


.. py:class:: CaseInsensitiveMapping(data)

   Bases: :py:obj:`collections.abc.Mapping`


   Mapping allowing case-insensitive key lookups. Original case of keys is
   preserved for iteration and string representation.

   Example::

       >>> ci_map = CaseInsensitiveMapping({'name': 'Jane'})
       >>> ci_map['Name']
       Jane
       >>> ci_map['NAME']
       Jane
       >>> ci_map['name']
       Jane
       >>> ci_map  # original case preserved
       {'name': 'Jane'}


   .. py:method:: copy()


