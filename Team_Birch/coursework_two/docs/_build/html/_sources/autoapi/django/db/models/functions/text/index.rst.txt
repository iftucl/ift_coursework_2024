django.db.models.functions.text
===============================

.. py:module:: django.db.models.functions.text


Classes
-------

.. autoapisummary::

   django.db.models.functions.text.MySQLSHA2Mixin
   django.db.models.functions.text.OracleHashMixin
   django.db.models.functions.text.PostgreSQLSHAMixin
   django.db.models.functions.text.Chr
   django.db.models.functions.text.ConcatPair
   django.db.models.functions.text.Concat
   django.db.models.functions.text.Left
   django.db.models.functions.text.Length
   django.db.models.functions.text.Lower
   django.db.models.functions.text.LPad
   django.db.models.functions.text.LTrim
   django.db.models.functions.text.MD5
   django.db.models.functions.text.Ord
   django.db.models.functions.text.Repeat
   django.db.models.functions.text.Replace
   django.db.models.functions.text.Reverse
   django.db.models.functions.text.Right
   django.db.models.functions.text.RPad
   django.db.models.functions.text.RTrim
   django.db.models.functions.text.SHA1
   django.db.models.functions.text.SHA224
   django.db.models.functions.text.SHA256
   django.db.models.functions.text.SHA384
   django.db.models.functions.text.SHA512
   django.db.models.functions.text.StrIndex
   django.db.models.functions.text.Substr
   django.db.models.functions.text.Trim
   django.db.models.functions.text.Upper


Module Contents
---------------

.. py:class:: MySQLSHA2Mixin

   .. py:method:: as_mysql(compiler, connection, **extra_context)


.. py:class:: OracleHashMixin

   .. py:method:: as_oracle(compiler, connection, **extra_context)


.. py:class:: PostgreSQLSHAMixin

   .. py:method:: as_postgresql(compiler, connection, **extra_context)


.. py:class:: Chr(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'CHR'



   .. py:attribute:: lookup_name
      :value: 'chr'



   .. py:method:: as_mysql(compiler, connection, **extra_context)


   .. py:method:: as_oracle(compiler, connection, **extra_context)


   .. py:method:: as_sqlite(compiler, connection, **extra_context)


.. py:class:: ConcatPair(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.expressions.Func`


   Concatenate two arguments together. This is used by `Concat` because not
   all backend databases support more than two arguments.


   .. py:attribute:: function
      :value: 'CONCAT'



   .. py:method:: as_sqlite(compiler, connection, **extra_context)


   .. py:method:: as_postgresql(compiler, connection, **extra_context)


   .. py:method:: as_mysql(compiler, connection, **extra_context)


   .. py:method:: coalesce()


.. py:class:: Concat(*expressions, **extra)

   Bases: :py:obj:`django.db.models.expressions.Func`


   Concatenate text fields together. Backends that result in an entire
   null expression when any arguments are null will wrap each argument in
   coalesce functions to ensure a non-null result.


   .. py:attribute:: function
      :value: None



   .. py:attribute:: template
      :value: '%(expressions)s'



.. py:class:: Left(expression, length, **extra)

   Bases: :py:obj:`django.db.models.expressions.Func`


   An SQL function call.


   .. py:attribute:: function
      :value: 'LEFT'



   .. py:attribute:: arity
      :value: 2



   .. py:attribute:: output_field

      Return the output type of this expressions.


   .. py:method:: get_substr()


   .. py:method:: as_oracle(compiler, connection, **extra_context)


   .. py:method:: as_sqlite(compiler, connection, **extra_context)


.. py:class:: Length(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.lookups.Transform`


   Return the number of characters in the expression.


   .. py:attribute:: function
      :value: 'LENGTH'



   .. py:attribute:: lookup_name
      :value: 'length'



   .. py:attribute:: output_field

      Return the output type of this expressions.


   .. py:method:: as_mysql(compiler, connection, **extra_context)


.. py:class:: Lower(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'LOWER'



   .. py:attribute:: lookup_name
      :value: 'lower'



.. py:class:: LPad(expression, length, fill_text=Value(' '), **extra)

   Bases: :py:obj:`django.db.models.expressions.Func`


   An SQL function call.


   .. py:attribute:: function
      :value: 'LPAD'



   .. py:attribute:: output_field

      Return the output type of this expressions.


.. py:class:: LTrim(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'LTRIM'



   .. py:attribute:: lookup_name
      :value: 'ltrim'



.. py:class:: MD5(*expressions, output_field=None, **extra)

   Bases: :py:obj:`OracleHashMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'MD5'



   .. py:attribute:: lookup_name
      :value: 'md5'



.. py:class:: Ord(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'ASCII'



   .. py:attribute:: lookup_name
      :value: 'ord'



   .. py:attribute:: output_field

      Return the output type of this expressions.


   .. py:method:: as_mysql(compiler, connection, **extra_context)


   .. py:method:: as_sqlite(compiler, connection, **extra_context)


.. py:class:: Repeat(expression, number, **extra)

   Bases: :py:obj:`django.db.models.expressions.Func`


   An SQL function call.


   .. py:attribute:: function
      :value: 'REPEAT'



   .. py:attribute:: output_field

      Return the output type of this expressions.


   .. py:method:: as_oracle(compiler, connection, **extra_context)


.. py:class:: Replace(expression, text, replacement=Value(''), **extra)

   Bases: :py:obj:`django.db.models.expressions.Func`


   An SQL function call.


   .. py:attribute:: function
      :value: 'REPLACE'



.. py:class:: Reverse(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'REVERSE'



   .. py:attribute:: lookup_name
      :value: 'reverse'



   .. py:method:: as_oracle(compiler, connection, **extra_context)


.. py:class:: Right(expression, length, **extra)

   Bases: :py:obj:`Left`


   An SQL function call.


   .. py:attribute:: function
      :value: 'RIGHT'



   .. py:method:: get_substr()


.. py:class:: RPad(expression, length, fill_text=Value(' '), **extra)

   Bases: :py:obj:`LPad`


   An SQL function call.


   .. py:attribute:: function
      :value: 'RPAD'



.. py:class:: RTrim(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'RTRIM'



   .. py:attribute:: lookup_name
      :value: 'rtrim'



.. py:class:: SHA1(*expressions, output_field=None, **extra)

   Bases: :py:obj:`OracleHashMixin`, :py:obj:`PostgreSQLSHAMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'SHA1'



   .. py:attribute:: lookup_name
      :value: 'sha1'



.. py:class:: SHA224(*expressions, output_field=None, **extra)

   Bases: :py:obj:`MySQLSHA2Mixin`, :py:obj:`PostgreSQLSHAMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'SHA224'



   .. py:attribute:: lookup_name
      :value: 'sha224'



   .. py:method:: as_oracle(compiler, connection, **extra_context)


.. py:class:: SHA256(*expressions, output_field=None, **extra)

   Bases: :py:obj:`MySQLSHA2Mixin`, :py:obj:`OracleHashMixin`, :py:obj:`PostgreSQLSHAMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'SHA256'



   .. py:attribute:: lookup_name
      :value: 'sha256'



.. py:class:: SHA384(*expressions, output_field=None, **extra)

   Bases: :py:obj:`MySQLSHA2Mixin`, :py:obj:`OracleHashMixin`, :py:obj:`PostgreSQLSHAMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'SHA384'



   .. py:attribute:: lookup_name
      :value: 'sha384'



.. py:class:: SHA512(*expressions, output_field=None, **extra)

   Bases: :py:obj:`MySQLSHA2Mixin`, :py:obj:`OracleHashMixin`, :py:obj:`PostgreSQLSHAMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'SHA512'



   .. py:attribute:: lookup_name
      :value: 'sha512'



.. py:class:: StrIndex(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.expressions.Func`


   Return a positive integer corresponding to the 1-indexed position of the
   first occurrence of a substring inside another string, or 0 if the
   substring is not found.


   .. py:attribute:: function
      :value: 'INSTR'



   .. py:attribute:: arity
      :value: 2



   .. py:attribute:: output_field

      Return the output type of this expressions.


   .. py:method:: as_postgresql(compiler, connection, **extra_context)


.. py:class:: Substr(expression, pos, length=None, **extra)

   Bases: :py:obj:`django.db.models.expressions.Func`


   An SQL function call.


   .. py:attribute:: function
      :value: 'SUBSTRING'



   .. py:attribute:: output_field

      Return the output type of this expressions.


   .. py:method:: as_sqlite(compiler, connection, **extra_context)


   .. py:method:: as_oracle(compiler, connection, **extra_context)


.. py:class:: Trim(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'TRIM'



   .. py:attribute:: lookup_name
      :value: 'trim'



.. py:class:: Upper(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'UPPER'



   .. py:attribute:: lookup_name
      :value: 'upper'



