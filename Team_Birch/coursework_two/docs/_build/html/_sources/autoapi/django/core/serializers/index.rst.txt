django.core.serializers
=======================

.. py:module:: django.core.serializers

.. autoapi-nested-parse::

   Interfaces for serializing Django objects.

   Usage::

       from django.core import serializers
       json = serializers.serialize("json", some_queryset)
       objects = list(serializers.deserialize("json", json))

   To add your own serializers, use the SERIALIZATION_MODULES setting::

       SERIALIZATION_MODULES = {
           "csv": "path.to.csv.serializer",
           "txt": "path.to.txt.serializer",
       }



Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/django/core/serializers/base/index
   /autoapi/django/core/serializers/json/index
   /autoapi/django/core/serializers/jsonl/index
   /autoapi/django/core/serializers/python/index
   /autoapi/django/core/serializers/pyyaml/index
   /autoapi/django/core/serializers/xml_serializer/index


Attributes
----------

.. autoapisummary::

   django.core.serializers.BUILTIN_SERIALIZERS


Classes
-------

.. autoapisummary::

   django.core.serializers.BadSerializer


Functions
---------

.. autoapisummary::

   django.core.serializers.register_serializer
   django.core.serializers.unregister_serializer
   django.core.serializers.get_serializer
   django.core.serializers.get_serializer_formats
   django.core.serializers.get_public_serializer_formats
   django.core.serializers.get_deserializer
   django.core.serializers.serialize
   django.core.serializers.deserialize
   django.core.serializers.sort_dependencies


Package Contents
----------------

.. py:data:: BUILTIN_SERIALIZERS

.. py:class:: BadSerializer(exception)

   Stub serializer to hold exception raised during registration

   This allows the serializer registration to cache serializers and if there
   is an error raised in the process of creating a serializer it will be
   raised and passed along to the caller when the serializer is used.


   .. py:attribute:: internal_use_only
      :value: False



   .. py:attribute:: exception


.. py:function:: register_serializer(format, serializer_module, serializers=None)

   Register a new serializer.

   ``serializer_module`` should be the fully qualified module name
   for the serializer.

   If ``serializers`` is provided, the registration will be added
   to the provided dictionary.

   If ``serializers`` is not provided, the registration will be made
   directly into the global register of serializers. Adding serializers
   directly is not a thread-safe operation.


.. py:function:: unregister_serializer(format)

   Unregister a given serializer. This is not a thread-safe operation.


.. py:function:: get_serializer(format)

.. py:function:: get_serializer_formats()

.. py:function:: get_public_serializer_formats()

.. py:function:: get_deserializer(format)

.. py:function:: serialize(format, queryset, **options)

   Serialize a queryset (or any iterator that returns database objects) using
   a certain serializer.


.. py:function:: deserialize(format, stream_or_string, **options)

   Deserialize a stream or a string. Return an iterator that yields ``(obj,
   m2m_relation_dict)``, where ``obj`` is an instantiated -- but *unsaved* --
   object, and ``m2m_relation_dict`` is a dictionary of ``{m2m_field_name :
   list_of_related_objects}``.


.. py:function:: sort_dependencies(app_list, allow_cycles=False)

   Sort a list of (app_config, models) pairs into a single list of models.

   The single list of models is sorted so that any model with a natural key
   is serialized before a normal model, and any model with a natural key
   dependency has it's dependencies serialized first.

   If allow_cycles is True, return the best-effort ordering that will respect
   most of dependencies but ignore some of them to break the cycles.


