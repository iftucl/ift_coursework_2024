django.conf
===========

.. py:module:: django.conf

.. autoapi-nested-parse::

   Settings and configuration for Django.

   Read values from the module specified by the DJANGO_SETTINGS_MODULE environment
   variable, and then from django.conf.global_settings; see the global_settings.py
   for a list of all possible variables.



Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/django/conf/global_settings/index
   /autoapi/django/conf/locale/index
   /autoapi/django/conf/urls/index


Attributes
----------

.. autoapisummary::

   django.conf.ENVIRONMENT_VARIABLE
   django.conf.DEFAULT_STORAGE_ALIAS
   django.conf.STATICFILES_STORAGE_ALIAS
   django.conf.USE_DEPRECATED_PYTZ_DEPRECATED_MSG
   django.conf.USE_L10N_DEPRECATED_MSG
   django.conf.CSRF_COOKIE_MASKED_DEPRECATED_MSG
   django.conf.DEFAULT_FILE_STORAGE_DEPRECATED_MSG
   django.conf.STATICFILES_STORAGE_DEPRECATED_MSG
   django.conf.settings


Classes
-------

.. autoapisummary::

   django.conf.SettingsReference
   django.conf.LazySettings
   django.conf.Settings
   django.conf.UserSettingsHolder


Package Contents
----------------

.. py:data:: ENVIRONMENT_VARIABLE
   :value: 'DJANGO_SETTINGS_MODULE'


.. py:data:: DEFAULT_STORAGE_ALIAS
   :value: 'default'


.. py:data:: STATICFILES_STORAGE_ALIAS
   :value: 'staticfiles'


.. py:data:: USE_DEPRECATED_PYTZ_DEPRECATED_MSG
   :value: 'The USE_DEPRECATED_PYTZ setting, and support for pytz timezones is deprecated in favor of the...


.. py:data:: USE_L10N_DEPRECATED_MSG
   :value: 'The USE_L10N setting is deprecated. Starting with Django 5.0, localized formatting of data will...


.. py:data:: CSRF_COOKIE_MASKED_DEPRECATED_MSG
   :value: 'The CSRF_COOKIE_MASKED transitional setting is deprecated. Support for it will be removed in...


.. py:data:: DEFAULT_FILE_STORAGE_DEPRECATED_MSG
   :value: 'The DEFAULT_FILE_STORAGE setting is deprecated. Use STORAGES instead.'


.. py:data:: STATICFILES_STORAGE_DEPRECATED_MSG
   :value: 'The STATICFILES_STORAGE setting is deprecated. Use STORAGES instead.'


.. py:class:: SettingsReference(value, setting_name)

   Bases: :py:obj:`str`


   String subclass which references a current settings value. It's treated as
   the value in memory but serializes to a settings.NAME attribute reference.


   .. py:attribute:: setting_name


.. py:class:: LazySettings

   Bases: :py:obj:`django.utils.functional.LazyObject`


   A lazy proxy for either global Django settings or a custom settings object.
   The user can manually configure settings prior to using them. Otherwise,
   Django uses the settings module pointed to by DJANGO_SETTINGS_MODULE.


   .. py:method:: configure(default_settings=global_settings, **options)

      Called to manually configure the settings. The 'default_settings'
      parameter sets where to retrieve any unspecified values from (its
      argument must support attribute access (__getattr__)).



   .. py:property:: configured

      Return True if the settings have already been configured.


   .. py:property:: USE_L10N


   .. py:property:: DEFAULT_FILE_STORAGE


   .. py:property:: STATICFILES_STORAGE


.. py:class:: Settings(settings_module)

   .. py:attribute:: SETTINGS_MODULE


   .. py:method:: is_overridden(setting)


.. py:class:: UserSettingsHolder(default_settings)

   Holder for user configured settings.


   .. py:attribute:: SETTINGS_MODULE
      :value: None



   .. py:attribute:: default_settings


   .. py:method:: is_overridden(setting)


.. py:data:: settings

