django.db.backends.oracle.utils
===============================

.. py:module:: django.db.backends.oracle.utils


Classes
-------

.. autoapisummary::

   django.db.backends.oracle.utils.InsertVar
   django.db.backends.oracle.utils.Oracle_datetime
   django.db.backends.oracle.utils.BulkInsertMapper


Functions
---------

.. autoapisummary::

   django.db.backends.oracle.utils.dsn


Module Contents
---------------

.. py:class:: InsertVar(field)

   A late-binding cursor variable that can be passed to Cursor.execute
   as a parameter, in order to receive the id of the row created by an
   insert statement.


   .. py:attribute:: types


   .. py:attribute:: db_type


   .. py:attribute:: bound_param
      :value: None



   .. py:method:: bind_parameter(cursor)


   .. py:method:: get_value()


.. py:class:: Oracle_datetime

   Bases: :py:obj:`datetime.datetime`


   A datetime object, with an additional class attribute
   to tell cx_Oracle to save the microseconds too.


   .. py:attribute:: input_size


   .. py:method:: from_datetime(dt)
      :classmethod:



.. py:class:: BulkInsertMapper

   .. py:attribute:: BLOB
      :value: 'TO_BLOB(%s)'



   .. py:attribute:: DATE
      :value: 'TO_DATE(%s)'



   .. py:attribute:: INTERVAL
      :value: 'CAST(%s as INTERVAL DAY(9) TO SECOND(6))'



   .. py:attribute:: NCLOB
      :value: 'TO_NCLOB(%s)'



   .. py:attribute:: NUMBER
      :value: 'TO_NUMBER(%s)'



   .. py:attribute:: TIMESTAMP
      :value: 'TO_TIMESTAMP(%s)'



   .. py:attribute:: types


.. py:function:: dsn(settings_dict)

