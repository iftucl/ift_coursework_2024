django.contrib.postgres.operations
==================================

.. py:module:: django.contrib.postgres.operations


Classes
-------

.. autoapisummary::

   django.contrib.postgres.operations.CreateExtension
   django.contrib.postgres.operations.BloomExtension
   django.contrib.postgres.operations.BtreeGinExtension
   django.contrib.postgres.operations.BtreeGistExtension
   django.contrib.postgres.operations.CITextExtension
   django.contrib.postgres.operations.CryptoExtension
   django.contrib.postgres.operations.HStoreExtension
   django.contrib.postgres.operations.TrigramExtension
   django.contrib.postgres.operations.UnaccentExtension
   django.contrib.postgres.operations.NotInTransactionMixin
   django.contrib.postgres.operations.AddIndexConcurrently
   django.contrib.postgres.operations.RemoveIndexConcurrently
   django.contrib.postgres.operations.CollationOperation
   django.contrib.postgres.operations.CreateCollation
   django.contrib.postgres.operations.RemoveCollation
   django.contrib.postgres.operations.AddConstraintNotValid
   django.contrib.postgres.operations.ValidateConstraint


Module Contents
---------------

.. py:class:: CreateExtension(name)

   Bases: :py:obj:`django.db.migrations.operations.base.Operation`


   .. py:attribute:: reversible
      :value: True



   .. py:attribute:: name


   .. py:method:: state_forwards(app_label, state)


   .. py:method:: database_forwards(app_label, schema_editor, from_state, to_state)


   .. py:method:: database_backwards(app_label, schema_editor, from_state, to_state)


   .. py:method:: extension_exists(schema_editor, extension)


   .. py:method:: describe()


   .. py:property:: migration_name_fragment


.. py:class:: BloomExtension

   Bases: :py:obj:`CreateExtension`


   .. py:attribute:: name
      :value: 'bloom'



.. py:class:: BtreeGinExtension

   Bases: :py:obj:`CreateExtension`


   .. py:attribute:: name
      :value: 'btree_gin'



.. py:class:: BtreeGistExtension

   Bases: :py:obj:`CreateExtension`


   .. py:attribute:: name
      :value: 'btree_gist'



.. py:class:: CITextExtension

   Bases: :py:obj:`CreateExtension`


   .. py:attribute:: name
      :value: 'citext'



.. py:class:: CryptoExtension

   Bases: :py:obj:`CreateExtension`


   .. py:attribute:: name
      :value: 'pgcrypto'



.. py:class:: HStoreExtension

   Bases: :py:obj:`CreateExtension`


   .. py:attribute:: name
      :value: 'hstore'



.. py:class:: TrigramExtension

   Bases: :py:obj:`CreateExtension`


   .. py:attribute:: name
      :value: 'pg_trgm'



.. py:class:: UnaccentExtension

   Bases: :py:obj:`CreateExtension`


   .. py:attribute:: name
      :value: 'unaccent'



.. py:class:: NotInTransactionMixin

.. py:class:: AddIndexConcurrently

   Bases: :py:obj:`NotInTransactionMixin`, :py:obj:`django.db.migrations.AddIndex`


   Create an index using PostgreSQL's CREATE INDEX CONCURRENTLY syntax.


   .. py:attribute:: atomic
      :value: False



   .. py:method:: describe()


   .. py:method:: database_forwards(app_label, schema_editor, from_state, to_state)


   .. py:method:: database_backwards(app_label, schema_editor, from_state, to_state)


.. py:class:: RemoveIndexConcurrently

   Bases: :py:obj:`NotInTransactionMixin`, :py:obj:`django.db.migrations.RemoveIndex`


   Remove an index using PostgreSQL's DROP INDEX CONCURRENTLY syntax.


   .. py:attribute:: atomic
      :value: False



   .. py:method:: describe()


   .. py:method:: database_forwards(app_label, schema_editor, from_state, to_state)


   .. py:method:: database_backwards(app_label, schema_editor, from_state, to_state)


.. py:class:: CollationOperation(name, locale, *, provider='libc', deterministic=True)

   Bases: :py:obj:`django.db.migrations.operations.base.Operation`


   .. py:attribute:: name


   .. py:attribute:: locale


   .. py:attribute:: provider
      :value: 'libc'



   .. py:attribute:: deterministic
      :value: True



   .. py:method:: state_forwards(app_label, state)


   .. py:method:: deconstruct()


   .. py:method:: create_collation(schema_editor)


   .. py:method:: remove_collation(schema_editor)


.. py:class:: CreateCollation(name, locale, *, provider='libc', deterministic=True)

   Bases: :py:obj:`CollationOperation`


   Create a collation.


   .. py:method:: database_forwards(app_label, schema_editor, from_state, to_state)


   .. py:method:: database_backwards(app_label, schema_editor, from_state, to_state)


   .. py:method:: describe()


   .. py:property:: migration_name_fragment


.. py:class:: RemoveCollation(name, locale, *, provider='libc', deterministic=True)

   Bases: :py:obj:`CollationOperation`


   Remove a collation.


   .. py:method:: database_forwards(app_label, schema_editor, from_state, to_state)


   .. py:method:: database_backwards(app_label, schema_editor, from_state, to_state)


   .. py:method:: describe()


   .. py:property:: migration_name_fragment


.. py:class:: AddConstraintNotValid(model_name, constraint)

   Bases: :py:obj:`django.db.migrations.AddConstraint`


   Add a table constraint without enforcing validation, using PostgreSQL's
   NOT VALID syntax.


   .. py:method:: describe()


   .. py:method:: database_forwards(app_label, schema_editor, from_state, to_state)


   .. py:property:: migration_name_fragment


.. py:class:: ValidateConstraint(model_name, name)

   Bases: :py:obj:`django.db.migrations.operations.base.Operation`


   Validate a table NOT VALID constraint.


   .. py:attribute:: model_name


   .. py:attribute:: name


   .. py:method:: describe()


   .. py:method:: database_forwards(app_label, schema_editor, from_state, to_state)


   .. py:method:: database_backwards(app_label, schema_editor, from_state, to_state)


   .. py:method:: state_forwards(app_label, state)


   .. py:property:: migration_name_fragment


   .. py:method:: deconstruct()


