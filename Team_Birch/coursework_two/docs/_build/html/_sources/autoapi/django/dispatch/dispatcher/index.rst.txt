django.dispatch.dispatcher
==========================

.. py:module:: django.dispatch.dispatcher


Attributes
----------

.. autoapisummary::

   django.dispatch.dispatcher.logger
   django.dispatch.dispatcher.NONE_ID
   django.dispatch.dispatcher.NO_RECEIVERS


Classes
-------

.. autoapisummary::

   django.dispatch.dispatcher.Signal


Functions
---------

.. autoapisummary::

   django.dispatch.dispatcher.receiver


Module Contents
---------------

.. py:data:: logger

.. py:data:: NONE_ID

.. py:data:: NO_RECEIVERS

.. py:class:: Signal(use_caching=False)

   Base class for all signals

   Internal attributes:

       receivers
           { receiverkey (id) : weakref(receiver) }


   .. py:attribute:: receivers
      :value: []



   .. py:attribute:: lock


   .. py:attribute:: use_caching
      :value: False



   .. py:attribute:: sender_receivers_cache


   .. py:method:: connect(receiver, sender=None, weak=True, dispatch_uid=None)

      Connect receiver to sender for signal.

      :param receiver: A function or an instance method which is to receive signals.
                       Receivers must be hashable objects.

                       If weak is True, then receiver must be weak referenceable.

                       Receivers must be able to accept keyword arguments.

                       If a receiver is connected with a dispatch_uid argument, it
                       will not be added if another receiver was already connected
                       with that dispatch_uid.
      :param sender: The sender to which the receiver should respond. Must either be
                     a Python object, or None to receive events from any sender.
      :param weak: Whether to use weak references to the receiver. By default, the
                   module will attempt to use weak references to the receiver
                   objects. If this parameter is false, then strong references will
                   be used.
      :param dispatch_uid: An identifier used to uniquely identify a particular instance of
                           a receiver. This will usually be a string, though it may be
                           anything hashable.



   .. py:method:: disconnect(receiver=None, sender=None, dispatch_uid=None)

      Disconnect receiver from sender for signal.

      If weak references are used, disconnect need not be called. The receiver
      will be removed from dispatch automatically.

      :param receiver: The registered receiver to disconnect. May be none if
                       dispatch_uid is specified.
      :param sender: The registered sender to disconnect
      :param dispatch_uid: the unique identifier of the receiver to disconnect



   .. py:method:: has_listeners(sender=None)


   .. py:method:: send(sender, **named)

      Send signal from sender to all connected receivers.

      If any receiver raises an error, the error propagates back through send,
      terminating the dispatch loop. So it's possible that all receivers
      won't be called if an error is raised.

      :param sender: The sender of the signal. Either a specific object or None.
      :param named: Named arguments which will be passed to receivers.

      Return a list of tuple pairs [(receiver, response), ... ].



   .. py:method:: send_robust(sender, **named)

      Send signal from sender to all connected receivers catching errors.

      :param sender: The sender of the signal. Can be any Python object (normally one
                     registered with a connect if you actually want something to
                     occur).
      :param named: Named arguments which will be passed to receivers.

      Return a list of tuple pairs [(receiver, response), ... ].

      If any receiver raises an error (specifically any subclass of
      Exception), return the error instance as the result for that receiver.



.. py:function:: receiver(signal, **kwargs)

   A decorator for connecting receivers to signals. Used by passing in the
   signal (or list of signals) and keyword arguments to connect::

       @receiver(post_save, sender=MyModel)
       def signal_receiver(sender, **kwargs):
           ...

       @receiver([post_save, post_delete], sender=MyModel)
       def signals_receiver(sender, **kwargs):
           ...


