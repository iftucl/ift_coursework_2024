django.utils.functional
=======================

.. py:module:: django.utils.functional


Attributes
----------

.. autoapisummary::

   django.utils.functional.empty


Classes
-------

.. autoapisummary::

   django.utils.functional.cached_property
   django.utils.functional.classproperty
   django.utils.functional.Promise
   django.utils.functional.LazyObject
   django.utils.functional.SimpleLazyObject


Functions
---------

.. autoapisummary::

   django.utils.functional.lazy
   django.utils.functional.lazystr
   django.utils.functional.keep_lazy
   django.utils.functional.keep_lazy_text
   django.utils.functional.new_method_proxy
   django.utils.functional.unpickle_lazyobject
   django.utils.functional.partition


Module Contents
---------------

.. py:class:: cached_property(func, name=None)

   Decorator that converts a method with a single self argument into a
   property cached on the instance.

   A cached property can be made out of an existing method:
   (e.g. ``url = cached_property(get_absolute_url)``).


   .. py:attribute:: name
      :value: None



   .. py:method:: func(instance)
      :staticmethod:



   .. py:attribute:: real_func


.. py:class:: classproperty(method=None)

   Decorator that converts a method with a single cls argument into a property
   that can be accessed directly from the class.


   .. py:attribute:: fget
      :value: None



   .. py:method:: getter(method)


.. py:class:: Promise

   Base class for the proxy class created in the closure of the lazy function.
   It's used to recognize promises in code.


.. py:function:: lazy(func, *resultclasses)

   Turn any callable into a lazy evaluated callable. result classes or types
   is required -- at least one is needed so that the automatic forcing of
   the lazy evaluation code is triggered. Results are not memoized; the
   function is evaluated on every access.


.. py:function:: lazystr(text)

   Shortcut for the common case of a lazy callable that returns str.


.. py:function:: keep_lazy(*resultclasses)

   A decorator that allows a function to be called with one or more lazy
   arguments. If none of the args are lazy, the function is evaluated
   immediately, otherwise a __proxy__ is returned that will evaluate the
   function when needed.


.. py:function:: keep_lazy_text(func)

   A decorator for functions that accept lazy arguments and return text.


.. py:data:: empty

.. py:function:: new_method_proxy(func)

.. py:class:: LazyObject

   A wrapper for another class that can be used to delay instantiation of the
   wrapped class.

   By subclassing, you have the opportunity to intercept and alter the
   instantiation. If you don't need to do that, use SimpleLazyObject.


.. py:function:: unpickle_lazyobject(wrapped)

   Used to unpickle lazy objects. Just return its argument, which will be the
   wrapped object.


.. py:class:: SimpleLazyObject(func)

   Bases: :py:obj:`LazyObject`


   A lazy object initialized from any function.

   Designed for compound objects of unknown type. For builtins or objects of
   known type, use django.utils.functional.lazy.


.. py:function:: partition(predicate, values)

   Split the values into two sets, based on the return value of the function
   (True/False). e.g.:

       >>> partition(lambda x: x > 3, range(5))
       [0, 1, 2, 3], [4]


