django.contrib.gis.db.models.lookups
====================================

.. py:module:: django.contrib.gis.db.models.lookups


Classes
-------

.. autoapisummary::

   django.contrib.gis.db.models.lookups.RasterBandTransform
   django.contrib.gis.db.models.lookups.GISLookup
   django.contrib.gis.db.models.lookups.OverlapsLeftLookup
   django.contrib.gis.db.models.lookups.OverlapsRightLookup
   django.contrib.gis.db.models.lookups.OverlapsBelowLookup
   django.contrib.gis.db.models.lookups.OverlapsAboveLookup
   django.contrib.gis.db.models.lookups.LeftLookup
   django.contrib.gis.db.models.lookups.RightLookup
   django.contrib.gis.db.models.lookups.StrictlyBelowLookup
   django.contrib.gis.db.models.lookups.StrictlyAboveLookup
   django.contrib.gis.db.models.lookups.SameAsLookup
   django.contrib.gis.db.models.lookups.BBContainsLookup
   django.contrib.gis.db.models.lookups.BBOverlapsLookup
   django.contrib.gis.db.models.lookups.ContainedLookup
   django.contrib.gis.db.models.lookups.ContainsLookup
   django.contrib.gis.db.models.lookups.ContainsProperlyLookup
   django.contrib.gis.db.models.lookups.CoveredByLookup
   django.contrib.gis.db.models.lookups.CoversLookup
   django.contrib.gis.db.models.lookups.CrossesLookup
   django.contrib.gis.db.models.lookups.DisjointLookup
   django.contrib.gis.db.models.lookups.EqualsLookup
   django.contrib.gis.db.models.lookups.IntersectsLookup
   django.contrib.gis.db.models.lookups.OverlapsLookup
   django.contrib.gis.db.models.lookups.RelateLookup
   django.contrib.gis.db.models.lookups.TouchesLookup
   django.contrib.gis.db.models.lookups.WithinLookup
   django.contrib.gis.db.models.lookups.DistanceLookupBase
   django.contrib.gis.db.models.lookups.DWithinLookup
   django.contrib.gis.db.models.lookups.DistanceLookupFromFunction
   django.contrib.gis.db.models.lookups.DistanceGTLookup
   django.contrib.gis.db.models.lookups.DistanceGTELookup
   django.contrib.gis.db.models.lookups.DistanceLTLookup
   django.contrib.gis.db.models.lookups.DistanceLTELookup


Module Contents
---------------

.. py:class:: RasterBandTransform

   Bases: :py:obj:`django.db.models.Transform`


   .. py:method:: as_sql(compiler, connection)


.. py:class:: GISLookup(lhs, rhs)

   Bases: :py:obj:`django.db.models.Lookup`


   .. py:attribute:: sql_template
      :value: None



   .. py:attribute:: transform_func
      :value: None



   .. py:attribute:: distance
      :value: False



   .. py:attribute:: band_rhs
      :value: None



   .. py:attribute:: band_lhs
      :value: None



   .. py:attribute:: template_params


   .. py:method:: process_rhs_params()


   .. py:method:: process_band_indices(only_lhs=False)

      Extract the lhs band index from the band transform class and the rhs
      band index from the input tuple.



   .. py:method:: get_db_prep_lookup(value, connection)


   .. py:method:: process_rhs(compiler, connection)


   .. py:method:: get_rhs_op(connection, rhs)


   .. py:method:: as_sql(compiler, connection)


.. py:class:: OverlapsLeftLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   The overlaps_left operator returns true if A's bounding box overlaps or is to the
   left of B's bounding box.


   .. py:attribute:: lookup_name
      :value: 'overlaps_left'



.. py:class:: OverlapsRightLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   The 'overlaps_right' operator returns true if A's bounding box overlaps or is to the
   right of B's bounding box.


   .. py:attribute:: lookup_name
      :value: 'overlaps_right'



.. py:class:: OverlapsBelowLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   The 'overlaps_below' operator returns true if A's bounding box overlaps or is below
   B's bounding box.


   .. py:attribute:: lookup_name
      :value: 'overlaps_below'



.. py:class:: OverlapsAboveLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   The 'overlaps_above' operator returns true if A's bounding box overlaps or is above
   B's bounding box.


   .. py:attribute:: lookup_name
      :value: 'overlaps_above'



.. py:class:: LeftLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   The 'left' operator returns true if A's bounding box is strictly to the left
   of B's bounding box.


   .. py:attribute:: lookup_name
      :value: 'left'



.. py:class:: RightLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   The 'right' operator returns true if A's bounding box is strictly to the right
   of B's bounding box.


   .. py:attribute:: lookup_name
      :value: 'right'



.. py:class:: StrictlyBelowLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   The 'strictly_below' operator returns true if A's bounding box is strictly below B's
   bounding box.


   .. py:attribute:: lookup_name
      :value: 'strictly_below'



.. py:class:: StrictlyAboveLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   The 'strictly_above' operator returns true if A's bounding box is strictly above B's
   bounding box.


   .. py:attribute:: lookup_name
      :value: 'strictly_above'



.. py:class:: SameAsLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   The "~=" operator is the "same as" operator. It tests actual geometric
   equality of two features. So if A and B are the same feature,
   vertex-by-vertex, the operator returns true.


   .. py:attribute:: lookup_name
      :value: 'same_as'



.. py:class:: BBContainsLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   The 'bbcontains' operator returns true if A's bounding box completely contains
   by B's bounding box.


   .. py:attribute:: lookup_name
      :value: 'bbcontains'



.. py:class:: BBOverlapsLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   The 'bboverlaps' operator returns true if A's bounding box overlaps B's
   bounding box.


   .. py:attribute:: lookup_name
      :value: 'bboverlaps'



.. py:class:: ContainedLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   The 'contained' operator returns true if A's bounding box is completely contained
   by B's bounding box.


   .. py:attribute:: lookup_name
      :value: 'contained'



.. py:class:: ContainsLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   .. py:attribute:: lookup_name
      :value: 'contains'



.. py:class:: ContainsProperlyLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   .. py:attribute:: lookup_name
      :value: 'contains_properly'



.. py:class:: CoveredByLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   .. py:attribute:: lookup_name
      :value: 'coveredby'



.. py:class:: CoversLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   .. py:attribute:: lookup_name
      :value: 'covers'



.. py:class:: CrossesLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   .. py:attribute:: lookup_name
      :value: 'crosses'



.. py:class:: DisjointLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   .. py:attribute:: lookup_name
      :value: 'disjoint'



.. py:class:: EqualsLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   .. py:attribute:: lookup_name
      :value: 'equals'



.. py:class:: IntersectsLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   .. py:attribute:: lookup_name
      :value: 'intersects'



.. py:class:: OverlapsLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   .. py:attribute:: lookup_name
      :value: 'overlaps'



.. py:class:: RelateLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   .. py:attribute:: lookup_name
      :value: 'relate'



   .. py:attribute:: sql_template
      :value: '%(func)s(%(lhs)s, %(rhs)s, %%s)'



   .. py:attribute:: pattern_regex


   .. py:method:: process_rhs(compiler, connection)


.. py:class:: TouchesLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   .. py:attribute:: lookup_name
      :value: 'touches'



.. py:class:: WithinLookup(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   .. py:attribute:: lookup_name
      :value: 'within'



.. py:class:: DistanceLookupBase(lhs, rhs)

   Bases: :py:obj:`GISLookup`


   .. py:attribute:: distance
      :value: True



   .. py:attribute:: sql_template
      :value: '%(func)s(%(lhs)s, %(rhs)s) %(op)s %(value)s'



   .. py:method:: process_rhs_params()


   .. py:method:: process_distance(compiler, connection)


.. py:class:: DWithinLookup(lhs, rhs)

   Bases: :py:obj:`DistanceLookupBase`


   .. py:attribute:: lookup_name
      :value: 'dwithin'



   .. py:attribute:: sql_template
      :value: '%(func)s(%(lhs)s, %(rhs)s, %(value)s)'



   .. py:method:: process_distance(compiler, connection)


   .. py:method:: process_rhs(compiler, connection)


.. py:class:: DistanceLookupFromFunction(lhs, rhs)

   Bases: :py:obj:`DistanceLookupBase`


   .. py:method:: as_sql(compiler, connection)


.. py:class:: DistanceGTLookup(lhs, rhs)

   Bases: :py:obj:`DistanceLookupFromFunction`


   .. py:attribute:: lookup_name
      :value: 'distance_gt'



   .. py:attribute:: op
      :value: '>'



.. py:class:: DistanceGTELookup(lhs, rhs)

   Bases: :py:obj:`DistanceLookupFromFunction`


   .. py:attribute:: lookup_name
      :value: 'distance_gte'



   .. py:attribute:: op
      :value: '>='



.. py:class:: DistanceLTLookup(lhs, rhs)

   Bases: :py:obj:`DistanceLookupFromFunction`


   .. py:attribute:: lookup_name
      :value: 'distance_lt'



   .. py:attribute:: op
      :value: '<'



.. py:class:: DistanceLTELookup(lhs, rhs)

   Bases: :py:obj:`DistanceLookupFromFunction`


   .. py:attribute:: lookup_name
      :value: 'distance_lte'



   .. py:attribute:: op
      :value: '<='



