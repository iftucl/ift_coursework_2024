django.contrib.postgres.forms.ranges
====================================

.. py:module:: django.contrib.postgres.forms.ranges


Classes
-------

.. autoapisummary::

   django.contrib.postgres.forms.ranges.RangeWidget
   django.contrib.postgres.forms.ranges.HiddenRangeWidget
   django.contrib.postgres.forms.ranges.BaseRangeField
   django.contrib.postgres.forms.ranges.IntegerRangeField
   django.contrib.postgres.forms.ranges.DecimalRangeField
   django.contrib.postgres.forms.ranges.DateTimeRangeField
   django.contrib.postgres.forms.ranges.DateRangeField


Module Contents
---------------

.. py:class:: RangeWidget(base_widget, attrs=None)

   Bases: :py:obj:`django.forms.widgets.MultiWidget`


   A widget that is composed of multiple widgets.

   In addition to the values added by Widget.get_context(), this widget
   adds a list of subwidgets to the context as widget['subwidgets'].
   These can be looped over and rendered like normal widgets.

   You'll probably want to use this class with MultiValueField.


   .. py:method:: decompress(value)

      Return a list of decompressed values for the given compressed value.
      The given value can be assumed to be valid, but not necessarily
      non-empty.



.. py:class:: HiddenRangeWidget(attrs=None)

   Bases: :py:obj:`RangeWidget`


   A widget that splits input into two <input type="hidden"> inputs.


.. py:class:: BaseRangeField(**kwargs)

   Bases: :py:obj:`django.forms.MultiValueField`


   Aggregate the logic of multiple Fields.

   Its clean() method takes a "decompressed" list of values, which are then
   cleaned into a single value according to self.fields. Each value in
   this list is cleaned by the corresponding field -- the first value is
   cleaned by the first field, the second value is cleaned by the second
   field, etc. Once all fields are cleaned, the list of clean values is
   "compressed" into a single value.

   Subclasses should not have to implement clean(). Instead, they must
   implement compress(), which takes a list of valid values and returns a
   "compressed" version of those values -- a single value.

   You'll probably want to use this with MultiWidget.


   .. py:attribute:: default_error_messages


   .. py:attribute:: hidden_widget


   .. py:attribute:: range_kwargs


   .. py:method:: prepare_value(value)


   .. py:method:: compress(values)

      Return a single value for the given list of values. The values can be
      assumed to be valid.

      For example, if this MultiValueField was instantiated with
      fields=(DateField(), TimeField()), this might return a datetime
      object created by combining the date and time in data_list.



.. py:class:: IntegerRangeField(**kwargs)

   Bases: :py:obj:`BaseRangeField`


   Aggregate the logic of multiple Fields.

   Its clean() method takes a "decompressed" list of values, which are then
   cleaned into a single value according to self.fields. Each value in
   this list is cleaned by the corresponding field -- the first value is
   cleaned by the first field, the second value is cleaned by the second
   field, etc. Once all fields are cleaned, the list of clean values is
   "compressed" into a single value.

   Subclasses should not have to implement clean(). Instead, they must
   implement compress(), which takes a list of valid values and returns a
   "compressed" version of those values -- a single value.

   You'll probably want to use this with MultiWidget.


   .. py:attribute:: default_error_messages


   .. py:attribute:: base_field


   .. py:attribute:: range_type


.. py:class:: DecimalRangeField(**kwargs)

   Bases: :py:obj:`BaseRangeField`


   Aggregate the logic of multiple Fields.

   Its clean() method takes a "decompressed" list of values, which are then
   cleaned into a single value according to self.fields. Each value in
   this list is cleaned by the corresponding field -- the first value is
   cleaned by the first field, the second value is cleaned by the second
   field, etc. Once all fields are cleaned, the list of clean values is
   "compressed" into a single value.

   Subclasses should not have to implement clean(). Instead, they must
   implement compress(), which takes a list of valid values and returns a
   "compressed" version of those values -- a single value.

   You'll probably want to use this with MultiWidget.


   .. py:attribute:: default_error_messages


   .. py:attribute:: base_field


   .. py:attribute:: range_type


.. py:class:: DateTimeRangeField(**kwargs)

   Bases: :py:obj:`BaseRangeField`


   Aggregate the logic of multiple Fields.

   Its clean() method takes a "decompressed" list of values, which are then
   cleaned into a single value according to self.fields. Each value in
   this list is cleaned by the corresponding field -- the first value is
   cleaned by the first field, the second value is cleaned by the second
   field, etc. Once all fields are cleaned, the list of clean values is
   "compressed" into a single value.

   Subclasses should not have to implement clean(). Instead, they must
   implement compress(), which takes a list of valid values and returns a
   "compressed" version of those values -- a single value.

   You'll probably want to use this with MultiWidget.


   .. py:attribute:: default_error_messages


   .. py:attribute:: base_field


   .. py:attribute:: range_type


.. py:class:: DateRangeField(**kwargs)

   Bases: :py:obj:`BaseRangeField`


   Aggregate the logic of multiple Fields.

   Its clean() method takes a "decompressed" list of values, which are then
   cleaned into a single value according to self.fields. Each value in
   this list is cleaned by the corresponding field -- the first value is
   cleaned by the first field, the second value is cleaned by the second
   field, etc. Once all fields are cleaned, the list of clean values is
   "compressed" into a single value.

   Subclasses should not have to implement clean(). Instead, they must
   implement compress(), which takes a list of valid values and returns a
   "compressed" version of those values -- a single value.

   You'll probably want to use this with MultiWidget.


   .. py:attribute:: default_error_messages


   .. py:attribute:: base_field


   .. py:attribute:: range_type


