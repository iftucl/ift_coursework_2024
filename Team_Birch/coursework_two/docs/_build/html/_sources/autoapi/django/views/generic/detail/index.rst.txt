django.views.generic.detail
===========================

.. py:module:: django.views.generic.detail


Classes
-------

.. autoapisummary::

   django.views.generic.detail.SingleObjectMixin
   django.views.generic.detail.BaseDetailView
   django.views.generic.detail.SingleObjectTemplateResponseMixin
   django.views.generic.detail.DetailView


Module Contents
---------------

.. py:class:: SingleObjectMixin

   Bases: :py:obj:`django.views.generic.base.ContextMixin`


   Provide the ability to retrieve a single object for further manipulation.


   .. py:attribute:: model
      :value: None



   .. py:attribute:: queryset
      :value: None



   .. py:attribute:: slug_field
      :value: 'slug'



   .. py:attribute:: context_object_name
      :value: None



   .. py:attribute:: slug_url_kwarg
      :value: 'slug'



   .. py:attribute:: pk_url_kwarg
      :value: 'pk'



   .. py:attribute:: query_pk_and_slug
      :value: False



   .. py:method:: get_object(queryset=None)

      Return the object the view is displaying.

      Require `self.queryset` and a `pk` or `slug` argument in the URLconf.
      Subclasses can override this to return any object.



   .. py:method:: get_queryset()

      Return the `QuerySet` that will be used to look up the object.

      This method is called by the default implementation of get_object() and
      may not be called if get_object() is overridden.



   .. py:method:: get_slug_field()

      Get the name of a slug field to be used to look up by slug.



   .. py:method:: get_context_object_name(obj)

      Get the name to use for the object.



   .. py:method:: get_context_data(**kwargs)

      Insert the single object into the context dict.



.. py:class:: BaseDetailView

   Bases: :py:obj:`SingleObjectMixin`, :py:obj:`django.views.generic.base.View`


   A base view for displaying a single object.


   .. py:method:: get(request, *args, **kwargs)


.. py:class:: SingleObjectTemplateResponseMixin

   Bases: :py:obj:`django.views.generic.base.TemplateResponseMixin`


   .. py:attribute:: template_name_field
      :value: None



   .. py:attribute:: template_name_suffix
      :value: '_detail'



   .. py:method:: get_template_names()

      Return a list of template names to be used for the request. May not be
      called if render_to_response() is overridden. Return the following list:

      * the value of ``template_name`` on the view (if provided)
      * the contents of the ``template_name_field`` field on the
        object instance that the view is operating upon (if available)
      * ``<app_label>/<model_name><template_name_suffix>.html``



.. py:class:: DetailView

   Bases: :py:obj:`SingleObjectTemplateResponseMixin`, :py:obj:`BaseDetailView`


   Render a "detail" view of an object.

   By default this is a model instance looked up from `self.queryset`, but the
   view will support display of *any* object by overriding `self.get_object()`.


