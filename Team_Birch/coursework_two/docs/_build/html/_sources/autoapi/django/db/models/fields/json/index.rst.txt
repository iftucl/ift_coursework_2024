django.db.models.fields.json
============================

.. py:module:: django.db.models.fields.json


Classes
-------

.. autoapisummary::

   django.db.models.fields.json.JSONField


Module Contents
---------------

.. py:class:: JSONField(verbose_name=None, name=None, encoder=None, decoder=None, **kwargs)

   Bases: :py:obj:`django.db.models.fields.mixins.CheckFieldDefaultMixin`, :py:obj:`django.db.models.fields.Field`


   Base class for all field types


   .. py:attribute:: empty_strings_allowed
      :value: False



   .. py:attribute:: description


   .. py:attribute:: default_error_messages


   .. py:attribute:: encoder
      :value: None



   .. py:attribute:: decoder
      :value: None



   .. py:method:: check(**kwargs)


   .. py:method:: deconstruct()

      Return enough information to recreate the field as a 4-tuple:

       * The name of the field on the model, if contribute_to_class() has
         been run.
       * The import path of the field, including the class, e.g.
         django.db.models.IntegerField. This should be the most portable
         version, so less specific may be better.
       * A list of positional arguments.
       * A dict of keyword arguments.

      Note that the positional or keyword arguments must contain values of
      the following types (including inner values of collection types):

       * None, bool, str, int, float, complex, set, frozenset, list, tuple,
         dict
       * UUID
       * datetime.datetime (naive), datetime.date
       * top-level classes, top-level functions - will be referenced by their
         full import path
       * Storage instances - these have their own deconstruct() method

      This is because the values here must be serialized into a text format
      (possibly new Python code, possibly JSON) and these are the only types
      with encoding handlers defined.

      There's no need to return the exact way the field was instantiated this
      time, just ensure that the resulting field is the same - prefer keyword
      arguments over positional ones, and omit parameters with their default
      values.



   .. py:method:: from_db_value(value, expression, connection)


   .. py:method:: get_internal_type()


   .. py:method:: get_db_prep_value(value, connection, prepared=False)

      Return field's value prepared for interacting with the database backend.

      Used by the default implementations of get_db_prep_save().



   .. py:method:: get_db_prep_save(value, connection)

      Return field's value prepared for saving into a database.



   .. py:method:: get_transform(name)


   .. py:method:: validate(value, model_instance)

      Validate value and raise ValidationError if necessary. Subclasses
      should override this to provide validation logic.



   .. py:method:: value_to_string(obj)

      Return a string value of this field from the passed obj.
      This is used by the serialization framework.



   .. py:method:: formfield(**kwargs)

      Return a django.forms.Field instance for this field.



