django.db.models.fields.related
===============================

.. py:module:: django.db.models.fields.related


Attributes
----------

.. autoapisummary::

   django.db.models.fields.related.RECURSIVE_RELATIONSHIP_CONSTANT


Classes
-------

.. autoapisummary::

   django.db.models.fields.related.RelatedField
   django.db.models.fields.related.ForeignObject
   django.db.models.fields.related.ForeignKey
   django.db.models.fields.related.OneToOneField
   django.db.models.fields.related.ManyToManyField


Functions
---------

.. autoapisummary::

   django.db.models.fields.related.resolve_relation
   django.db.models.fields.related.lazy_related_operation
   django.db.models.fields.related.create_many_to_many_intermediary_model


Module Contents
---------------

.. py:data:: RECURSIVE_RELATIONSHIP_CONSTANT
   :value: 'self'


.. py:function:: resolve_relation(scope_model, relation)

   Transform relation into a model or fully-qualified model string of the form
   "app_label.ModelName", relative to scope_model.

   The relation argument can be:
     * RECURSIVE_RELATIONSHIP_CONSTANT, i.e. the string "self", in which case
       the model argument will be returned.
     * A bare model name without an app_label, in which case scope_model's
       app_label will be prepended.
     * An "app_label.ModelName" string.
     * A model class, which will be returned unchanged.


.. py:function:: lazy_related_operation(function, model, *related_models, **kwargs)

   Schedule `function` to be called once `model` and all `related_models`
   have been imported and registered with the app registry. `function` will
   be called with the newly-loaded model classes as its positional arguments,
   plus any optional keyword arguments.

   The `model` argument must be a model class. Each subsequent positional
   argument is another model, or a reference to another model - see
   `resolve_relation()` for the various forms these may take. Any relative
   references will be resolved relative to `model`.

   This is a convenience wrapper for `Apps.lazy_model_operation` - the app
   registry model used is the one found in `model._meta.apps`.


.. py:class:: RelatedField(related_name=None, related_query_name=None, limit_choices_to=None, **kwargs)

   Bases: :py:obj:`django.db.models.fields.mixins.FieldCacheMixin`, :py:obj:`django.db.models.fields.Field`


   Base class that all relational fields inherit from.


   .. py:attribute:: one_to_many
      :value: False



   .. py:attribute:: one_to_one
      :value: False



   .. py:attribute:: many_to_many
      :value: False



   .. py:attribute:: many_to_one
      :value: False



   .. py:method:: related_model()


   .. py:method:: check(**kwargs)


   .. py:method:: db_type(connection)


   .. py:method:: contribute_to_class(cls, name, private_only=False, **kwargs)


   .. py:method:: deconstruct()


   .. py:method:: get_forward_related_filter(obj)

      Return the keyword arguments that when supplied to
      self.model.object.filter(), would select all instances related through
      this field to the remote obj. This is used to build the querysets
      returned by related descriptors. obj is an instance of
      self.related_field.model.



   .. py:method:: get_reverse_related_filter(obj)

      Complement to get_forward_related_filter(). Return the keyword
      arguments that when passed to self.related_field.model.object.filter()
      select all instances of self.related_field.model related through
      this field to obj. obj is an instance of self.model.



   .. py:property:: swappable_setting

      Get the setting that this is powered from for swapping, or None
      if it's not swapped in / marked with swappable=False.


   .. py:method:: set_attributes_from_rel()


   .. py:method:: do_related_class(other, cls)


   .. py:method:: get_limit_choices_to()

      Return ``limit_choices_to`` for this model field.

      If it is a callable, it will be invoked and the result will be
      returned.



   .. py:method:: formfield(**kwargs)

      Pass ``limit_choices_to`` to the field being constructed.

      Only passes it if there is a type that supports related fields.
      This is a similar strategy used to pass the ``queryset`` to the field
      being constructed.



   .. py:method:: related_query_name()

      Define the name that can be used to identify this related object in a
      table-spanning query.



   .. py:property:: target_field

      When filtering against this relation, return the field on the remote
      model against which the filtering should happen.


   .. py:method:: get_cache_name()


.. py:class:: ForeignObject(to, on_delete, from_fields, to_fields, rel=None, related_name=None, related_query_name=None, limit_choices_to=None, parent_link=False, swappable=True, **kwargs)

   Bases: :py:obj:`RelatedField`


   Abstraction of the ForeignKey relation to support multi-column relations.


   .. py:attribute:: many_to_many
      :value: False



   .. py:attribute:: many_to_one
      :value: True



   .. py:attribute:: one_to_many
      :value: False



   .. py:attribute:: one_to_one
      :value: False



   .. py:attribute:: requires_unique_target
      :value: True



   .. py:attribute:: related_accessor_class


   .. py:attribute:: forward_related_accessor_class


   .. py:attribute:: rel_class


   .. py:attribute:: from_fields


   .. py:attribute:: to_fields


   .. py:attribute:: swappable
      :value: True



   .. py:method:: check(**kwargs)


   .. py:method:: deconstruct()


   .. py:method:: resolve_related_fields()


   .. py:method:: related_fields()


   .. py:method:: reverse_related_fields()


   .. py:method:: local_related_fields()


   .. py:method:: foreign_related_fields()


   .. py:method:: get_local_related_value(instance)


   .. py:method:: get_foreign_related_value(instance)


   .. py:method:: get_instance_value_for_fields(instance, fields)
      :staticmethod:



   .. py:method:: get_attname_column()


   .. py:method:: get_joining_columns(reverse_join=False)


   .. py:method:: get_reverse_joining_columns()


   .. py:method:: get_extra_descriptor_filter(instance)

      Return an extra filter condition for related object fetching when
      user does 'instance.fieldname', that is the extra filter is used in
      the descriptor of the field.

      The filter should be either a dict usable in .filter(**kwargs) call or
      a Q-object. The condition will be ANDed together with the relation's
      joining columns.

      A parallel method is get_extra_restriction() which is used in
      JOIN and subquery conditions.



   .. py:method:: get_extra_restriction(alias, related_alias)

      Return a pair condition used for joining and subquery pushdown. The
      condition is something that responds to as_sql(compiler, connection)
      method.

      Note that currently referring both the 'alias' and 'related_alias'
      will not work in some conditions, like subquery pushdown.

      A parallel method is get_extra_descriptor_filter() which is used in
      instance.fieldname related object fetching.



   .. py:method:: get_path_info(filtered_relation=None)

      Get path from this field to the related model.



   .. py:method:: path_infos()


   .. py:method:: get_reverse_path_info(filtered_relation=None)

      Get path from the related model to this field's model.



   .. py:method:: reverse_path_infos()


   .. py:method:: get_class_lookups()
      :classmethod:



   .. py:method:: contribute_to_class(cls, name, private_only=False, **kwargs)


   .. py:method:: contribute_to_related_class(cls, related)


.. py:class:: ForeignKey(to, on_delete, related_name=None, related_query_name=None, limit_choices_to=None, parent_link=False, to_field=None, db_constraint=True, **kwargs)

   Bases: :py:obj:`ForeignObject`


   Provide a many-to-one relation by adding a column to the local model
   to hold the remote value.

   By default ForeignKey will target the pk of the remote model but this
   behavior can be changed by using the ``to_field`` argument.


   .. py:attribute:: descriptor_class


   .. py:attribute:: many_to_many
      :value: False



   .. py:attribute:: many_to_one
      :value: True



   .. py:attribute:: one_to_many
      :value: False



   .. py:attribute:: one_to_one
      :value: False



   .. py:attribute:: rel_class


   .. py:attribute:: empty_strings_allowed
      :value: False



   .. py:attribute:: default_error_messages


   .. py:attribute:: description


   .. py:attribute:: db_constraint
      :value: True



   .. py:method:: check(**kwargs)


   .. py:method:: deconstruct()


   .. py:method:: to_python(value)


   .. py:property:: target_field

      When filtering against this relation, return the field on the remote
      model against which the filtering should happen.


   .. py:method:: validate(value, model_instance)


   .. py:method:: resolve_related_fields()


   .. py:method:: get_attname()


   .. py:method:: get_attname_column()


   .. py:method:: get_default()

      Return the to_field if the default value is an object.



   .. py:method:: get_db_prep_save(value, connection)


   .. py:method:: get_db_prep_value(value, connection, prepared=False)


   .. py:method:: get_prep_value(value)


   .. py:method:: contribute_to_related_class(cls, related)


   .. py:method:: formfield(*, using=None, **kwargs)

      Pass ``limit_choices_to`` to the field being constructed.

      Only passes it if there is a type that supports related fields.
      This is a similar strategy used to pass the ``queryset`` to the field
      being constructed.



   .. py:method:: db_check(connection)


   .. py:method:: db_type(connection)


   .. py:method:: db_parameters(connection)


   .. py:method:: convert_empty_strings(value, expression, connection)


   .. py:method:: get_db_converters(connection)


   .. py:method:: get_col(alias, output_field=None)


.. py:class:: OneToOneField(to, on_delete, to_field=None, **kwargs)

   Bases: :py:obj:`ForeignKey`


   A OneToOneField is essentially the same as a ForeignKey, with the exception
   that it always carries a "unique" constraint with it and the reverse
   relation always returns the object pointed to (since there will only ever
   be one), rather than returning a list.


   .. py:attribute:: many_to_many
      :value: False



   .. py:attribute:: many_to_one
      :value: False



   .. py:attribute:: one_to_many
      :value: False



   .. py:attribute:: one_to_one
      :value: True



   .. py:attribute:: related_accessor_class


   .. py:attribute:: forward_related_accessor_class


   .. py:attribute:: rel_class


   .. py:attribute:: description


   .. py:method:: deconstruct()


   .. py:method:: formfield(**kwargs)

      Pass ``limit_choices_to`` to the field being constructed.

      Only passes it if there is a type that supports related fields.
      This is a similar strategy used to pass the ``queryset`` to the field
      being constructed.



   .. py:method:: save_form_data(instance, data)


.. py:function:: create_many_to_many_intermediary_model(field, klass)

.. py:class:: ManyToManyField(to, related_name=None, related_query_name=None, limit_choices_to=None, symmetrical=None, through=None, through_fields=None, db_constraint=True, db_table=None, swappable=True, **kwargs)

   Bases: :py:obj:`RelatedField`


   Provide a many-to-many relation by using an intermediary model that
   holds two ForeignKey fields pointed at the two sides of the relation.

   Unless a ``through`` model was provided, ManyToManyField will use the
   create_many_to_many_intermediary_model factory to automatically generate
   the intermediary model.


   .. py:attribute:: many_to_many
      :value: True



   .. py:attribute:: many_to_one
      :value: False



   .. py:attribute:: one_to_many
      :value: False



   .. py:attribute:: one_to_one
      :value: False



   .. py:attribute:: rel_class


   .. py:attribute:: description


   .. py:attribute:: has_null_arg
      :value: False



   .. py:attribute:: db_table
      :value: None



   .. py:attribute:: swappable
      :value: True



   .. py:method:: check(**kwargs)


   .. py:method:: deconstruct()


   .. py:method:: get_path_info(filtered_relation=None)


   .. py:method:: path_infos()


   .. py:method:: get_reverse_path_info(filtered_relation=None)


   .. py:method:: reverse_path_infos()


   .. py:method:: contribute_to_class(cls, name, **kwargs)


   .. py:method:: contribute_to_related_class(cls, related)


   .. py:method:: set_attributes_from_rel()


   .. py:method:: value_from_object(obj)


   .. py:method:: save_form_data(instance, data)


   .. py:method:: formfield(*, using=None, **kwargs)

      Pass ``limit_choices_to`` to the field being constructed.

      Only passes it if there is a type that supports related fields.
      This is a similar strategy used to pass the ``queryset`` to the field
      being constructed.



   .. py:method:: db_check(connection)


   .. py:method:: db_type(connection)


   .. py:method:: db_parameters(connection)


