django.contrib.postgres.forms.array
===================================

.. py:module:: django.contrib.postgres.forms.array


Classes
-------

.. autoapisummary::

   django.contrib.postgres.forms.array.SimpleArrayField
   django.contrib.postgres.forms.array.SplitArrayWidget
   django.contrib.postgres.forms.array.SplitArrayField


Module Contents
---------------

.. py:class:: SimpleArrayField(base_field, *, delimiter=',', max_length=None, min_length=None, **kwargs)

   Bases: :py:obj:`django.forms.CharField`


   .. py:attribute:: default_error_messages


   .. py:attribute:: base_field


   .. py:attribute:: delimiter
      :value: ','



   .. py:method:: clean(value)

      Validate the given value and return its "cleaned" value as an
      appropriate Python object. Raise ValidationError for any errors.



   .. py:method:: prepare_value(value)


   .. py:method:: to_python(value)

      Return a string.



   .. py:method:: validate(value)


   .. py:method:: run_validators(value)


   .. py:method:: has_changed(initial, data)

      Return True if data differs from initial.



.. py:class:: SplitArrayWidget(widget, size, **kwargs)

   Bases: :py:obj:`django.forms.Widget`


   .. py:attribute:: template_name
      :value: 'postgres/widgets/split_array.html'



   .. py:attribute:: widget


   .. py:attribute:: size


   .. py:property:: is_hidden


   .. py:method:: value_from_datadict(data, files, name)


   .. py:method:: value_omitted_from_data(data, files, name)


   .. py:method:: id_for_label(id_)


   .. py:method:: get_context(name, value, attrs=None)


   .. py:property:: media


   .. py:property:: needs_multipart_form


.. py:class:: SplitArrayField(base_field, size, *, remove_trailing_nulls=False, **kwargs)

   Bases: :py:obj:`django.forms.Field`


   .. py:attribute:: default_error_messages


   .. py:attribute:: base_field


   .. py:attribute:: size


   .. py:attribute:: remove_trailing_nulls
      :value: False



   .. py:method:: to_python(value)


   .. py:method:: clean(value)

      Validate the given value and return its "cleaned" value as an
      appropriate Python object. Raise ValidationError for any errors.



   .. py:method:: has_changed(initial, data)

      Return True if data differs from initial.



