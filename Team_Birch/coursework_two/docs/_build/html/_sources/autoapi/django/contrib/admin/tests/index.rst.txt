django.contrib.admin.tests
==========================

.. py:module:: django.contrib.admin.tests


Classes
-------

.. autoapisummary::

   django.contrib.admin.tests.CSPMiddleware
   django.contrib.admin.tests.AdminSeleniumTestCase


Module Contents
---------------

.. py:class:: CSPMiddleware(get_response)

   Bases: :py:obj:`django.utils.deprecation.MiddlewareMixin`


   The admin's JavaScript should be compatible with CSP.


   .. py:method:: process_response(request, response)


.. py:class:: AdminSeleniumTestCase(methodName='runTest')

   Bases: :py:obj:`django.test.selenium.SeleniumTestCase`, :py:obj:`django.contrib.staticfiles.testing.StaticLiveServerTestCase`


   Do basically the same as TransactionTestCase but also launch a live HTTP
   server in a separate thread so that the tests may use another testing
   framework, such as Selenium for example, instead of the built-in dummy
   client.
   It inherits from TransactionTestCase instead of TestCase because the
   threads don't share the same transactions (unless if using in-memory sqlite)
   and each thread needs to commit all their transactions so that the other
   thread can see the changes.


   .. py:attribute:: available_apps
      :value: ['django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes',...



   .. py:method:: wait_until(callback, timeout=10)

      Block the execution of the tests until the specified callback returns a
      value that is not falsy. This method can be called, for example, after
      clicking a link or submitting a form. See the other public methods that
      call this function for more details.



   .. py:method:: wait_for_and_switch_to_popup(num_windows=2, timeout=10)

      Block until `num_windows` are present and are ready (usually 2, but can
      be overridden in the case of pop-ups opening other pop-ups). Switch the
      current window to the new pop-up.



   .. py:method:: wait_for(css_selector, timeout=10)

      Block until a CSS selector is found on the page.



   .. py:method:: wait_for_text(css_selector, text, timeout=10)

      Block until the text is found in the CSS selector.



   .. py:method:: wait_for_value(css_selector, text, timeout=10)

      Block until the value is found in the CSS selector.



   .. py:method:: wait_until_visible(css_selector, timeout=10)

      Block until the element described by the CSS selector is visible.



   .. py:method:: wait_until_invisible(css_selector, timeout=10)

      Block until the element described by the CSS selector is invisible.



   .. py:method:: wait_page_ready(timeout=10)

      Block until the  page is ready.



   .. py:method:: wait_page_loaded(timeout=10)

      Block until a new page has loaded and is ready.



   .. py:method:: admin_login(username, password, login_url='/admin/')

      Log in to the admin.



   .. py:method:: select_option(selector, value)

      Select the <OPTION> with the value `value` inside the <SELECT> widget
      identified by the CSS selector `selector`.



   .. py:method:: deselect_option(selector, value)

      Deselect the <OPTION> with the value `value` inside the <SELECT> widget
      identified by the CSS selector `selector`.



   .. py:method:: assertCountSeleniumElements(selector, count, root_element=None)

      Assert number of matches for a CSS selector.

      `root_element` allow restriction to a pre-selected node.



   .. py:method:: assertSelectOptions(selector, values)

      Assert that the <SELECT> widget identified by `selector` has the
      options with the given `values`.



   .. py:method:: assertSelectedOptions(selector, values)

      Assert that the <SELECT> widget identified by `selector` has the
      selected options with the given `values`.



   .. py:method:: has_css_class(selector, klass)

      Return True if the element identified by `selector` has the CSS class
      `klass`.



