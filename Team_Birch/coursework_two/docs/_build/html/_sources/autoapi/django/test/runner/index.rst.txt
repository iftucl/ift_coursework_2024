django.test.runner
==================

.. py:module:: django.test.runner


Attributes
----------

.. autoapisummary::

   django.test.runner.tblib


Classes
-------

.. autoapisummary::

   django.test.runner.DebugSQLTextTestResult
   django.test.runner.PDBDebugResult
   django.test.runner.DummyList
   django.test.runner.RemoteTestResult
   django.test.runner.RemoteTestRunner
   django.test.runner.ParallelTestSuite
   django.test.runner.Shuffler
   django.test.runner.DiscoverRunner


Functions
---------

.. autoapisummary::

   django.test.runner.get_max_test_processes
   django.test.runner.parallel_type
   django.test.runner.try_importing
   django.test.runner.find_top_level
   django.test.runner.shuffle_tests
   django.test.runner.reorder_test_bin
   django.test.runner.reorder_tests
   django.test.runner.partition_suite_by_case
   django.test.runner.test_match_tags
   django.test.runner.filter_tests_by_tags


Module Contents
---------------

.. py:data:: tblib
   :value: None


.. py:class:: DebugSQLTextTestResult(stream, descriptions, verbosity)

   Bases: :py:obj:`unittest.TextTestResult`


   A test result class that can print formatted text results to a stream.

   Used by TextTestRunner.


   .. py:attribute:: logger


   .. py:attribute:: debug_sql_stream
      :value: None



   .. py:method:: startTest(test)

      Called when the given test is about to be run



   .. py:method:: stopTest(test)

      Called when the given test has been run



   .. py:method:: addError(test, err)

      Called when an error has occurred. 'err' is a tuple of values as
      returned by sys.exc_info().



   .. py:method:: addFailure(test, err)

      Called when an error has occurred. 'err' is a tuple of values as
      returned by sys.exc_info().



   .. py:method:: addSubTest(test, subtest, err)

      Called at the end of a subtest.
      'err' is None if the subtest ended successfully, otherwise it's a
      tuple of values as returned by sys.exc_info().



   .. py:method:: printErrorList(flavour, errors)


.. py:class:: PDBDebugResult(stream, descriptions, verbosity, *, durations=None)

   Bases: :py:obj:`unittest.TextTestResult`


   Custom result class that triggers a PDB session when an error or failure
   occurs.


   .. py:method:: addError(test, err)

      Called when an error has occurred. 'err' is a tuple of values as
      returned by sys.exc_info().



   .. py:method:: addFailure(test, err)

      Called when an error has occurred. 'err' is a tuple of values as
      returned by sys.exc_info().



   .. py:method:: addSubTest(test, subtest, err)

      Called at the end of a subtest.
      'err' is None if the subtest ended successfully, otherwise it's a
      tuple of values as returned by sys.exc_info().



   .. py:method:: debug(error)


.. py:class:: DummyList

   Dummy list class for faking storage of results in unittest.TestResult.


   .. py:method:: append(item)


.. py:class:: RemoteTestResult(*args, **kwargs)

   Bases: :py:obj:`unittest.TestResult`


   Extend unittest.TestResult to record events in the child processes so they
   can be replayed in the parent process. Events include things like which
   tests succeeded or failed.


   .. py:attribute:: failures


   .. py:attribute:: errors


   .. py:attribute:: skipped


   .. py:attribute:: expectedFailures


   .. py:attribute:: unexpectedSuccesses


   .. py:attribute:: events
      :value: []



   .. py:property:: test_index


   .. py:method:: check_picklable(test, err)


   .. py:method:: check_subtest_picklable(test, subtest)


   .. py:method:: startTestRun()

      Called once before any tests are executed.

      See startTest for a method called before each test.



   .. py:method:: stopTestRun()

      Called once after all tests are executed.

      See stopTest for a method called after each test.



   .. py:method:: startTest(test)

      Called when the given test is about to be run



   .. py:method:: stopTest(test)

      Called when the given test has been run



   .. py:method:: addError(test, err)

      Called when an error has occurred. 'err' is a tuple of values as
      returned by sys.exc_info().



   .. py:method:: addFailure(test, err)

      Called when an error has occurred. 'err' is a tuple of values as
      returned by sys.exc_info().



   .. py:method:: addSubTest(test, subtest, err)

      Called at the end of a subtest.
      'err' is None if the subtest ended successfully, otherwise it's a
      tuple of values as returned by sys.exc_info().



   .. py:method:: addSuccess(test)

      Called when a test has completed successfully



   .. py:method:: addSkip(test, reason)

      Called when a test is skipped.



   .. py:method:: addExpectedFailure(test, err)

      Called when an expected failure/error occurred.



   .. py:method:: addUnexpectedSuccess(test)

      Called when a test was expected to fail, but succeed.



   .. py:method:: wasSuccessful()

      Tells whether or not this result was a success.



.. py:class:: RemoteTestRunner(failfast=False, resultclass=None, buffer=False)

   Run tests and record everything but don't display anything.

   The implementation matches the unpythonic coding style of unittest2.


   .. py:attribute:: resultclass


   .. py:attribute:: failfast
      :value: False



   .. py:attribute:: buffer
      :value: False



   .. py:method:: run(test)


.. py:function:: get_max_test_processes()

   The maximum number of test processes when using the --parallel option.


.. py:function:: parallel_type(value)

   Parse value passed to the --parallel option.


.. py:class:: ParallelTestSuite(subsuites, processes, failfast=False, debug_mode=False, buffer=False)

   Bases: :py:obj:`unittest.TestSuite`


   Run a series of tests in parallel in several processes.

   While the unittest module's documentation implies that orchestrating the
   execution of tests is the responsibility of the test runner, in practice,
   it appears that TestRunner classes are more concerned with formatting and
   displaying test results.

   Since there are fewer use cases for customizing TestSuite than TestRunner,
   implementing parallelization at the level of the TestSuite improves
   interoperability with existing custom test runners. A single instance of a
   test runner can still collect results from all tests without being aware
   that they have been run in parallel.


   .. py:attribute:: init_worker


   .. py:attribute:: process_setup


   .. py:attribute:: process_setup_args
      :value: ()



   .. py:attribute:: run_subsuite


   .. py:attribute:: runner_class


   .. py:attribute:: subsuites


   .. py:attribute:: processes


   .. py:attribute:: failfast
      :value: False



   .. py:attribute:: debug_mode
      :value: False



   .. py:attribute:: buffer
      :value: False



   .. py:attribute:: initial_settings
      :value: None



   .. py:attribute:: serialized_contents
      :value: None



   .. py:method:: run(result)

      Distribute test cases across workers.

      Return an identifier of each test case with its result in order to use
      imap_unordered to show results as soon as they're available.

      To minimize pickling errors when getting results from workers:

      - pass back numeric indexes in self.subsuites instead of tests
      - make tracebacks picklable with tblib, if available

      Even with tblib, errors may still occur for dynamically created
      exception classes which cannot be unpickled.



   .. py:method:: initialize_suite()


.. py:class:: Shuffler(seed=None)

   This class implements shuffling with a special consistency property.
   Consistency means that, for a given seed and key function, if two sets of
   items are shuffled, the resulting order will agree on the intersection of
   the two sets. For example, if items are removed from an original set, the
   shuffled order for the new set will be the shuffled order of the original
   set restricted to the smaller set.


   .. py:attribute:: hash_algorithm
      :value: 'md5'



   .. py:attribute:: seed
      :value: None



   .. py:attribute:: seed_source
      :value: 'generated'



   .. py:property:: seed_display


   .. py:method:: shuffle(items, key)

      Return a new list of the items in a shuffled order.

      The `key` is a function that accepts an item in `items` and returns
      a string unique for that item that can be viewed as a string id. The
      order of the return value is deterministic. It depends on the seed
      and key function but not on the original order.



.. py:class:: DiscoverRunner(pattern=None, top_level=None, verbosity=1, interactive=True, failfast=False, keepdb=False, reverse=False, debug_mode=False, debug_sql=False, parallel=0, tags=None, exclude_tags=None, test_name_patterns=None, pdb=False, buffer=False, enable_faulthandler=True, timing=False, shuffle=False, logger=None, **kwargs)

   A Django test runner that uses unittest2 test discovery.


   .. py:attribute:: test_suite


   .. py:attribute:: parallel_test_suite


   .. py:attribute:: test_runner


   .. py:attribute:: test_loader


   .. py:attribute:: reorder_by


   .. py:attribute:: pattern
      :value: None



   .. py:attribute:: top_level
      :value: None



   .. py:attribute:: verbosity
      :value: 1



   .. py:attribute:: interactive
      :value: True



   .. py:attribute:: failfast
      :value: False



   .. py:attribute:: keepdb
      :value: False



   .. py:attribute:: reverse
      :value: False



   .. py:attribute:: debug_mode
      :value: False



   .. py:attribute:: debug_sql
      :value: False



   .. py:attribute:: parallel
      :value: 0



   .. py:attribute:: tags


   .. py:attribute:: exclude_tags


   .. py:attribute:: pdb
      :value: False



   .. py:attribute:: buffer
      :value: False



   .. py:attribute:: test_name_patterns
      :value: None



   .. py:attribute:: time_keeper


   .. py:attribute:: shuffle
      :value: False



   .. py:attribute:: logger
      :value: None



   .. py:method:: add_arguments(parser)
      :classmethod:



   .. py:property:: shuffle_seed


   .. py:method:: log(msg, level=None)

      Log the message at the given logging level (the default is INFO).

      If a logger isn't set, the message is instead printed to the console,
      respecting the configured verbosity. A verbosity of 0 prints no output,
      a verbosity of 1 prints INFO and above, and a verbosity of 2 or higher
      prints all levels.



   .. py:method:: setup_test_environment(**kwargs)


   .. py:method:: setup_shuffler()


   .. py:method:: load_with_patterns()


   .. py:method:: load_tests_for_label(label, discover_kwargs)


   .. py:method:: build_suite(test_labels=None, extra_tests=None, **kwargs)


   .. py:method:: setup_databases(**kwargs)


   .. py:method:: get_resultclass()


   .. py:method:: get_test_runner_kwargs()


   .. py:method:: run_checks(databases)


   .. py:method:: run_suite(suite, **kwargs)


   .. py:method:: teardown_databases(old_config, **kwargs)

      Destroy all the non-mirror databases.



   .. py:method:: teardown_test_environment(**kwargs)


   .. py:method:: suite_result(suite, result, **kwargs)


   .. py:method:: get_databases(suite)


   .. py:method:: run_tests(test_labels, extra_tests=None, **kwargs)

      Run the unit tests for all the test labels in the provided list.

      Test labels should be dotted Python paths to test modules, test
      classes, or test methods.

      Return the number of tests that failed.



.. py:function:: try_importing(label)

   Try importing a test label, and return (is_importable, is_package).

   Relative labels like "." and ".." are seen as directories.


.. py:function:: find_top_level(top_level)

.. py:function:: shuffle_tests(tests, shuffler)

   Return an iterator over the given tests in a shuffled order, keeping tests
   next to other tests of their class.

   `tests` should be an iterable of tests.


.. py:function:: reorder_test_bin(tests, shuffler=None, reverse=False)

   Return an iterator that reorders the given tests, keeping tests next to
   other tests of their class.

   `tests` should be an iterable of tests that supports reversed().


.. py:function:: reorder_tests(tests, classes, reverse=False, shuffler=None)

   Reorder an iterable of tests, grouping by the given TestCase classes.

   This function also removes any duplicates and reorders so that tests of the
   same type are consecutive.

   The result is returned as an iterator. `classes` is a sequence of types.
   Tests that are instances of `classes[0]` are grouped first, followed by
   instances of `classes[1]`, etc. Tests that are not instances of any of the
   classes are grouped last.

   If `reverse` is True, the tests within each `classes` group are reversed,
   but without reversing the order of `classes` itself.

   The `shuffler` argument is an optional instance of this module's `Shuffler`
   class. If provided, tests will be shuffled within each `classes` group, but
   keeping tests with other tests of their TestCase class. Reversing is
   applied after shuffling to allow reversing the same random order.


.. py:function:: partition_suite_by_case(suite)

   Partition a test suite by test case, preserving the order of tests.


.. py:function:: test_match_tags(test, tags, exclude_tags)

.. py:function:: filter_tests_by_tags(tests, tags, exclude_tags)

   Return the matching tests as an iterator.


