django.core.validators
======================

.. py:module:: django.core.validators


Attributes
----------

.. autoapisummary::

   django.core.validators.EMPTY_VALUES
   django.core.validators.integer_validator
   django.core.validators.validate_email
   django.core.validators.slug_re
   django.core.validators.validate_slug
   django.core.validators.slug_unicode_re
   django.core.validators.validate_unicode_slug
   django.core.validators.ip_address_validator_map
   django.core.validators.validate_comma_separated_integer_list


Classes
-------

.. autoapisummary::

   django.core.validators.RegexValidator
   django.core.validators.URLValidator
   django.core.validators.EmailValidator
   django.core.validators.BaseValidator
   django.core.validators.MaxValueValidator
   django.core.validators.MinValueValidator
   django.core.validators.StepValueValidator
   django.core.validators.MinLengthValidator
   django.core.validators.MaxLengthValidator
   django.core.validators.DecimalValidator
   django.core.validators.FileExtensionValidator
   django.core.validators.ProhibitNullCharactersValidator


Functions
---------

.. autoapisummary::

   django.core.validators.validate_integer
   django.core.validators.validate_ipv4_address
   django.core.validators.validate_ipv6_address
   django.core.validators.validate_ipv46_address
   django.core.validators.ip_address_validators
   django.core.validators.int_list_validator
   django.core.validators.get_available_image_extensions
   django.core.validators.validate_image_file_extension


Module Contents
---------------

.. py:data:: EMPTY_VALUES

.. py:class:: RegexValidator(regex=None, message=None, code=None, inverse_match=None, flags=None)

   .. py:attribute:: regex
      :value: ''



   .. py:attribute:: message


   .. py:attribute:: code
      :value: 'invalid'



   .. py:attribute:: inverse_match
      :value: False



   .. py:attribute:: flags
      :value: 0



.. py:class:: URLValidator(schemes=None, **kwargs)

   Bases: :py:obj:`RegexValidator`


   .. py:attribute:: ul
      :value: '¡-\uffff'



   .. py:attribute:: ipv4_re
      :value: '(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\.(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|...



   .. py:attribute:: ipv6_re
      :value: '\\[[0-9a-f:.]+\\]'



   .. py:attribute:: hostname_re
      :value: '[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?'



   .. py:attribute:: domain_re
      :value: '(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*'



   .. py:attribute:: tld_re
      :value: '\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?'



   .. py:attribute:: host_re
      :value: '([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(...



   .. py:attribute:: regex


   .. py:attribute:: message


   .. py:attribute:: schemes
      :value: ['http', 'https', 'ftp', 'ftps']



   .. py:attribute:: unsafe_chars


   .. py:attribute:: max_length
      :value: 2048



.. py:data:: integer_validator

.. py:function:: validate_integer(value)

.. py:class:: EmailValidator(message=None, code=None, allowlist=None)

   .. py:attribute:: message


   .. py:attribute:: code
      :value: 'invalid'



   .. py:attribute:: user_regex


   .. py:attribute:: domain_regex


   .. py:attribute:: literal_regex


   .. py:attribute:: domain_allowlist
      :value: ['localhost']



   .. py:method:: validate_domain_part(domain_part)


.. py:data:: validate_email

.. py:data:: slug_re

.. py:data:: validate_slug

.. py:data:: slug_unicode_re

.. py:data:: validate_unicode_slug

.. py:function:: validate_ipv4_address(value)

.. py:function:: validate_ipv6_address(value)

.. py:function:: validate_ipv46_address(value)

.. py:data:: ip_address_validator_map

.. py:function:: ip_address_validators(protocol, unpack_ipv4)

   Depending on the given parameters, return the appropriate validators for
   the GenericIPAddressField.


.. py:function:: int_list_validator(sep=',', message=None, code='invalid', allow_negative=False)

.. py:data:: validate_comma_separated_integer_list

.. py:class:: BaseValidator(limit_value, message=None)

   .. py:attribute:: message


   .. py:attribute:: code
      :value: 'limit_value'



   .. py:attribute:: limit_value


   .. py:method:: compare(a, b)


   .. py:method:: clean(x)


.. py:class:: MaxValueValidator(limit_value, message=None)

   Bases: :py:obj:`BaseValidator`


   .. py:attribute:: message


   .. py:attribute:: code
      :value: 'max_value'



   .. py:method:: compare(a, b)


.. py:class:: MinValueValidator(limit_value, message=None)

   Bases: :py:obj:`BaseValidator`


   .. py:attribute:: message


   .. py:attribute:: code
      :value: 'min_value'



   .. py:method:: compare(a, b)


.. py:class:: StepValueValidator(limit_value, message=None)

   Bases: :py:obj:`BaseValidator`


   .. py:attribute:: message


   .. py:attribute:: code
      :value: 'step_size'



   .. py:method:: compare(a, b)


.. py:class:: MinLengthValidator(limit_value, message=None)

   Bases: :py:obj:`BaseValidator`


   .. py:attribute:: message


   .. py:attribute:: code
      :value: 'min_length'



   .. py:method:: compare(a, b)


   .. py:method:: clean(x)


.. py:class:: MaxLengthValidator(limit_value, message=None)

   Bases: :py:obj:`BaseValidator`


   .. py:attribute:: message


   .. py:attribute:: code
      :value: 'max_length'



   .. py:method:: compare(a, b)


   .. py:method:: clean(x)


.. py:class:: DecimalValidator(max_digits, decimal_places)

   Validate that the input does not exceed the maximum number of digits
   expected, otherwise raise ValidationError.


   .. py:attribute:: messages


   .. py:attribute:: max_digits


   .. py:attribute:: decimal_places


.. py:class:: FileExtensionValidator(allowed_extensions=None, message=None, code=None)

   .. py:attribute:: message


   .. py:attribute:: code
      :value: 'invalid_extension'



   .. py:attribute:: allowed_extensions
      :value: None



.. py:function:: get_available_image_extensions()

.. py:function:: validate_image_file_extension(value)

.. py:class:: ProhibitNullCharactersValidator(message=None, code=None)

   Validate that the string doesn't contain the null character.


   .. py:attribute:: message


   .. py:attribute:: code
      :value: 'null_characters_not_allowed'



