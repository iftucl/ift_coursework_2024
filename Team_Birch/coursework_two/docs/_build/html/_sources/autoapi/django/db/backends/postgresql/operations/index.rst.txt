django.db.backends.postgresql.operations
========================================

.. py:module:: django.db.backends.postgresql.operations


Classes
-------

.. autoapisummary::

   django.db.backends.postgresql.operations.DatabaseOperations


Functions
---------

.. autoapisummary::

   django.db.backends.postgresql.operations.get_json_dumps


Module Contents
---------------

.. py:function:: get_json_dumps(encoder)

.. py:class:: DatabaseOperations

   Bases: :py:obj:`django.db.backends.base.operations.BaseDatabaseOperations`


   .. py:attribute:: cast_char_field_without_max_length
      :value: 'varchar'



   .. py:attribute:: explain_prefix
      :value: 'EXPLAIN'



   .. py:attribute:: explain_options


   .. py:attribute:: cast_data_types


   .. py:attribute:: integerfield_type_map


   .. py:method:: unification_cast_sql(output_field)


   .. py:method:: date_extract_sql(lookup_type, sql, params)


   .. py:method:: date_trunc_sql(lookup_type, sql, params, tzname=None)


   .. py:method:: datetime_cast_date_sql(sql, params, tzname)


   .. py:method:: datetime_cast_time_sql(sql, params, tzname)


   .. py:method:: datetime_extract_sql(lookup_type, sql, params, tzname)


   .. py:method:: datetime_trunc_sql(lookup_type, sql, params, tzname)


   .. py:method:: time_extract_sql(lookup_type, sql, params)


   .. py:method:: time_trunc_sql(lookup_type, sql, params, tzname=None)


   .. py:method:: deferrable_sql()


   .. py:method:: fetch_returned_insert_rows(cursor)

      Given a cursor object that has just performed an INSERT...RETURNING
      statement into a table, return the tuple of returned data.



   .. py:method:: lookup_cast(lookup_type, internal_type=None)


   .. py:method:: no_limit_value()


   .. py:method:: prepare_sql_script(sql)


   .. py:method:: quote_name(name)


   .. py:method:: compose_sql(sql, params)


   .. py:method:: set_time_zone_sql()


   .. py:method:: sql_flush(style, tables, *, reset_sequences=False, allow_cascade=False)


   .. py:method:: sequence_reset_by_name_sql(style, sequences)


   .. py:method:: tablespace_sql(tablespace, inline=False)


   .. py:method:: sequence_reset_sql(style, model_list)


   .. py:method:: prep_for_iexact_query(x)


   .. py:method:: max_name_length()

      Return the maximum length of an identifier.

      The maximum length of an identifier is 63 by default, but can be
      changed by recompiling PostgreSQL after editing the NAMEDATALEN
      macro in src/include/pg_config_manual.h.

      This implementation returns 63, but can be overridden by a custom
      database backend that inherits most of its behavior from this one.



   .. py:method:: distinct_sql(fields, params)


   .. py:method:: last_executed_query(cursor, sql, params)


   .. py:method:: return_insert_columns(fields)


   .. py:method:: bulk_insert_sql(fields, placeholder_rows)


   .. py:method:: adapt_integerfield_value(value, internal_type)


   .. py:method:: adapt_datefield_value(value)


   .. py:method:: adapt_datetimefield_value(value)


   .. py:method:: adapt_timefield_value(value)


   .. py:method:: adapt_decimalfield_value(value, max_digits=None, decimal_places=None)


   .. py:method:: adapt_ipaddressfield_value(value)


   .. py:method:: adapt_json_value(value, encoder)


   .. py:method:: subtract_temporals(internal_type, lhs, rhs)


   .. py:method:: explain_query_prefix(format=None, **options)


   .. py:method:: on_conflict_suffix_sql(fields, on_conflict, update_fields, unique_fields)


