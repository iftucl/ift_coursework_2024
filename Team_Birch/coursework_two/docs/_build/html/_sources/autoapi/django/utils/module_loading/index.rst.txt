django.utils.module_loading
===========================

.. py:module:: django.utils.module_loading


Functions
---------

.. autoapisummary::

   django.utils.module_loading.cached_import
   django.utils.module_loading.import_string
   django.utils.module_loading.autodiscover_modules
   django.utils.module_loading.module_has_submodule
   django.utils.module_loading.module_dir


Module Contents
---------------

.. py:function:: cached_import(module_path, class_name)

.. py:function:: import_string(dotted_path)

   Import a dotted module path and return the attribute/class designated by the
   last name in the path. Raise ImportError if the import failed.


.. py:function:: autodiscover_modules(*args, **kwargs)

   Auto-discover INSTALLED_APPS modules and fail silently when
   not present. This forces an import on them to register any admin bits they
   may want.

   You may provide a register_to keyword parameter as a way to access a
   registry. This register_to object must have a _registry instance variable
   to access it.


.. py:function:: module_has_submodule(package, module_name)

   See if 'module' is in 'package'.


.. py:function:: module_dir(module)

   Find the name of the directory that contains a module, if possible.

   Raise ValueError otherwise, e.g. for namespace packages that are split
   over several directories.


