django.db.backends.sqlite3.operations
=====================================

.. py:module:: django.db.backends.sqlite3.operations


Classes
-------

.. autoapisummary::

   django.db.backends.sqlite3.operations.DatabaseOperations


Module Contents
---------------

.. py:class:: DatabaseOperations

   Bases: :py:obj:`django.db.backends.base.operations.BaseDatabaseOperations`


   .. py:attribute:: cast_char_field_without_max_length
      :value: 'text'



   .. py:attribute:: cast_data_types


   .. py:attribute:: explain_prefix
      :value: 'EXPLAIN QUERY PLAN'



   .. py:attribute:: jsonfield_datatype_values


   .. py:method:: bulk_batch_size(fields, objs)

      SQLite has a compile-time default (SQLITE_LIMIT_VARIABLE_NUMBER) of
      999 variables per query.

      If there's only a single field to insert, the limit is 500
      (SQLITE_MAX_COMPOUND_SELECT).



   .. py:method:: check_expression_support(expression)


   .. py:method:: date_extract_sql(lookup_type, sql, params)

      Support EXTRACT with a user-defined function django_date_extract()
      that's registered in connect(). Use single quotes because this is a
      string and could otherwise cause a collision with a field name.



   .. py:method:: fetch_returned_insert_rows(cursor)

      Given a cursor object that has just performed an INSERT...RETURNING
      statement into a table, return the list of returned data.



   .. py:method:: format_for_duration_arithmetic(sql)

      Do nothing since formatting is handled in the custom function.



   .. py:method:: date_trunc_sql(lookup_type, sql, params, tzname=None)


   .. py:method:: time_trunc_sql(lookup_type, sql, params, tzname=None)


   .. py:method:: datetime_cast_date_sql(sql, params, tzname)


   .. py:method:: datetime_cast_time_sql(sql, params, tzname)


   .. py:method:: datetime_extract_sql(lookup_type, sql, params, tzname)


   .. py:method:: datetime_trunc_sql(lookup_type, sql, params, tzname)


   .. py:method:: time_extract_sql(lookup_type, sql, params)


   .. py:method:: pk_default_value()


   .. py:method:: last_executed_query(cursor, sql, params)


   .. py:method:: quote_name(name)


   .. py:method:: no_limit_value()


   .. py:method:: sql_flush(style, tables, *, reset_sequences=False, allow_cascade=False)


   .. py:method:: sequence_reset_by_name_sql(style, sequences)


   .. py:method:: adapt_datetimefield_value(value)


   .. py:method:: adapt_timefield_value(value)


   .. py:method:: get_db_converters(expression)


   .. py:method:: convert_datetimefield_value(value, expression, connection)


   .. py:method:: convert_datefield_value(value, expression, connection)


   .. py:method:: convert_timefield_value(value, expression, connection)


   .. py:method:: get_decimalfield_converter(expression)


   .. py:method:: convert_uuidfield_value(value, expression, connection)


   .. py:method:: convert_booleanfield_value(value, expression, connection)


   .. py:method:: bulk_insert_sql(fields, placeholder_rows)


   .. py:method:: combine_expression(connector, sub_expressions)


   .. py:method:: combine_duration_expression(connector, sub_expressions)


   .. py:method:: integer_field_range(internal_type)


   .. py:method:: subtract_temporals(internal_type, lhs, rhs)


   .. py:method:: insert_statement(on_conflict=None)


   .. py:method:: return_insert_columns(fields)


   .. py:method:: on_conflict_suffix_sql(fields, on_conflict, update_fields, unique_fields)


