django.http.request
===================

.. py:module:: django.http.request


Attributes
----------

.. autoapisummary::

   django.http.request.RAISE_ERROR
   django.http.request.host_validation_re


Exceptions
----------

.. autoapisummary::

   django.http.request.UnreadablePostError
   django.http.request.RawPostDataException


Classes
-------

.. autoapisummary::

   django.http.request.HttpRequest
   django.http.request.HttpHeaders
   django.http.request.QueryDict
   django.http.request.MediaType


Functions
---------

.. autoapisummary::

   django.http.request.bytes_to_text
   django.http.request.split_domain_port
   django.http.request.validate_host
   django.http.request.parse_accept_header


Module Contents
---------------

.. py:data:: RAISE_ERROR

.. py:data:: host_validation_re

.. py:exception:: UnreadablePostError

   Bases: :py:obj:`OSError`


   Base class for I/O related errors.


.. py:exception:: RawPostDataException

   Bases: :py:obj:`Exception`


   You cannot access raw_post_data from a request that has
   multipart/* POST data if it has been accessed via POST,
   FILES, etc..


.. py:class:: HttpRequest

   A basic HTTP request.


   .. py:attribute:: GET


   .. py:attribute:: POST


   .. py:attribute:: COOKIES


   .. py:attribute:: META


   .. py:attribute:: FILES


   .. py:attribute:: path
      :value: ''



   .. py:attribute:: path_info
      :value: ''



   .. py:attribute:: method
      :value: None



   .. py:attribute:: resolver_match
      :value: None



   .. py:attribute:: content_type
      :value: None



   .. py:attribute:: content_params
      :value: None



   .. py:method:: headers()


   .. py:method:: accepted_types()

      Return a list of MediaType instances.



   .. py:method:: accepts(media_type)


   .. py:method:: get_host()

      Return the HTTP host using the environment or request headers.



   .. py:method:: get_port()

      Return the port number for the request as a string.



   .. py:method:: get_full_path(force_append_slash=False)


   .. py:method:: get_full_path_info(force_append_slash=False)


   .. py:method:: get_signed_cookie(key, default=RAISE_ERROR, salt='', max_age=None)

      Attempt to return a signed cookie. If the signature fails or the
      cookie has expired, raise an exception, unless the `default` argument
      is provided,  in which case return that value.



   .. py:method:: build_absolute_uri(location=None)

      Build an absolute URI from the location and the variables available in
      this request. If no ``location`` is specified, build the absolute URI
      using request.get_full_path(). If the location is absolute, convert it
      to an RFC 3987 compliant URI and return it. If location is relative or
      is scheme-relative (i.e., ``//example.com/``), urljoin() it to a base
      URL constructed from the request variables.



   .. py:property:: scheme


   .. py:method:: is_secure()


   .. py:property:: encoding


   .. py:property:: upload_handlers


   .. py:method:: parse_file_upload(META, post_data)

      Return a tuple of (POST QueryDict, FILES MultiValueDict).



   .. py:property:: body


   .. py:method:: close()


   .. py:method:: read(*args, **kwargs)


   .. py:method:: readline(*args, **kwargs)


   .. py:method:: readlines()


.. py:class:: HttpHeaders(environ)

   Bases: :py:obj:`django.utils.datastructures.CaseInsensitiveMapping`


   Mapping allowing case-insensitive key lookups. Original case of keys is
   preserved for iteration and string representation.

   Example::

       >>> ci_map = CaseInsensitiveMapping({'name': 'Jane'})
       >>> ci_map['Name']
       Jane
       >>> ci_map['NAME']
       Jane
       >>> ci_map['name']
       Jane
       >>> ci_map  # original case preserved
       {'name': 'Jane'}


   .. py:attribute:: HTTP_PREFIX
      :value: 'HTTP_'



   .. py:attribute:: UNPREFIXED_HEADERS


   .. py:method:: parse_header_name(header)
      :classmethod:



   .. py:method:: to_wsgi_name(header)
      :classmethod:



   .. py:method:: to_asgi_name(header)
      :classmethod:



   .. py:method:: to_wsgi_names(headers)
      :classmethod:



   .. py:method:: to_asgi_names(headers)
      :classmethod:



.. py:class:: QueryDict(query_string=None, mutable=False, encoding=None)

   Bases: :py:obj:`django.utils.datastructures.MultiValueDict`


   A specialized MultiValueDict which represents a query string.

   A QueryDict can be used to represent GET or POST data. It subclasses
   MultiValueDict since keys in such data can be repeated, for instance
   in the data from a form with a <select multiple> field.

   By default QueryDicts are immutable, though the copy() method
   will always return a mutable copy.

   Both keys and values set on this class are converted from the given encoding
   (DEFAULT_CHARSET by default) to str.


   .. py:property:: encoding


   .. py:method:: fromkeys(iterable, value='', mutable=False, encoding=None)
      :classmethod:


      Return a new QueryDict with keys (may be repeated) from an iterable and
      values from value.



   .. py:method:: setlist(key, list_)


   .. py:method:: setlistdefault(key, default_list=None)


   .. py:method:: appendlist(key, value)

      Append an item to the internal list associated with key.



   .. py:method:: pop(key, *args)

      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

      If the key is not found, return the default if given; otherwise,
      raise a KeyError.



   .. py:method:: popitem()

      Remove and return a (key, value) pair as a 2-tuple.

      Pairs are returned in LIFO (last-in, first-out) order.
      Raises KeyError if the dict is empty.



   .. py:method:: clear()

      D.clear() -> None.  Remove all items from D.



   .. py:method:: setdefault(key, default=None)

      Insert key with a value of default if key is not in the dictionary.

      Return the value for key if key is in the dictionary, else default.



   .. py:method:: copy()

      Return a mutable copy of this object.



   .. py:method:: urlencode(safe=None)

      Return an encoded string of all query string arguments.

      `safe` specifies characters which don't require quoting, for example::

          >>> q = QueryDict(mutable=True)
          >>> q['next'] = '/a&b/'
          >>> q.urlencode()
          'next=%2Fa%26b%2F'
          >>> q.urlencode(safe='/')
          'next=/a%26b/'



.. py:class:: MediaType(media_type_raw_line)

   .. py:property:: is_all_types


   .. py:method:: match(other)


.. py:function:: bytes_to_text(s, encoding)

   Convert bytes objects to strings, using the given encoding. Illegally
   encoded input characters are replaced with Unicode "unknown" codepoint
   (ï¿½).

   Return any non-bytes objects without change.


.. py:function:: split_domain_port(host)

   Return a (domain, port) tuple from a given host.

   Returned domain is lowercased. If the host is invalid, the domain will be
   empty.


.. py:function:: validate_host(host, allowed_hosts)

   Validate the given host for this site.

   Check that the host looks valid and matches a host or host pattern in the
   given list of ``allowed_hosts``. Any pattern beginning with a period
   matches a domain and all its subdomains (e.g. ``.example.com`` matches
   ``example.com`` and any subdomain), ``*`` matches anything, and anything
   else must match exactly.

   Note: This function assumes that the given host is lowercased and has
   already had the port, if any, stripped off.

   Return ``True`` for a valid host, ``False`` otherwise.


.. py:function:: parse_accept_header(header)

