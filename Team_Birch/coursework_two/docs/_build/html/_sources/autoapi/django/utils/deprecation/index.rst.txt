django.utils.deprecation
========================

.. py:module:: django.utils.deprecation


Attributes
----------

.. autoapisummary::

   django.utils.deprecation.RemovedInNextVersionWarning
   django.utils.deprecation.RemovedAfterNextVersionWarning


Exceptions
----------

.. autoapisummary::

   django.utils.deprecation.RemovedInDjango50Warning
   django.utils.deprecation.RemovedInDjango51Warning


Classes
-------

.. autoapisummary::

   django.utils.deprecation.warn_about_renamed_method
   django.utils.deprecation.RenameMethodsBase
   django.utils.deprecation.DeprecationInstanceCheck
   django.utils.deprecation.MiddlewareMixin


Module Contents
---------------

.. py:exception:: RemovedInDjango50Warning

   Bases: :py:obj:`DeprecationWarning`


   Base class for warnings about deprecated features.


.. py:exception:: RemovedInDjango51Warning

   Bases: :py:obj:`PendingDeprecationWarning`


   Base class for warnings about features which will be deprecated
   in the future.


.. py:data:: RemovedInNextVersionWarning

.. py:data:: RemovedAfterNextVersionWarning

.. py:class:: warn_about_renamed_method(class_name, old_method_name, new_method_name, deprecation_warning)

   .. py:attribute:: class_name


   .. py:attribute:: old_method_name


   .. py:attribute:: new_method_name


   .. py:attribute:: deprecation_warning


.. py:class:: RenameMethodsBase

   Bases: :py:obj:`type`


   Handles the deprecation paths when renaming a method.

   It does the following:
       1) Define the new method if missing and complain about it.
       2) Define the old method if missing.
       3) Complain whenever an old method is called.

   See #15363 for more details.


   .. py:attribute:: renamed_methods
      :value: ()



.. py:class:: DeprecationInstanceCheck

   Bases: :py:obj:`type`


.. py:class:: MiddlewareMixin(get_response)

   .. py:attribute:: sync_capable
      :value: True



   .. py:attribute:: async_capable
      :value: True



   .. py:attribute:: get_response


