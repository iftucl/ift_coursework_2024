django.core.mail.message
========================

.. py:module:: django.core.mail.message


Attributes
----------

.. autoapisummary::

   django.core.mail.message.utf8_charset
   django.core.mail.message.utf8_charset_qp
   django.core.mail.message.DEFAULT_ATTACHMENT_MIME_TYPE
   django.core.mail.message.RFC5322_EMAIL_LINE_LENGTH_LIMIT
   django.core.mail.message.ADDRESS_HEADERS


Exceptions
----------

.. autoapisummary::

   django.core.mail.message.BadHeaderError


Classes
-------

.. autoapisummary::

   django.core.mail.message.MIMEMixin
   django.core.mail.message.SafeMIMEMessage
   django.core.mail.message.SafeMIMEText
   django.core.mail.message.SafeMIMEMultipart
   django.core.mail.message.EmailMessage
   django.core.mail.message.EmailMultiAlternatives


Functions
---------

.. autoapisummary::

   django.core.mail.message.forbid_multi_line_headers
   django.core.mail.message.sanitize_address


Module Contents
---------------

.. py:data:: utf8_charset

.. py:data:: utf8_charset_qp

.. py:data:: DEFAULT_ATTACHMENT_MIME_TYPE
   :value: 'application/octet-stream'


.. py:data:: RFC5322_EMAIL_LINE_LENGTH_LIMIT
   :value: 998


.. py:exception:: BadHeaderError

   Bases: :py:obj:`ValueError`


   Inappropriate argument value (of correct type).


.. py:data:: ADDRESS_HEADERS

.. py:function:: forbid_multi_line_headers(name, val, encoding)

   Forbid multi-line headers to prevent header injection.


.. py:function:: sanitize_address(addr, encoding)

   Format a pair of (name, address) or an email address string.


.. py:class:: MIMEMixin

   .. py:method:: as_string(unixfrom=False, linesep='\n')

      Return the entire formatted message as a string.
      Optional `unixfrom' when True, means include the Unix From_ envelope
      header.

      This overrides the default as_string() implementation to not mangle
      lines that begin with 'From '. See bug #13433 for details.



   .. py:method:: as_bytes(unixfrom=False, linesep='\n')

      Return the entire formatted message as bytes.
      Optional `unixfrom' when True, means include the Unix From_ envelope
      header.

      This overrides the default as_bytes() implementation to not mangle
      lines that begin with 'From '. See bug #13433 for details.



.. py:class:: SafeMIMEMessage(_msg, _subtype='rfc822', *, policy=None)

   Bases: :py:obj:`MIMEMixin`, :py:obj:`email.mime.message.MIMEMessage`


   Class representing message/* MIME documents.


.. py:class:: SafeMIMEText(_text, _subtype='plain', _charset=None)

   Bases: :py:obj:`MIMEMixin`, :py:obj:`email.mime.text.MIMEText`


   Class for generating text/* type MIME documents.


   .. py:attribute:: encoding
      :value: None



   .. py:method:: set_payload(payload, charset=None)

      Set the payload to the given value.

      Optional charset sets the message's default character set.  See
      set_charset() for details.



.. py:class:: SafeMIMEMultipart(_subtype='mixed', boundary=None, _subparts=None, encoding=None, **_params)

   Bases: :py:obj:`MIMEMixin`, :py:obj:`email.mime.multipart.MIMEMultipart`


   Base class for MIME multipart/* type messages.


   .. py:attribute:: encoding
      :value: None



.. py:class:: EmailMessage(subject='', body='', from_email=None, to=None, bcc=None, connection=None, attachments=None, headers=None, cc=None, reply_to=None)

   A container for email information.


   .. py:attribute:: content_subtype
      :value: 'plain'



   .. py:attribute:: mixed_subtype
      :value: 'mixed'



   .. py:attribute:: encoding
      :value: None



   .. py:attribute:: from_email


   .. py:attribute:: subject
      :value: ''



   .. py:attribute:: body
      :value: ''



   .. py:attribute:: attachments
      :value: []



   .. py:attribute:: extra_headers


   .. py:attribute:: connection
      :value: None



   .. py:method:: get_connection(fail_silently=False)


   .. py:method:: message()


   .. py:method:: recipients()

      Return a list of all recipients of the email (includes direct
      addressees as well as Cc and Bcc entries).



   .. py:method:: send(fail_silently=False)

      Send the email message.



   .. py:method:: attach(filename=None, content=None, mimetype=None)

      Attach a file with the given filename and content. The filename can
      be omitted and the mimetype is guessed, if not provided.

      If the first parameter is a MIMEBase subclass, insert it directly
      into the resulting message attachments.

      For a text/* mimetype (guessed or specified), when a bytes object is
      specified as content, decode it as UTF-8. If that fails, set the
      mimetype to DEFAULT_ATTACHMENT_MIME_TYPE and don't decode the content.



   .. py:method:: attach_file(path, mimetype=None)

      Attach a file from the filesystem.

      Set the mimetype to DEFAULT_ATTACHMENT_MIME_TYPE if it isn't specified
      and cannot be guessed.

      For a text/* mimetype (guessed or specified), decode the file's content
      as UTF-8. If that fails, set the mimetype to
      DEFAULT_ATTACHMENT_MIME_TYPE and don't decode the content.



.. py:class:: EmailMultiAlternatives(subject='', body='', from_email=None, to=None, bcc=None, connection=None, attachments=None, headers=None, alternatives=None, cc=None, reply_to=None)

   Bases: :py:obj:`EmailMessage`


   A version of EmailMessage that makes it easy to send multipart/alternative
   messages. For example, including text and HTML versions of the text is
   made easier.


   .. py:attribute:: alternative_subtype
      :value: 'alternative'



   .. py:attribute:: alternatives
      :value: []



   .. py:method:: attach_alternative(content, mimetype)

      Attach an alternative content representation.



