django.db.models.fields.files
=============================

.. py:module:: django.db.models.fields.files


Classes
-------

.. autoapisummary::

   django.db.models.fields.files.FieldFile
   django.db.models.fields.files.FileDescriptor
   django.db.models.fields.files.FileField
   django.db.models.fields.files.ImageFileDescriptor
   django.db.models.fields.files.ImageFieldFile
   django.db.models.fields.files.ImageField


Module Contents
---------------

.. py:class:: FieldFile(instance, field, name)

   Bases: :py:obj:`django.core.files.base.File`, :py:obj:`django.db.models.utils.AltersData`


   A mixin class used to forward file methods to an underlaying file
   object.  The internal file object has to be called "file"::

       class FileProxy(FileProxyMixin):
           def __init__(self, file):
               self.file = file


   .. py:attribute:: instance


   .. py:attribute:: field


   .. py:attribute:: storage


   .. py:attribute:: file


   .. py:property:: path


   .. py:property:: url


   .. py:property:: size


   .. py:method:: open(mode='rb')


   .. py:method:: save(name, content, save=True)


   .. py:method:: delete(save=True)


   .. py:property:: closed


   .. py:method:: close()


.. py:class:: FileDescriptor(field)

   Bases: :py:obj:`django.db.models.query_utils.DeferredAttribute`


   The descriptor for the file attribute on the model instance. Return a
   FieldFile when accessed so you can write code like::

       >>> from myapp.models import MyModel
       >>> instance = MyModel.objects.get(pk=1)
       >>> instance.file.size

   Assign a file object on assignment so you can do::

       >>> with open('/path/to/hello.world') as f:
       ...     instance.file = File(f)


.. py:class:: FileField(verbose_name=None, name=None, upload_to='', storage=None, **kwargs)

   Bases: :py:obj:`django.db.models.fields.Field`


   .. py:attribute:: attr_class


   .. py:attribute:: descriptor_class


   .. py:attribute:: description


   .. py:attribute:: storage


   .. py:attribute:: upload_to
      :value: ''



   .. py:method:: check(**kwargs)


   .. py:method:: deconstruct()


   .. py:method:: get_internal_type()


   .. py:method:: get_prep_value(value)


   .. py:method:: pre_save(model_instance, add)


   .. py:method:: contribute_to_class(cls, name, **kwargs)


   .. py:method:: generate_filename(instance, filename)

      Apply (if callable) or prepend (if a string) upload_to to the filename,
      then delegate further processing of the name to the storage backend.
      Until the storage layer, all file paths are expected to be Unix style
      (with forward slashes).



   .. py:method:: save_form_data(instance, data)


   .. py:method:: formfield(**kwargs)


.. py:class:: ImageFileDescriptor(field)

   Bases: :py:obj:`FileDescriptor`


   Just like the FileDescriptor, but for ImageFields. The only difference is
   assigning the width/height to the width_field/height_field, if appropriate.


.. py:class:: ImageFieldFile(file, name=None)

   Bases: :py:obj:`django.core.files.images.ImageFile`, :py:obj:`FieldFile`


   A mixin for use alongside django.core.files.base.File, which provides
   additional features for dealing with images.


   .. py:method:: delete(save=True)


.. py:class:: ImageField(verbose_name=None, name=None, width_field=None, height_field=None, **kwargs)

   Bases: :py:obj:`FileField`


   .. py:attribute:: attr_class


   .. py:attribute:: descriptor_class


   .. py:attribute:: description


   .. py:method:: check(**kwargs)


   .. py:method:: deconstruct()


   .. py:method:: contribute_to_class(cls, name, **kwargs)


   .. py:method:: update_dimension_fields(instance, force=False, *args, **kwargs)

      Update field's width and height fields, if defined.

      This method is hooked up to model's post_init signal to update
      dimensions after instantiating a model instance.  However, dimensions
      won't be updated if the dimensions fields are already populated.  This
      avoids unnecessary recalculation when loading an object from the
      database.

      Dimensions can be forced to update with force=True, which is how
      ImageFileDescriptor.__set__ calls this method.



   .. py:method:: formfield(**kwargs)


