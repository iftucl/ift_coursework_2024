django.db.models.signals
========================

.. py:module:: django.db.models.signals


Attributes
----------

.. autoapisummary::

   django.db.models.signals.class_prepared
   django.db.models.signals.pre_init
   django.db.models.signals.post_init
   django.db.models.signals.pre_save
   django.db.models.signals.post_save
   django.db.models.signals.pre_delete
   django.db.models.signals.post_delete
   django.db.models.signals.m2m_changed
   django.db.models.signals.pre_migrate
   django.db.models.signals.post_migrate


Classes
-------

.. autoapisummary::

   django.db.models.signals.ModelSignal


Module Contents
---------------

.. py:data:: class_prepared

.. py:class:: ModelSignal(use_caching=False)

   Bases: :py:obj:`django.dispatch.Signal`


   Signal subclass that allows the sender to be lazily specified as a string
   of the `app_label.ModelName` form.


   .. py:method:: connect(receiver, sender=None, weak=True, dispatch_uid=None, apps=None)

      Connect receiver to sender for signal.

      :param receiver: A function or an instance method which is to receive signals.
                       Receivers must be hashable objects.

                       If weak is True, then receiver must be weak referenceable.

                       Receivers must be able to accept keyword arguments.

                       If a receiver is connected with a dispatch_uid argument, it
                       will not be added if another receiver was already connected
                       with that dispatch_uid.
      :param sender: The sender to which the receiver should respond. Must either be
                     a Python object, or None to receive events from any sender.
      :param weak: Whether to use weak references to the receiver. By default, the
                   module will attempt to use weak references to the receiver
                   objects. If this parameter is false, then strong references will
                   be used.
      :param dispatch_uid: An identifier used to uniquely identify a particular instance of
                           a receiver. This will usually be a string, though it may be
                           anything hashable.



   .. py:method:: disconnect(receiver=None, sender=None, dispatch_uid=None, apps=None)

      Disconnect receiver from sender for signal.

      If weak references are used, disconnect need not be called. The receiver
      will be removed from dispatch automatically.

      :param receiver: The registered receiver to disconnect. May be none if
                       dispatch_uid is specified.
      :param sender: The registered sender to disconnect
      :param dispatch_uid: the unique identifier of the receiver to disconnect



.. py:data:: pre_init

.. py:data:: post_init

.. py:data:: pre_save

.. py:data:: post_save

.. py:data:: pre_delete

.. py:data:: post_delete

.. py:data:: m2m_changed

.. py:data:: pre_migrate

.. py:data:: post_migrate

