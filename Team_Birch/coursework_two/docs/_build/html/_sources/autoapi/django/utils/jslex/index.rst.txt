django.utils.jslex
==================

.. py:module:: django.utils.jslex

.. autoapi-nested-parse::

   JsLex: a lexer for JavaScript



Classes
-------

.. autoapisummary::

   django.utils.jslex.Tok
   django.utils.jslex.Lexer
   django.utils.jslex.JsLexer


Functions
---------

.. autoapisummary::

   django.utils.jslex.literals
   django.utils.jslex.prepare_js_for_gettext


Module Contents
---------------

.. py:class:: Tok(name, regex, next=None)

   A specification for a token class.


   .. py:attribute:: num
      :value: 0



   .. py:attribute:: id
      :value: 0



   .. py:attribute:: name


   .. py:attribute:: regex


   .. py:attribute:: next
      :value: None



.. py:function:: literals(choices, prefix='', suffix='')

   Create a regex from a space-separated list of literal `choices`.

   If provided, `prefix` and `suffix` will be attached to each choice
   individually.


.. py:class:: Lexer(states, first)

   A generic multi-state regex-based lexer.


   .. py:attribute:: regexes


   .. py:attribute:: toks


   .. py:attribute:: state


   .. py:method:: lex(text)

      Lexically analyze `text`.

      Yield pairs (`name`, `tokentext`).



.. py:class:: JsLexer

   Bases: :py:obj:`Lexer`


   A JavaScript lexer

   >>> lexer = JsLexer()
   >>> list(lexer.lex("a = 1"))
   [('id', 'a'), ('ws', ' '), ('punct', '='), ('ws', ' '), ('dnum', '1')]

   This doesn't properly handle non-ASCII characters in the JavaScript source.


   .. py:attribute:: both_before


   .. py:attribute:: both_after


   .. py:attribute:: states


.. py:function:: prepare_js_for_gettext(js)

   Convert the JavaScript source `js` into something resembling C for
   xgettext.

   What actually happens is that all the regex literals are replaced with
   "REGEX".


