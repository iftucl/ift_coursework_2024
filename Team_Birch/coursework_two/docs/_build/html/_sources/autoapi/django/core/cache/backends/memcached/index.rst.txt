django.core.cache.backends.memcached
====================================

.. py:module:: django.core.cache.backends.memcached

.. autoapi-nested-parse::

   Memcached cache backend



Classes
-------

.. autoapisummary::

   django.core.cache.backends.memcached.BaseMemcachedCache
   django.core.cache.backends.memcached.PyLibMCCache
   django.core.cache.backends.memcached.PyMemcacheCache


Module Contents
---------------

.. py:class:: BaseMemcachedCache(server, params, library, value_not_found_exception)

   Bases: :py:obj:`django.core.cache.backends.base.BaseCache`


   .. py:attribute:: LibraryValueNotFoundException


   .. py:property:: client_servers


   .. py:method:: get_backend_timeout(timeout=DEFAULT_TIMEOUT)

      Memcached deals with long (> 30 days) timeouts in a special
      way. Call this function to obtain a safe value for your timeout.



   .. py:method:: add(key, value, timeout=DEFAULT_TIMEOUT, version=None)


   .. py:method:: get(key, default=None, version=None)


   .. py:method:: set(key, value, timeout=DEFAULT_TIMEOUT, version=None)


   .. py:method:: touch(key, timeout=DEFAULT_TIMEOUT, version=None)


   .. py:method:: delete(key, version=None)


   .. py:method:: get_many(keys, version=None)


   .. py:method:: close(**kwargs)


   .. py:method:: incr(key, delta=1, version=None)


   .. py:method:: set_many(data, timeout=DEFAULT_TIMEOUT, version=None)


   .. py:method:: delete_many(keys, version=None)


   .. py:method:: clear()


   .. py:method:: validate_key(key)


.. py:class:: PyLibMCCache(server, params)

   Bases: :py:obj:`BaseMemcachedCache`


   An implementation of a cache binding using pylibmc


   .. py:property:: client_servers


   .. py:method:: touch(key, timeout=DEFAULT_TIMEOUT, version=None)


   .. py:method:: close(**kwargs)


.. py:class:: PyMemcacheCache(server, params)

   Bases: :py:obj:`BaseMemcachedCache`


   An implementation of a cache binding using pymemcache.


