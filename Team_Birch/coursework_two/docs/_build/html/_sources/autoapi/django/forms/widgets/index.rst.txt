django.forms.widgets
====================

.. py:module:: django.forms.widgets

.. autoapi-nested-parse::

   HTML Widget classes



Classes
-------

.. autoapisummary::

   django.forms.widgets.Media
   django.forms.widgets.MediaDefiningClass
   django.forms.widgets.Widget
   django.forms.widgets.TextInput
   django.forms.widgets.NumberInput
   django.forms.widgets.EmailInput
   django.forms.widgets.URLInput
   django.forms.widgets.PasswordInput
   django.forms.widgets.HiddenInput
   django.forms.widgets.MultipleHiddenInput
   django.forms.widgets.FileInput
   django.forms.widgets.ClearableFileInput
   django.forms.widgets.Textarea
   django.forms.widgets.DateInput
   django.forms.widgets.DateTimeInput
   django.forms.widgets.TimeInput
   django.forms.widgets.CheckboxInput
   django.forms.widgets.Select
   django.forms.widgets.NullBooleanSelect
   django.forms.widgets.SelectMultiple
   django.forms.widgets.RadioSelect
   django.forms.widgets.CheckboxSelectMultiple
   django.forms.widgets.MultiWidget
   django.forms.widgets.SplitDateTimeWidget
   django.forms.widgets.SplitHiddenDateTimeWidget
   django.forms.widgets.SelectDateWidget


Module Contents
---------------

.. py:class:: Media(media=None, css=None, js=None)

   .. py:method:: render()


   .. py:method:: render_js()


   .. py:method:: render_css()


   .. py:method:: absolute_path(path)

      Given a relative or absolute path to a static asset, return an absolute
      path. An absolute path will be returned unchanged while a relative path
      will be passed to django.templatetags.static.static().



   .. py:method:: merge(*lists)
      :staticmethod:


      Merge lists while trying to keep the relative order of the elements.
      Warn if the lists have the same elements in a different relative order.

      For static assets it can be important to have them included in the DOM
      in a certain order. In JavaScript you may not be able to reference a
      global or in CSS you might want to override a style.



.. py:class:: MediaDefiningClass

   Bases: :py:obj:`type`


   Metaclass for classes that can have media definitions.


.. py:class:: Widget(attrs=None)

   .. py:attribute:: needs_multipart_form
      :value: False



   .. py:attribute:: is_localized
      :value: False



   .. py:attribute:: is_required
      :value: False



   .. py:attribute:: supports_microseconds
      :value: True



   .. py:attribute:: use_fieldset
      :value: False



   .. py:attribute:: attrs


   .. py:property:: is_hidden


   .. py:method:: subwidgets(name, value, attrs=None)


   .. py:method:: format_value(value)

      Return a value as it should appear when rendered in a template.



   .. py:method:: get_context(name, value, attrs)


   .. py:method:: render(name, value, attrs=None, renderer=None)

      Render the widget as an HTML string.



   .. py:method:: build_attrs(base_attrs, extra_attrs=None)

      Build an attribute dictionary.



   .. py:method:: value_from_datadict(data, files, name)

      Given a dictionary of data and this widget's name, return the value
      of this widget or None if it's not provided.



   .. py:method:: value_omitted_from_data(data, files, name)


   .. py:method:: id_for_label(id_)

      Return the HTML ID attribute of this Widget for use by a <label>, given
      the ID of the field. Return an empty string if no ID is available.

      This hook is necessary because some widgets have multiple HTML
      elements and, thus, multiple IDs. In that case, this method should
      return an ID value that corresponds to the first ID in the widget's
      tags.



   .. py:method:: use_required_attribute(initial)


.. py:class:: TextInput(attrs=None)

   Bases: :py:obj:`Input`


   Base class for all <input> widgets.


   .. py:attribute:: input_type
      :value: 'text'



   .. py:attribute:: template_name
      :value: 'django/forms/widgets/text.html'



.. py:class:: NumberInput(attrs=None)

   Bases: :py:obj:`Input`


   Base class for all <input> widgets.


   .. py:attribute:: input_type
      :value: 'number'



   .. py:attribute:: template_name
      :value: 'django/forms/widgets/number.html'



.. py:class:: EmailInput(attrs=None)

   Bases: :py:obj:`Input`


   Base class for all <input> widgets.


   .. py:attribute:: input_type
      :value: 'email'



   .. py:attribute:: template_name
      :value: 'django/forms/widgets/email.html'



.. py:class:: URLInput(attrs=None)

   Bases: :py:obj:`Input`


   Base class for all <input> widgets.


   .. py:attribute:: input_type
      :value: 'url'



   .. py:attribute:: template_name
      :value: 'django/forms/widgets/url.html'



.. py:class:: PasswordInput(attrs=None, render_value=False)

   Bases: :py:obj:`Input`


   Base class for all <input> widgets.


   .. py:attribute:: input_type
      :value: 'password'



   .. py:attribute:: template_name
      :value: 'django/forms/widgets/password.html'



   .. py:attribute:: render_value
      :value: False



   .. py:method:: get_context(name, value, attrs)


.. py:class:: HiddenInput(attrs=None)

   Bases: :py:obj:`Input`


   Base class for all <input> widgets.


   .. py:attribute:: input_type
      :value: 'hidden'



   .. py:attribute:: template_name
      :value: 'django/forms/widgets/hidden.html'



.. py:class:: MultipleHiddenInput(attrs=None)

   Bases: :py:obj:`HiddenInput`


   Handle <input type="hidden"> for fields that have a list
   of values.


   .. py:attribute:: template_name
      :value: 'django/forms/widgets/multiple_hidden.html'



   .. py:method:: get_context(name, value, attrs)


   .. py:method:: value_from_datadict(data, files, name)

      Given a dictionary of data and this widget's name, return the value
      of this widget or None if it's not provided.



   .. py:method:: format_value(value)

      Return a value as it should appear when rendered in a template.



.. py:class:: FileInput(attrs=None)

   Bases: :py:obj:`Input`


   Base class for all <input> widgets.


   .. py:attribute:: allow_multiple_selected
      :value: False



   .. py:attribute:: input_type
      :value: 'file'



   .. py:attribute:: needs_multipart_form
      :value: True



   .. py:attribute:: template_name
      :value: 'django/forms/widgets/file.html'



   .. py:method:: format_value(value)

      File input never renders a value.



   .. py:method:: value_from_datadict(data, files, name)

      File widgets take data from FILES, not POST



   .. py:method:: value_omitted_from_data(data, files, name)


   .. py:method:: use_required_attribute(initial)


.. py:class:: ClearableFileInput(attrs=None)

   Bases: :py:obj:`FileInput`


   Base class for all <input> widgets.


   .. py:attribute:: clear_checkbox_label


   .. py:attribute:: initial_text


   .. py:attribute:: input_text


   .. py:attribute:: template_name
      :value: 'django/forms/widgets/clearable_file_input.html'



   .. py:method:: clear_checkbox_name(name)

      Given the name of the file input, return the name of the clear checkbox
      input.



   .. py:method:: clear_checkbox_id(name)

      Given the name of the clear checkbox input, return the HTML id for it.



   .. py:method:: is_initial(value)

      Return whether value is considered to be initial value.



   .. py:method:: format_value(value)

      Return the file object if it has a defined url attribute.



   .. py:method:: get_context(name, value, attrs)


   .. py:method:: value_from_datadict(data, files, name)

      File widgets take data from FILES, not POST



   .. py:method:: value_omitted_from_data(data, files, name)


.. py:class:: Textarea(attrs=None)

   Bases: :py:obj:`Widget`


   .. py:attribute:: template_name
      :value: 'django/forms/widgets/textarea.html'



.. py:class:: DateInput(attrs=None, format=None)

   Bases: :py:obj:`DateTimeBaseInput`


   Base class for all <input> widgets.


   .. py:attribute:: format_key
      :value: 'DATE_INPUT_FORMATS'



   .. py:attribute:: template_name
      :value: 'django/forms/widgets/date.html'



.. py:class:: DateTimeInput(attrs=None, format=None)

   Bases: :py:obj:`DateTimeBaseInput`


   Base class for all <input> widgets.


   .. py:attribute:: format_key
      :value: 'DATETIME_INPUT_FORMATS'



   .. py:attribute:: template_name
      :value: 'django/forms/widgets/datetime.html'



.. py:class:: TimeInput(attrs=None, format=None)

   Bases: :py:obj:`DateTimeBaseInput`


   Base class for all <input> widgets.


   .. py:attribute:: format_key
      :value: 'TIME_INPUT_FORMATS'



   .. py:attribute:: template_name
      :value: 'django/forms/widgets/time.html'



.. py:class:: CheckboxInput(attrs=None, check_test=None)

   Bases: :py:obj:`Input`


   Base class for all <input> widgets.


   .. py:attribute:: input_type
      :value: 'checkbox'



   .. py:attribute:: template_name
      :value: 'django/forms/widgets/checkbox.html'



   .. py:attribute:: check_test


   .. py:method:: format_value(value)

      Only return the 'value' attribute if value isn't empty.



   .. py:method:: get_context(name, value, attrs)


   .. py:method:: value_from_datadict(data, files, name)

      Given a dictionary of data and this widget's name, return the value
      of this widget or None if it's not provided.



   .. py:method:: value_omitted_from_data(data, files, name)


.. py:class:: Select(attrs=None, choices=())

   Bases: :py:obj:`ChoiceWidget`


   .. py:attribute:: input_type
      :value: 'select'



   .. py:attribute:: template_name
      :value: 'django/forms/widgets/select.html'



   .. py:attribute:: option_template_name
      :value: 'django/forms/widgets/select_option.html'



   .. py:attribute:: add_id_index
      :value: False



   .. py:attribute:: checked_attribute


   .. py:attribute:: option_inherits_attrs
      :value: False



   .. py:method:: get_context(name, value, attrs)


   .. py:method:: use_required_attribute(initial)

      Don't render 'required' if the first <option> has a value, as that's
      invalid HTML.



.. py:class:: NullBooleanSelect(attrs=None)

   Bases: :py:obj:`Select`


   A Select Widget intended to be used with NullBooleanField.


   .. py:method:: format_value(value)

      Return selected values as a list.



   .. py:method:: value_from_datadict(data, files, name)

      Given a dictionary of data and this widget's name, return the value
      of this widget or None if it's not provided.



.. py:class:: SelectMultiple(attrs=None, choices=())

   Bases: :py:obj:`Select`


   .. py:attribute:: allow_multiple_selected
      :value: True



   .. py:method:: value_from_datadict(data, files, name)

      Given a dictionary of data and this widget's name, return the value
      of this widget or None if it's not provided.



   .. py:method:: value_omitted_from_data(data, files, name)


.. py:class:: RadioSelect(attrs=None, choices=())

   Bases: :py:obj:`ChoiceWidget`


   .. py:attribute:: input_type
      :value: 'radio'



   .. py:attribute:: template_name
      :value: 'django/forms/widgets/radio.html'



   .. py:attribute:: option_template_name
      :value: 'django/forms/widgets/radio_option.html'



   .. py:attribute:: use_fieldset
      :value: True



   .. py:method:: id_for_label(id_, index=None)

      Don't include for="field_0" in <label> to improve accessibility when
      using a screen reader, in addition clicking such a label would toggle
      the first input.



.. py:class:: CheckboxSelectMultiple(attrs=None, choices=())

   Bases: :py:obj:`RadioSelect`


   .. py:attribute:: allow_multiple_selected
      :value: True



   .. py:attribute:: input_type
      :value: 'checkbox'



   .. py:attribute:: template_name
      :value: 'django/forms/widgets/checkbox_select.html'



   .. py:attribute:: option_template_name
      :value: 'django/forms/widgets/checkbox_option.html'



   .. py:method:: use_required_attribute(initial)


   .. py:method:: value_omitted_from_data(data, files, name)


.. py:class:: MultiWidget(widgets, attrs=None)

   Bases: :py:obj:`Widget`


   A widget that is composed of multiple widgets.

   In addition to the values added by Widget.get_context(), this widget
   adds a list of subwidgets to the context as widget['subwidgets'].
   These can be looped over and rendered like normal widgets.

   You'll probably want to use this class with MultiValueField.


   .. py:attribute:: template_name
      :value: 'django/forms/widgets/multiwidget.html'



   .. py:attribute:: use_fieldset
      :value: True



   .. py:attribute:: widgets


   .. py:property:: is_hidden


   .. py:method:: get_context(name, value, attrs)


   .. py:method:: id_for_label(id_)

      Return the HTML ID attribute of this Widget for use by a <label>, given
      the ID of the field. Return an empty string if no ID is available.

      This hook is necessary because some widgets have multiple HTML
      elements and, thus, multiple IDs. In that case, this method should
      return an ID value that corresponds to the first ID in the widget's
      tags.



   .. py:method:: value_from_datadict(data, files, name)

      Given a dictionary of data and this widget's name, return the value
      of this widget or None if it's not provided.



   .. py:method:: value_omitted_from_data(data, files, name)


   .. py:method:: decompress(value)
      :abstractmethod:


      Return a list of decompressed values for the given compressed value.
      The given value can be assumed to be valid, but not necessarily
      non-empty.



   .. py:attribute:: media


   .. py:property:: needs_multipart_form


.. py:class:: SplitDateTimeWidget(attrs=None, date_format=None, time_format=None, date_attrs=None, time_attrs=None)

   Bases: :py:obj:`MultiWidget`


   A widget that splits datetime input into two <input type="text"> boxes.


   .. py:attribute:: supports_microseconds
      :value: False



   .. py:attribute:: template_name
      :value: 'django/forms/widgets/splitdatetime.html'



   .. py:method:: decompress(value)

      Return a list of decompressed values for the given compressed value.
      The given value can be assumed to be valid, but not necessarily
      non-empty.



.. py:class:: SplitHiddenDateTimeWidget(attrs=None, date_format=None, time_format=None, date_attrs=None, time_attrs=None)

   Bases: :py:obj:`SplitDateTimeWidget`


   A widget that splits datetime input into two <input type="hidden"> inputs.


   .. py:attribute:: template_name
      :value: 'django/forms/widgets/splithiddendatetime.html'



.. py:class:: SelectDateWidget(attrs=None, years=None, months=None, empty_label=None)

   Bases: :py:obj:`Widget`


   A widget that splits date input into three <select> boxes.

   This also serves as an example of a Widget that has more than one HTML
   element and hence implements value_from_datadict.


   .. py:attribute:: none_value
      :value: ('', '---')



   .. py:attribute:: month_field
      :value: '%s_month'



   .. py:attribute:: day_field
      :value: '%s_day'



   .. py:attribute:: year_field
      :value: '%s_year'



   .. py:attribute:: template_name
      :value: 'django/forms/widgets/select_date.html'



   .. py:attribute:: input_type
      :value: 'select'



   .. py:attribute:: select_widget


   .. py:attribute:: date_re


   .. py:attribute:: use_fieldset
      :value: True



   .. py:attribute:: attrs


   .. py:method:: get_context(name, value, attrs)


   .. py:method:: format_value(value)

      Return a dict containing the year, month, and day of the current value.
      Use dict instead of a datetime to allow invalid dates such as February
      31 to display correctly.



   .. py:method:: id_for_label(id_)

      Return the HTML ID attribute of this Widget for use by a <label>, given
      the ID of the field. Return an empty string if no ID is available.

      This hook is necessary because some widgets have multiple HTML
      elements and, thus, multiple IDs. In that case, this method should
      return an ID value that corresponds to the first ID in the widget's
      tags.



   .. py:method:: value_from_datadict(data, files, name)

      Given a dictionary of data and this widget's name, return the value
      of this widget or None if it's not provided.



   .. py:method:: value_omitted_from_data(data, files, name)


