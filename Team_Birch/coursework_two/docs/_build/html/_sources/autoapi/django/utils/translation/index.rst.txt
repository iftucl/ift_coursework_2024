django.utils.translation
========================

.. py:module:: django.utils.translation

.. autoapi-nested-parse::

   Internationalization support.



Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/django/utils/translation/reloader/index
   /autoapi/django/utils/translation/template/index
   /autoapi/django/utils/translation/trans_null/index
   /autoapi/django/utils/translation/trans_real/index


Attributes
----------

.. autoapisummary::

   django.utils.translation.gettext_lazy
   django.utils.translation.pgettext_lazy


Classes
-------

.. autoapisummary::

   django.utils.translation.override


Functions
---------

.. autoapisummary::

   django.utils.translation.gettext_noop
   django.utils.translation.gettext
   django.utils.translation.ngettext
   django.utils.translation.pgettext
   django.utils.translation.npgettext
   django.utils.translation.ngettext_lazy
   django.utils.translation.npgettext_lazy
   django.utils.translation.activate
   django.utils.translation.deactivate
   django.utils.translation.get_language
   django.utils.translation.get_language_bidi
   django.utils.translation.check_for_language
   django.utils.translation.to_language
   django.utils.translation.to_locale
   django.utils.translation.get_language_from_request
   django.utils.translation.templatize
   django.utils.translation.deactivate_all
   django.utils.translation.get_language_info


Package Contents
----------------

.. py:function:: gettext_noop(message)

.. py:function:: gettext(message)

.. py:function:: ngettext(singular, plural, number)

.. py:function:: pgettext(context, message)

.. py:function:: npgettext(context, singular, plural, number)

.. py:data:: gettext_lazy

.. py:data:: pgettext_lazy

.. py:function:: ngettext_lazy(singular, plural, number=None)

.. py:function:: npgettext_lazy(context, singular, plural, number=None)

.. py:function:: activate(language)

.. py:function:: deactivate()

.. py:class:: override(language, deactivate=False)

   Bases: :py:obj:`contextlib.ContextDecorator`


   A base class or mixin that enables context managers to work as decorators.


   .. py:attribute:: language


   .. py:attribute:: deactivate
      :value: False



.. py:function:: get_language()

.. py:function:: get_language_bidi()

.. py:function:: check_for_language(lang_code)

.. py:function:: to_language(locale)

   Turn a locale name (en_US) into a language name (en-us).


.. py:function:: to_locale(language)

   Turn a language name (en-us) into a locale name (en_US).


.. py:function:: get_language_from_request(request, check_path=False)

.. py:function:: templatize(src, **kwargs)

.. py:function:: deactivate_all()

.. py:function:: get_language_info(lang_code)

