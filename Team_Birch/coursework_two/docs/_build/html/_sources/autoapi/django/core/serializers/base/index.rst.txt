django.core.serializers.base
============================

.. py:module:: django.core.serializers.base

.. autoapi-nested-parse::

   Module for abstract serializer/unserializer base classes.



Attributes
----------

.. autoapisummary::

   django.core.serializers.base.DEFER_FIELD


Exceptions
----------

.. autoapisummary::

   django.core.serializers.base.SerializerDoesNotExist
   django.core.serializers.base.SerializationError
   django.core.serializers.base.DeserializationError
   django.core.serializers.base.M2MDeserializationError


Classes
-------

.. autoapisummary::

   django.core.serializers.base.PickleSerializer
   django.core.serializers.base.ProgressBar
   django.core.serializers.base.Serializer
   django.core.serializers.base.Deserializer
   django.core.serializers.base.DeserializedObject


Functions
---------

.. autoapisummary::

   django.core.serializers.base.build_instance
   django.core.serializers.base.deserialize_m2m_values
   django.core.serializers.base.deserialize_fk_value


Module Contents
---------------

.. py:data:: DEFER_FIELD

.. py:class:: PickleSerializer(protocol=None)

   Simple wrapper around pickle to be used in signing.dumps()/loads() and
   cache backends.


   .. py:attribute:: protocol
      :value: 5



   .. py:method:: dumps(obj)


   .. py:method:: loads(data)


.. py:exception:: SerializerDoesNotExist

   Bases: :py:obj:`KeyError`


   The requested serializer was not found.


.. py:exception:: SerializationError

   Bases: :py:obj:`Exception`


   Something bad happened during serialization.


.. py:exception:: DeserializationError

   Bases: :py:obj:`Exception`


   Something bad happened during deserialization.


   .. py:method:: WithData(original_exc, model, fk, field_value)
      :classmethod:


      Factory method for creating a deserialization error which has a more
      explanatory message.



.. py:exception:: M2MDeserializationError(original_exc, pk)

   Bases: :py:obj:`Exception`


   Something bad happened during deserialization of a ManyToManyField.


   .. py:attribute:: original_exc


   .. py:attribute:: pk


.. py:class:: ProgressBar(output, total_count)

   .. py:attribute:: progress_width
      :value: 75



   .. py:attribute:: output


   .. py:attribute:: total_count


   .. py:attribute:: prev_done
      :value: 0



   .. py:method:: update(count)


.. py:class:: Serializer

   Abstract serializer base class.


   .. py:attribute:: internal_use_only
      :value: False



   .. py:attribute:: progress_class


   .. py:attribute:: stream_class


   .. py:method:: serialize(queryset, *, stream=None, fields=None, use_natural_foreign_keys=False, use_natural_primary_keys=False, progress_output=None, object_count=0, **options)

      Serialize a queryset.



   .. py:method:: start_serialization()
      :abstractmethod:


      Called when serializing of the queryset starts.



   .. py:method:: end_serialization()

      Called when serializing of the queryset ends.



   .. py:method:: start_object(obj)
      :abstractmethod:


      Called when serializing of an object starts.



   .. py:method:: end_object(obj)

      Called when serializing of an object ends.



   .. py:method:: handle_field(obj, field)
      :abstractmethod:


      Called to handle each individual (non-relational) field on an object.



   .. py:method:: handle_fk_field(obj, field)
      :abstractmethod:


      Called to handle a ForeignKey field.



   .. py:method:: handle_m2m_field(obj, field)
      :abstractmethod:


      Called to handle a ManyToManyField.



   .. py:method:: getvalue()

      Return the fully serialized queryset (or None if the output stream is
      not seekable).



.. py:class:: Deserializer(stream_or_string, **options)

   Abstract base deserializer class.


   .. py:attribute:: options


.. py:class:: DeserializedObject(obj, m2m_data=None, deferred_fields=None)

   A deserialized model.

   Basically a container for holding the pre-saved deserialized data along
   with the many-to-many data saved with the object.

   Call ``save()`` to save the object (with the many-to-many data) to the
   database; call ``save(save_m2m=False)`` to save just the object fields
   (and not touch the many-to-many stuff.)


   .. py:attribute:: object


   .. py:attribute:: m2m_data
      :value: None



   .. py:attribute:: deferred_fields
      :value: None



   .. py:method:: save(save_m2m=True, using=None, **kwargs)


   .. py:method:: save_deferred_fields(using=None)


.. py:function:: build_instance(Model, data, db)

   Build a model instance.

   If the model instance doesn't have a primary key and the model supports
   natural keys, try to retrieve it from the database.


.. py:function:: deserialize_m2m_values(field, field_value, using, handle_forward_references)

.. py:function:: deserialize_fk_value(field, field_value, using, handle_forward_references)

