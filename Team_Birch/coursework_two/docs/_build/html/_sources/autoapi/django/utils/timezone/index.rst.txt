django.utils.timezone
=====================

.. py:module:: django.utils.timezone

.. autoapi-nested-parse::

   Timezone-related classes and functions.



Classes
-------

.. autoapisummary::

   django.utils.timezone.override


Functions
---------

.. autoapisummary::

   django.utils.timezone.get_fixed_timezone
   django.utils.timezone.get_default_timezone
   django.utils.timezone.get_default_timezone_name
   django.utils.timezone.get_current_timezone
   django.utils.timezone.get_current_timezone_name
   django.utils.timezone.activate
   django.utils.timezone.deactivate
   django.utils.timezone.localtime
   django.utils.timezone.localdate
   django.utils.timezone.now
   django.utils.timezone.is_aware
   django.utils.timezone.is_naive
   django.utils.timezone.make_aware
   django.utils.timezone.make_naive


Module Contents
---------------

.. py:function:: get_fixed_timezone(offset)

   Return a tzinfo instance with a fixed offset from UTC.


.. py:function:: get_default_timezone()

   Return the default time zone as a tzinfo instance.

   This is the time zone defined by settings.TIME_ZONE.


.. py:function:: get_default_timezone_name()

   Return the name of the default time zone.


.. py:function:: get_current_timezone()

   Return the currently active time zone as a tzinfo instance.


.. py:function:: get_current_timezone_name()

   Return the name of the currently active time zone.


.. py:function:: activate(timezone)

   Set the time zone for the current thread.

   The ``timezone`` argument must be an instance of a tzinfo subclass or a
   time zone name.


.. py:function:: deactivate()

   Unset the time zone for the current thread.

   Django will then use the time zone defined by settings.TIME_ZONE.


.. py:class:: override(timezone)

   Bases: :py:obj:`contextlib.ContextDecorator`


   Temporarily set the time zone for the current thread.

   This is a context manager that uses django.utils.timezone.activate()
   to set the timezone on entry and restores the previously active timezone
   on exit.

   The ``timezone`` argument must be an instance of a ``tzinfo`` subclass, a
   time zone name, or ``None``. If it is ``None``, Django enables the default
   time zone.


   .. py:attribute:: timezone


.. py:function:: localtime(value=None, timezone=None)

   Convert an aware datetime.datetime to local time.

   Only aware datetimes are allowed. When value is omitted, it defaults to
   now().

   Local time is defined by the current time zone, unless another time zone
   is specified.


.. py:function:: localdate(value=None, timezone=None)

   Convert an aware datetime to local time and return the value's date.

   Only aware datetimes are allowed. When value is omitted, it defaults to
   now().

   Local time is defined by the current time zone, unless another time zone is
   specified.


.. py:function:: now()

   Return an aware or naive datetime.datetime, depending on settings.USE_TZ.


.. py:function:: is_aware(value)

   Determine if a given datetime.datetime is aware.

   The concept is defined in Python's docs:
   https://docs.python.org/library/datetime.html#datetime.tzinfo

   Assuming value.tzinfo is either None or a proper datetime.tzinfo,
   value.utcoffset() implements the appropriate logic.


.. py:function:: is_naive(value)

   Determine if a given datetime.datetime is naive.

   The concept is defined in Python's docs:
   https://docs.python.org/library/datetime.html#datetime.tzinfo

   Assuming value.tzinfo is either None or a proper datetime.tzinfo,
   value.utcoffset() implements the appropriate logic.


.. py:function:: make_aware(value, timezone=None, is_dst=NOT_PASSED)

   Make a naive datetime.datetime in a given time zone aware.


.. py:function:: make_naive(value, timezone=None)

   Make an aware datetime.datetime naive in a given time zone.


