django.contrib.admindocs.utils
==============================

.. py:module:: django.contrib.admindocs.utils

.. autoapi-nested-parse::

   Misc. utility functions/classes for admin documentation generator.



Attributes
----------

.. autoapisummary::

   django.contrib.admindocs.utils.docutils_is_available
   django.contrib.admindocs.utils.ROLES
   django.contrib.admindocs.utils.named_group_matcher
   django.contrib.admindocs.utils.unnamed_group_matcher
   django.contrib.admindocs.utils.non_capturing_group_matcher


Functions
---------

.. autoapisummary::

   django.contrib.admindocs.utils.get_view_name
   django.contrib.admindocs.utils.parse_docstring
   django.contrib.admindocs.utils.parse_rst
   django.contrib.admindocs.utils.create_reference_role
   django.contrib.admindocs.utils.default_reference_role
   django.contrib.admindocs.utils.replace_metacharacters
   django.contrib.admindocs.utils.replace_named_groups
   django.contrib.admindocs.utils.replace_unnamed_groups
   django.contrib.admindocs.utils.remove_non_capturing_groups


Module Contents
---------------

.. py:data:: docutils_is_available
   :value: False


.. py:function:: get_view_name(view_func)

.. py:function:: parse_docstring(docstring)

   Parse out the parts of a docstring.  Return (title, body, metadata).


.. py:function:: parse_rst(text, default_reference_context, thing_being_parsed=None)

   Convert the string from reST to an XHTML fragment.


.. py:data:: ROLES

.. py:function:: create_reference_role(rolename, urlbase)

.. py:function:: default_reference_role(name, rawtext, text, lineno, inliner, options=None, content=None)

.. py:data:: named_group_matcher

.. py:data:: unnamed_group_matcher

.. py:data:: non_capturing_group_matcher

.. py:function:: replace_metacharacters(pattern)

   Remove unescaped metacharacters from the pattern.


.. py:function:: replace_named_groups(pattern)

   Find named groups in `pattern` and replace them with the group name. E.g.,
   1. ^(?P<a>\w+)/b/(\w+)$ ==> ^<a>/b/(\w+)$
   2. ^(?P<a>\w+)/b/(?P<c>\w+)/$ ==> ^<a>/b/<c>/$
   3. ^(?P<a>\w+)/b/(\w+) ==> ^<a>/b/(\w+)
   4. ^(?P<a>\w+)/b/(?P<c>\w+) ==> ^<a>/b/<c>


.. py:function:: replace_unnamed_groups(pattern)

   Find unnamed groups in `pattern` and replace them with '<var>'. E.g.,
   1. ^(?P<a>\w+)/b/(\w+)$ ==> ^(?P<a>\w+)/b/<var>$
   2. ^(?P<a>\w+)/b/((x|y)\w+)$ ==> ^(?P<a>\w+)/b/<var>$
   3. ^(?P<a>\w+)/b/(\w+) ==> ^(?P<a>\w+)/b/<var>
   4. ^(?P<a>\w+)/b/((x|y)\w+) ==> ^(?P<a>\w+)/b/<var>


.. py:function:: remove_non_capturing_groups(pattern)

   Find non-capturing groups in the given `pattern` and remove them, e.g.
   1. (?P<a>\w+)/b/(?:\w+)c(?:\w+) => (?P<a>\\w+)/b/c
   2. ^(?:\w+(?:\w+))a => ^a
   3. ^a(?:\w+)/b(?:\w+) => ^a/b


