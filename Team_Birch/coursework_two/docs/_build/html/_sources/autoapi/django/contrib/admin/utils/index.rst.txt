django.contrib.admin.utils
==========================

.. py:module:: django.contrib.admin.utils


Attributes
----------

.. autoapisummary::

   django.contrib.admin.utils.QUOTE_MAP
   django.contrib.admin.utils.UNQUOTE_MAP
   django.contrib.admin.utils.UNQUOTE_RE


Exceptions
----------

.. autoapisummary::

   django.contrib.admin.utils.FieldIsAForeignKeyColumnName
   django.contrib.admin.utils.NotRelationField


Classes
-------

.. autoapisummary::

   django.contrib.admin.utils.NestedObjects


Functions
---------

.. autoapisummary::

   django.contrib.admin.utils.lookup_spawns_duplicates
   django.contrib.admin.utils.prepare_lookup_value
   django.contrib.admin.utils.quote
   django.contrib.admin.utils.unquote
   django.contrib.admin.utils.flatten
   django.contrib.admin.utils.flatten_fieldsets
   django.contrib.admin.utils.get_deleted_objects
   django.contrib.admin.utils.model_format_dict
   django.contrib.admin.utils.model_ngettext
   django.contrib.admin.utils.lookup_field
   django.contrib.admin.utils.label_for_field
   django.contrib.admin.utils.help_text_for_field
   django.contrib.admin.utils.display_for_field
   django.contrib.admin.utils.display_for_value
   django.contrib.admin.utils.get_model_from_relation
   django.contrib.admin.utils.reverse_field_path
   django.contrib.admin.utils.get_fields_from_path
   django.contrib.admin.utils.construct_change_message


Module Contents
---------------

.. py:data:: QUOTE_MAP

.. py:data:: UNQUOTE_MAP

.. py:data:: UNQUOTE_RE

.. py:exception:: FieldIsAForeignKeyColumnName

   Bases: :py:obj:`Exception`


   A field is a foreign key attname, i.e. <FK>_id.


.. py:function:: lookup_spawns_duplicates(opts, lookup_path)

   Return True if the given lookup path spawns duplicates.


.. py:function:: prepare_lookup_value(key, value, separator=',')

   Return a lookup value prepared to be used in queryset filtering.


.. py:function:: quote(s)

   Ensure that primary key values do not confuse the admin URLs by escaping
   any '/', '_' and ':' and similarly problematic characters.
   Similar to urllib.parse.quote(), except that the quoting is slightly
   different so that it doesn't get automatically unquoted by the web browser.


.. py:function:: unquote(s)

   Undo the effects of quote().


.. py:function:: flatten(fields)

   Return a list which is a single level of flattening of the original list.


.. py:function:: flatten_fieldsets(fieldsets)

   Return a list of field names from an admin fieldsets structure.


.. py:function:: get_deleted_objects(objs, request, admin_site)

   Find all objects related to ``objs`` that should also be deleted. ``objs``
   must be a homogeneous iterable of objects (e.g. a QuerySet).

   Return a nested list of strings suitable for display in the
   template with the ``unordered_list`` filter.


.. py:class:: NestedObjects(*args, **kwargs)

   Bases: :py:obj:`django.db.models.deletion.Collector`


   .. py:attribute:: edges


   .. py:attribute:: protected


   .. py:attribute:: model_objs


   .. py:method:: add_edge(source, target)


   .. py:method:: collect(objs, source=None, source_attr=None, **kwargs)


   .. py:method:: related_objects(related_model, related_fields, objs)


   .. py:method:: nested(format_callback=None)

      Return the graph as a nested list.



   .. py:method:: can_fast_delete(*args, **kwargs)

      We always want to load the objects into memory so that we can display
      them to the user in confirm page.



.. py:function:: model_format_dict(obj)

   Return a `dict` with keys 'verbose_name' and 'verbose_name_plural',
   typically for use with string formatting.

   `obj` may be a `Model` instance, `Model` subclass, or `QuerySet` instance.


.. py:function:: model_ngettext(obj, n=None)

   Return the appropriate `verbose_name` or `verbose_name_plural` value for
   `obj` depending on the count `n`.

   `obj` may be a `Model` instance, `Model` subclass, or `QuerySet` instance.
   If `obj` is a `QuerySet` instance, `n` is optional and the length of the
   `QuerySet` is used.


.. py:function:: lookup_field(name, obj, model_admin=None)

.. py:function:: label_for_field(name, model, model_admin=None, return_attr=False, form=None)

   Return a sensible label for a field name. The name can be a callable,
   property (but not created with @property decorator), or the name of an
   object's attribute, as well as a model field. If return_attr is True, also
   return the resolved attribute (which could be a callable). This will be
   None if (and only if) the name refers to a field.


.. py:function:: help_text_for_field(name, model)

.. py:function:: display_for_field(value, field, empty_value_display)

.. py:function:: display_for_value(value, empty_value_display, boolean=False)

.. py:exception:: NotRelationField

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


.. py:function:: get_model_from_relation(field)

.. py:function:: reverse_field_path(model, path)

   Create a reversed field path.

   E.g. Given (Order, "user__groups"),
   return (Group, "user__order").

   Final field must be a related model, not a data field.


.. py:function:: get_fields_from_path(model, path)

   Return list of Fields given path relative to model.

   e.g. (ModelX, "user__groups__name") -> [
       <django.db.models.fields.related.ForeignKey object at 0x...>,
       <django.db.models.fields.related.ManyToManyField object at 0x...>,
       <django.db.models.fields.CharField object at 0x...>,
   ]


.. py:function:: construct_change_message(form, formsets, add)

   Construct a JSON structure describing changes from a changed object.
   Translations are deactivated so that strings are stored untranslated.
   Translation happens later on LogEntry access.


