django.contrib.gis.gdal.srs
===========================

.. py:module:: django.contrib.gis.gdal.srs

.. autoapi-nested-parse::

   The Spatial Reference class, represents OGR Spatial Reference objects.

   Example:
   >>> from django.contrib.gis.gdal import SpatialReference
   >>> srs = SpatialReference('WGS84')
   >>> print(srs)
   GEOGCS["WGS 84",
       DATUM["WGS_1984",
           SPHEROID["WGS 84",6378137,298.257223563,
               AUTHORITY["EPSG","7030"]],
           TOWGS84[0,0,0,0,0,0,0],
           AUTHORITY["EPSG","6326"]],
       PRIMEM["Greenwich",0,
           AUTHORITY["EPSG","8901"]],
       UNIT["degree",0.01745329251994328,
           AUTHORITY["EPSG","9122"]],
       AUTHORITY["EPSG","4326"]]
   >>> print(srs.proj)
   +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs
   >>> print(srs.ellipsoid)
   (6378137.0, 6356752.3142451793, 298.25722356300003)
   >>> print(srs.projected, srs.geographic)
   False True
   >>> srs.import_epsg(32140)
   >>> print(srs.name)
   NAD83 / Texas South Central



Classes
-------

.. autoapisummary::

   django.contrib.gis.gdal.srs.AxisOrder
   django.contrib.gis.gdal.srs.SpatialReference
   django.contrib.gis.gdal.srs.CoordTransform


Module Contents
---------------

.. py:class:: AxisOrder

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: TRADITIONAL
      :value: 0



   .. py:attribute:: AUTHORITY
      :value: 1



.. py:class:: SpatialReference(srs_input='', srs_type='user', axis_order=None)

   Bases: :py:obj:`django.contrib.gis.gdal.base.GDALBase`


   A wrapper for the OGRSpatialReference object. According to the GDAL web site,
   the SpatialReference object "provide[s] services to represent coordinate
   systems (projections and datums) and to transform between them."


   .. py:attribute:: destructor


   .. py:attribute:: axis_order


   .. py:method:: attr_value(target, index=0)

      The attribute value for the given target node (e.g. 'PROJCS'). The index
      keyword specifies an index of the child node to return.



   .. py:method:: auth_name(target)

      Return the authority name for the given string target node.



   .. py:method:: auth_code(target)

      Return the authority code for the given string target node.



   .. py:method:: clone()

      Return a clone of this SpatialReference object.



   .. py:method:: from_esri()

      Morph this SpatialReference from ESRI's format to EPSG.



   .. py:method:: identify_epsg()

      This method inspects the WKT of this SpatialReference, and will
      add EPSG authority nodes where an EPSG identifier is applicable.



   .. py:method:: to_esri()

      Morph this SpatialReference to ESRI's format.



   .. py:method:: validate()

      Check to see if the given spatial reference is valid.



   .. py:property:: name

      Return the name of this Spatial Reference.


   .. py:property:: srid

      Return the SRID of top-level authority, or None if undefined.


   .. py:property:: linear_name

      Return the name of the linear units.


   .. py:property:: linear_units

      Return the value of the linear units.


   .. py:property:: angular_name

      Return the name of the angular units.


   .. py:property:: angular_units

      Return the value of the angular units.


   .. py:property:: units

      Return a 2-tuple of the units value and the units name. Automatically
      determine whether to return the linear or angular units.


   .. py:property:: ellipsoid

      Return a tuple of the ellipsoid parameters:
      (semimajor axis, semiminor axis, and inverse flattening)


   .. py:property:: semi_major

      Return the Semi Major Axis for this Spatial Reference.


   .. py:property:: semi_minor

      Return the Semi Minor Axis for this Spatial Reference.


   .. py:property:: inverse_flattening

      Return the Inverse Flattening for this Spatial Reference.


   .. py:property:: geographic

      Return True if this SpatialReference is geographic
      (root node is GEOGCS).


   .. py:property:: local

      Return True if this SpatialReference is local (root node is LOCAL_CS).


   .. py:property:: projected

      Return True if this SpatialReference is a projected coordinate system
      (root node is PROJCS).


   .. py:method:: import_epsg(epsg)

      Import the Spatial Reference from the EPSG code (an integer).



   .. py:method:: import_proj(proj)

      Import the Spatial Reference from a PROJ string.



   .. py:method:: import_user_input(user_input)

      Import the Spatial Reference from the given user input string.



   .. py:method:: import_wkt(wkt)

      Import the Spatial Reference from OGC WKT (string)



   .. py:method:: import_xml(xml)

      Import the Spatial Reference from an XML string.



   .. py:property:: wkt

      Return the WKT representation of this Spatial Reference.


   .. py:property:: pretty_wkt

      Return the 'pretty' representation of the WKT.


   .. py:property:: proj

      Return the PROJ representation for this Spatial Reference.


   .. py:property:: proj4

      Alias for proj().


   .. py:property:: xml

      Return the XML representation of this Spatial Reference.


.. py:class:: CoordTransform(source, target)

   Bases: :py:obj:`django.contrib.gis.gdal.base.GDALBase`


   The coordinate system transformation object.


   .. py:attribute:: destructor


   .. py:attribute:: ptr


