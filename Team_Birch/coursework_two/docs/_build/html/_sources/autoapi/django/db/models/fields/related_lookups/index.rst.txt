django.db.models.fields.related_lookups
=======================================

.. py:module:: django.db.models.fields.related_lookups


Classes
-------

.. autoapisummary::

   django.db.models.fields.related_lookups.MultiColSource
   django.db.models.fields.related_lookups.RelatedIn
   django.db.models.fields.related_lookups.RelatedLookupMixin
   django.db.models.fields.related_lookups.RelatedExact
   django.db.models.fields.related_lookups.RelatedLessThan
   django.db.models.fields.related_lookups.RelatedGreaterThan
   django.db.models.fields.related_lookups.RelatedGreaterThanOrEqual
   django.db.models.fields.related_lookups.RelatedLessThanOrEqual
   django.db.models.fields.related_lookups.RelatedIsNull


Functions
---------

.. autoapisummary::

   django.db.models.fields.related_lookups.get_normalized_value


Module Contents
---------------

.. py:class:: MultiColSource(alias, targets, sources, field)

   .. py:attribute:: contains_aggregate
      :value: False



   .. py:attribute:: contains_over_clause
      :value: False



   .. py:attribute:: output_field


   .. py:method:: relabeled_clone(relabels)


   .. py:method:: get_lookup(lookup)


   .. py:method:: resolve_expression(*args, **kwargs)


.. py:function:: get_normalized_value(value, lhs)

.. py:class:: RelatedIn(lhs, rhs)

   Bases: :py:obj:`django.db.models.lookups.In`


   Some lookups require Field.get_db_prep_value() to be called on each value
   in an iterable.


   .. py:method:: get_prep_lookup()


   .. py:method:: as_sql(compiler, connection)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



.. py:class:: RelatedLookupMixin

   .. py:method:: get_prep_lookup()


   .. py:method:: as_sql(compiler, connection)


.. py:class:: RelatedExact(lhs, rhs)

   Bases: :py:obj:`RelatedLookupMixin`, :py:obj:`django.db.models.lookups.Exact`


   Some lookups require Field.get_db_prep_value() to be called on their
   inputs.


.. py:class:: RelatedLessThan(lhs, rhs)

   Bases: :py:obj:`RelatedLookupMixin`, :py:obj:`django.db.models.lookups.LessThan`


   Some lookups require Field.get_db_prep_value() to be called on their
   inputs.


.. py:class:: RelatedGreaterThan(lhs, rhs)

   Bases: :py:obj:`RelatedLookupMixin`, :py:obj:`django.db.models.lookups.GreaterThan`


   Some lookups require Field.get_db_prep_value() to be called on their
   inputs.


.. py:class:: RelatedGreaterThanOrEqual(lhs, rhs)

   Bases: :py:obj:`RelatedLookupMixin`, :py:obj:`django.db.models.lookups.GreaterThanOrEqual`


   Some lookups require Field.get_db_prep_value() to be called on their
   inputs.


.. py:class:: RelatedLessThanOrEqual(lhs, rhs)

   Bases: :py:obj:`RelatedLookupMixin`, :py:obj:`django.db.models.lookups.LessThanOrEqual`


   Some lookups require Field.get_db_prep_value() to be called on their
   inputs.


.. py:class:: RelatedIsNull(lhs, rhs)

   Bases: :py:obj:`RelatedLookupMixin`, :py:obj:`django.db.models.lookups.IsNull`


   An expression that can be combined with other expressions.


