django.core.management.commands.makemessages
============================================

.. py:module:: django.core.management.commands.makemessages


Attributes
----------

.. autoapisummary::

   django.core.management.commands.makemessages.plural_forms_re
   django.core.management.commands.makemessages.STATUS_OK
   django.core.management.commands.makemessages.NO_LOCALE_DIR


Classes
-------

.. autoapisummary::

   django.core.management.commands.makemessages.TranslatableFile
   django.core.management.commands.makemessages.BuildFile
   django.core.management.commands.makemessages.Command


Functions
---------

.. autoapisummary::

   django.core.management.commands.makemessages.check_programs
   django.core.management.commands.makemessages.is_valid_locale
   django.core.management.commands.makemessages.normalize_eols
   django.core.management.commands.makemessages.write_pot_file


Module Contents
---------------

.. py:data:: plural_forms_re

.. py:data:: STATUS_OK
   :value: 0


.. py:data:: NO_LOCALE_DIR

.. py:function:: check_programs(*programs)

.. py:function:: is_valid_locale(locale)

.. py:class:: TranslatableFile(dirpath, file_name, locale_dir)

   .. py:attribute:: file


   .. py:attribute:: dirpath


   .. py:attribute:: locale_dir


   .. py:property:: path


.. py:class:: BuildFile(command, domain, translatable)

   Represent the state of a translatable file during the build process.


   .. py:attribute:: command


   .. py:attribute:: domain


   .. py:attribute:: translatable


   .. py:method:: is_templatized()


   .. py:method:: path()


   .. py:method:: work_path()

      Path to a file which is being fed into GNU gettext pipeline. This may
      be either a translatable or its preprocessed version.



   .. py:method:: preprocess()

      Preprocess (if necessary) a translatable file before passing it to
      xgettext GNU gettext utility.



   .. py:method:: postprocess_messages(msgs)

      Postprocess messages generated by xgettext GNU gettext utility.

      Transform paths as if these messages were generated from original
      translatable files rather than from preprocessed versions.



   .. py:method:: cleanup()

      Remove a preprocessed copy of a translatable file (if any).



.. py:function:: normalize_eols(raw_contents)

       Take a block of raw text that will be passed through str.splitlines() to
       get universal newlines treatment.

       Return the resulting block of text with normalized `
   ` EOL sequences ready
       to be written to disk using current platform's native EOLs.



.. py:function:: write_pot_file(potfile, msgs)

   Write the `potfile` with the `msgs` contents, making sure its format is
   valid.


.. py:class:: Command(stdout=None, stderr=None, no_color=False, force_color=False)

   Bases: :py:obj:`django.core.management.base.BaseCommand`


   The base class from which all management commands ultimately
   derive.

   Use this class if you want access to all of the mechanisms which
   parse the command-line arguments and work out what code to call in
   response; if you don't need to change any of that behavior,
   consider using one of the subclasses defined in this file.

   If you are interested in overriding/customizing various aspects of
   the command-parsing and -execution behavior, the normal flow works
   as follows:

   1. ``django-admin`` or ``manage.py`` loads the command class
      and calls its ``run_from_argv()`` method.

   2. The ``run_from_argv()`` method calls ``create_parser()`` to get
      an ``ArgumentParser`` for the arguments, parses them, performs
      any environment changes requested by options like
      ``pythonpath``, and then calls the ``execute()`` method,
      passing the parsed arguments.

   3. The ``execute()`` method attempts to carry out the command by
      calling the ``handle()`` method with the parsed arguments; any
      output produced by ``handle()`` will be printed to standard
      output and, if the command is intended to produce a block of
      SQL statements, will be wrapped in ``BEGIN`` and ``COMMIT``.

   4. If ``handle()`` or ``execute()`` raised any exception (e.g.
      ``CommandError``), ``run_from_argv()`` will  instead print an error
      message to ``stderr``.

   Thus, the ``handle()`` method is typically the starting point for
   subclasses; many built-in commands and command types either place
   all of their logic in ``handle()``, or perform some additional
   parsing work in ``handle()`` and then delegate from it to more
   specialized methods as needed.

   Several attributes affect behavior at various steps along the way:

   ``help``
       A short description of the command, which will be printed in
       help messages.

   ``output_transaction``
       A boolean indicating whether the command outputs SQL
       statements; if ``True``, the output will automatically be
       wrapped with ``BEGIN;`` and ``COMMIT;``. Default value is
       ``False``.

   ``requires_migrations_checks``
       A boolean; if ``True``, the command prints a warning if the set of
       migrations on disk don't match the migrations in the database.

   ``requires_system_checks``
       A list or tuple of tags, e.g. [Tags.staticfiles, Tags.models]. System
       checks registered in the chosen tags will be checked for errors prior
       to executing the command. The value '__all__' can be used to specify
       that all system checks should be performed. Default value is '__all__'.

       To validate an individual application's models
       rather than all applications' models, call
       ``self.check(app_configs)`` from ``handle()``, where ``app_configs``
       is the list of application's configuration provided by the
       app registry.

   ``stealth_options``
       A tuple of any options the command uses which aren't defined by the
       argument parser.


   .. py:attribute:: help
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """Runs over the entire source tree of the current directory and pulls out all strings marked for translation. It creates (or updates) a message file in the conf/locale (in the django tree) or locale (for projects and applications) directory.
         
         You must run this command with one of either the --locale, --exclude, or --all options."""

      .. raw:: html

         </details>




   .. py:attribute:: translatable_file_class


   .. py:attribute:: build_file_class


   .. py:attribute:: requires_system_checks
      :value: []



   .. py:attribute:: msgmerge_options
      :value: ['-q', '--backup=none', '--previous', '--update']



   .. py:attribute:: msguniq_options
      :value: ['--to-code=utf-8']



   .. py:attribute:: msgattrib_options
      :value: ['--no-obsolete']



   .. py:attribute:: xgettext_options
      :value: ['--from-code=UTF-8', '--add-comments=Translators']



   .. py:method:: add_arguments(parser)

      Entry point for subclassed commands to add custom arguments.



   .. py:method:: handle(*args, **options)

      The actual logic of the command. Subclasses must implement
      this method.



   .. py:method:: gettext_version()


   .. py:method:: settings_available()


   .. py:method:: build_potfiles()

      Build pot files and apply msguniq to them.



   .. py:method:: remove_potfiles()


   .. py:method:: find_files(root)

      Get all files in the given root. Also check that there is a matching
      locale dir for each file.



   .. py:method:: process_files(file_list)

      Group translatable files by locale directory and run pot file build
      process for each group.



   .. py:method:: process_locale_dir(locale_dir, files)

      Extract translatable literals from the specified files, creating or
      updating the POT file for a given locale directory.

      Use the xgettext GNU gettext utility.



   .. py:method:: write_po_file(potfile, locale)

      Create or update the PO file for self.domain and `locale`.
      Use contents of the existing `potfile`.

      Use msgmerge and msgattrib GNU gettext utilities.



   .. py:method:: copy_plural_forms(msgs, locale)

      Copy plural forms header contents from a Django catalog of locale to
      the msgs string, inserting it at the right place. msgs should be the
      contents of a newly created .po file.



