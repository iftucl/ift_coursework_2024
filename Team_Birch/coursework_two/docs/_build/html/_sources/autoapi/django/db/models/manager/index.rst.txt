django.db.models.manager
========================

.. py:module:: django.db.models.manager


Classes
-------

.. autoapisummary::

   django.db.models.manager.BaseManager
   django.db.models.manager.Manager
   django.db.models.manager.ManagerDescriptor
   django.db.models.manager.EmptyManager


Module Contents
---------------

.. py:class:: BaseManager

   .. py:attribute:: creation_counter
      :value: 0



   .. py:attribute:: auto_created
      :value: False



   .. py:attribute:: use_in_migrations
      :value: False



   .. py:attribute:: model
      :value: None



   .. py:attribute:: name
      :value: None



   .. py:method:: deconstruct()

      Return a 5-tuple of the form (as_manager (True), manager_class,
      queryset_class, args, kwargs).

      Raise a ValueError if the manager is dynamically generated.



   .. py:method:: check(**kwargs)


   .. py:method:: from_queryset(queryset_class, class_name=None)
      :classmethod:



   .. py:method:: contribute_to_class(cls, name)


   .. py:method:: db_manager(using=None, hints=None)


   .. py:property:: db


   .. py:method:: get_queryset()

      Return a new QuerySet object. Subclasses can override this method to
      customize the behavior of the Manager.



   .. py:method:: all()


.. py:class:: Manager

   Bases: :py:obj:`BaseManager.from_queryset`\ (\ :py:obj:`QuerySet`\ )


.. py:class:: ManagerDescriptor(manager)

   .. py:attribute:: manager


.. py:class:: EmptyManager(model)

   Bases: :py:obj:`Manager`


   .. py:attribute:: model


   .. py:method:: get_queryset()


