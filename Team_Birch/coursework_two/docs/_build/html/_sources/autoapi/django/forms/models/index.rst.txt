django.forms.models
===================

.. py:module:: django.forms.models

.. autoapi-nested-parse::

   Helper functions for creating Form classes from Django models
   and database field objects.



Attributes
----------

.. autoapisummary::

   django.forms.models.ALL_FIELDS


Classes
-------

.. autoapisummary::

   django.forms.models.BaseModelForm
   django.forms.models.ModelForm
   django.forms.models.BaseModelFormSet
   django.forms.models.BaseInlineFormSet
   django.forms.models.ModelChoiceField
   django.forms.models.ModelMultipleChoiceField


Functions
---------

.. autoapisummary::

   django.forms.models.model_to_dict
   django.forms.models.fields_for_model
   django.forms.models.modelform_factory
   django.forms.models.modelformset_factory
   django.forms.models.inlineformset_factory


Module Contents
---------------

.. py:data:: ALL_FIELDS
   :value: '__all__'


.. py:function:: model_to_dict(instance, fields=None, exclude=None)

   Return a dict containing the data in ``instance`` suitable for passing as
   a Form's ``initial`` keyword argument.

   ``fields`` is an optional list of field names. If provided, return only the
   named.

   ``exclude`` is an optional list of field names. If provided, exclude the
   named from the returned dict, even if they are listed in the ``fields``
   argument.


.. py:function:: fields_for_model(model, fields=None, exclude=None, widgets=None, formfield_callback=None, localized_fields=None, labels=None, help_texts=None, error_messages=None, field_classes=None, *, apply_limit_choices_to=True)

   Return a dictionary containing form fields for the given model.

   ``fields`` is an optional list of field names. If provided, return only the
   named fields.

   ``exclude`` is an optional list of field names. If provided, exclude the
   named fields from the returned fields, even if they are listed in the
   ``fields`` argument.

   ``widgets`` is a dictionary of model field names mapped to a widget.

   ``formfield_callback`` is a callable that takes a model field and returns
   a form field.

   ``localized_fields`` is a list of names of fields which should be localized.

   ``labels`` is a dictionary of model field names mapped to a label.

   ``help_texts`` is a dictionary of model field names mapped to a help text.

   ``error_messages`` is a dictionary of model field names mapped to a
   dictionary of error messages.

   ``field_classes`` is a dictionary of model field names mapped to a form
   field class.

   ``apply_limit_choices_to`` is a boolean indicating if limit_choices_to
   should be applied to a field's queryset.


.. py:class:: BaseModelForm(data=None, files=None, auto_id='id_%s', prefix=None, initial=None, error_class=ErrorList, label_suffix=None, empty_permitted=False, instance=None, use_required_attribute=None, renderer=None)

   Bases: :py:obj:`django.forms.forms.BaseForm`, :py:obj:`django.db.models.utils.AltersData`


   .. py:method:: clean()


   .. py:method:: validate_unique()

      Call the instance's validate_unique() method and update the form's
      validation errors if any were raised.



   .. py:method:: save(commit=True)

      Save this form's self.instance object if commit=True. Otherwise, add
      a save_m2m() method to the form which can be called after the instance
      is saved manually at a later time. Return the model instance.



.. py:class:: ModelForm(data=None, files=None, auto_id='id_%s', prefix=None, initial=None, error_class=ErrorList, label_suffix=None, empty_permitted=False, instance=None, use_required_attribute=None, renderer=None)

   Bases: :py:obj:`BaseModelForm`


.. py:function:: modelform_factory(model, form=ModelForm, fields=None, exclude=None, formfield_callback=None, widgets=None, localized_fields=None, labels=None, help_texts=None, error_messages=None, field_classes=None)

   Return a ModelForm containing form fields for the given model. You can
   optionally pass a `form` argument to use as a starting point for
   constructing the ModelForm.

   ``fields`` is an optional list of field names. If provided, include only
   the named fields in the returned fields. If omitted or '__all__', use all
   fields.

   ``exclude`` is an optional list of field names. If provided, exclude the
   named fields from the returned fields, even if they are listed in the
   ``fields`` argument.

   ``widgets`` is a dictionary of model field names mapped to a widget.

   ``localized_fields`` is a list of names of fields which should be localized.

   ``formfield_callback`` is a callable that takes a model field and returns
   a form field.

   ``labels`` is a dictionary of model field names mapped to a label.

   ``help_texts`` is a dictionary of model field names mapped to a help text.

   ``error_messages`` is a dictionary of model field names mapped to a
   dictionary of error messages.

   ``field_classes`` is a dictionary of model field names mapped to a form
   field class.


.. py:class:: BaseModelFormSet(data=None, files=None, auto_id='id_%s', prefix=None, queryset=None, *, initial=None, **kwargs)

   Bases: :py:obj:`django.forms.formsets.BaseFormSet`, :py:obj:`django.db.models.utils.AltersData`


   A ``FormSet`` for editing a queryset and/or adding new objects to it.


   .. py:attribute:: model
      :value: None



   .. py:attribute:: edit_only
      :value: False



   .. py:attribute:: unique_fields


   .. py:attribute:: queryset
      :value: None



   .. py:attribute:: initial_extra
      :value: None



   .. py:method:: initial_form_count()

      Return the number of forms that are required in this FormSet.



   .. py:method:: get_queryset()


   .. py:method:: save_new(form, commit=True)

      Save and return a new model instance for the given form.



   .. py:method:: save_existing(form, instance, commit=True)

      Save and return an existing model instance for the given form.



   .. py:method:: delete_existing(obj, commit=True)

      Deletes an existing model instance.



   .. py:method:: save(commit=True)

      Save model instances for every form, adding and changing instances
      as necessary, and return the list of instances.



   .. py:method:: clean()


   .. py:method:: validate_unique()


   .. py:method:: get_unique_error_message(unique_check)


   .. py:method:: get_date_error_message(date_check)


   .. py:method:: get_form_error()


   .. py:method:: save_existing_objects(commit=True)


   .. py:method:: save_new_objects(commit=True)


   .. py:method:: add_fields(form, index)

      Add a hidden field for the object's primary key.



.. py:function:: modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, edit_only=False)

   Return a FormSet class for the given Django model class.


.. py:class:: BaseInlineFormSet(data=None, files=None, instance=None, save_as_new=False, prefix=None, queryset=None, **kwargs)

   Bases: :py:obj:`BaseModelFormSet`


   A formset for child objects related to a parent.


   .. py:attribute:: save_as_new
      :value: False



   .. py:attribute:: unique_fields


   .. py:method:: initial_form_count()

      Return the number of forms that are required in this FormSet.



   .. py:method:: get_default_prefix()
      :classmethod:



   .. py:method:: save_new(form, commit=True)

      Save and return a new model instance for the given form.



   .. py:method:: add_fields(form, index)

      Add a hidden field for the object's primary key.



   .. py:method:: get_unique_error_message(unique_check)


.. py:function:: inlineformset_factory(parent_model, model, form=ModelForm, formset=BaseInlineFormSet, fk_name=None, fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, edit_only=False)

   Return an ``InlineFormSet`` for the given kwargs.

   ``fk_name`` must be provided if ``model`` has more than one ``ForeignKey``
   to ``parent_model``.


.. py:class:: ModelChoiceField(queryset, *, empty_label='---------', required=True, widget=None, label=None, initial=None, help_text='', to_field_name=None, limit_choices_to=None, blank=False, **kwargs)

   Bases: :py:obj:`django.forms.fields.ChoiceField`


   A ChoiceField whose choices are a model QuerySet.


   .. py:attribute:: default_error_messages


   .. py:attribute:: iterator


   .. py:attribute:: queryset


   .. py:attribute:: limit_choices_to
      :value: None



   .. py:attribute:: to_field_name
      :value: None



   .. py:method:: get_limit_choices_to()

      Return ``limit_choices_to`` for this form field.

      If it is a callable, invoke it and return the result.



   .. py:method:: label_from_instance(obj)

      Convert objects into strings and generate the labels for the choices
      presented by this object. Subclasses can override this method to
      customize the display of the choices.



   .. py:attribute:: choices


   .. py:method:: prepare_value(value)


   .. py:method:: to_python(value)


   .. py:method:: validate(value)


   .. py:method:: has_changed(initial, data)


.. py:class:: ModelMultipleChoiceField(queryset, **kwargs)

   Bases: :py:obj:`ModelChoiceField`


   A MultipleChoiceField whose choices are a model QuerySet.


   .. py:attribute:: widget


   .. py:attribute:: hidden_widget


   .. py:attribute:: default_error_messages


   .. py:method:: to_python(value)


   .. py:method:: clean(value)


   .. py:method:: prepare_value(value)


   .. py:method:: has_changed(initial, data)


