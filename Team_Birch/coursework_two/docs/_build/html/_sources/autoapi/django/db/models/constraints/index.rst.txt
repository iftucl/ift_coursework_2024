django.db.models.constraints
============================

.. py:module:: django.db.models.constraints


Classes
-------

.. autoapisummary::

   django.db.models.constraints.BaseConstraint
   django.db.models.constraints.CheckConstraint
   django.db.models.constraints.Deferrable
   django.db.models.constraints.UniqueConstraint


Module Contents
---------------

.. py:class:: BaseConstraint(name, violation_error_message=None)

   .. py:attribute:: default_violation_error_message


   .. py:attribute:: violation_error_message
      :value: None



   .. py:attribute:: name


   .. py:property:: contains_expressions


   .. py:method:: constraint_sql(model, schema_editor)
      :abstractmethod:



   .. py:method:: create_sql(model, schema_editor)
      :abstractmethod:



   .. py:method:: remove_sql(model, schema_editor)
      :abstractmethod:



   .. py:method:: validate(model, instance, exclude=None, using=DEFAULT_DB_ALIAS)
      :abstractmethod:



   .. py:method:: get_violation_error_message()


   .. py:method:: deconstruct()


   .. py:method:: clone()


.. py:class:: CheckConstraint(*, check, name, violation_error_message=None)

   Bases: :py:obj:`BaseConstraint`


   .. py:attribute:: check


   .. py:method:: constraint_sql(model, schema_editor)


   .. py:method:: create_sql(model, schema_editor)


   .. py:method:: remove_sql(model, schema_editor)


   .. py:method:: validate(model, instance, exclude=None, using=DEFAULT_DB_ALIAS)


   .. py:method:: deconstruct()


.. py:class:: Deferrable(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: DEFERRED
      :value: 'deferred'



   .. py:attribute:: IMMEDIATE
      :value: 'immediate'



.. py:class:: UniqueConstraint(*expressions, fields=(), name=None, condition=None, deferrable=None, include=None, opclasses=(), violation_error_message=None)

   Bases: :py:obj:`BaseConstraint`


   .. py:attribute:: fields
      :value: ()



   .. py:attribute:: condition
      :value: None



   .. py:attribute:: deferrable
      :value: None



   .. py:attribute:: include
      :value: ()



   .. py:attribute:: opclasses
      :value: ()



   .. py:attribute:: expressions


   .. py:property:: contains_expressions


   .. py:method:: constraint_sql(model, schema_editor)


   .. py:method:: create_sql(model, schema_editor)


   .. py:method:: remove_sql(model, schema_editor)


   .. py:method:: deconstruct()


   .. py:method:: validate(model, instance, exclude=None, using=DEFAULT_DB_ALIAS)


