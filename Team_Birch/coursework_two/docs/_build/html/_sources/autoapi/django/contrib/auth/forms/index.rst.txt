django.contrib.auth.forms
=========================

.. py:module:: django.contrib.auth.forms


Attributes
----------

.. autoapisummary::

   django.contrib.auth.forms.UserModel


Classes
-------

.. autoapisummary::

   django.contrib.auth.forms.ReadOnlyPasswordHashWidget
   django.contrib.auth.forms.ReadOnlyPasswordHashField
   django.contrib.auth.forms.UsernameField
   django.contrib.auth.forms.BaseUserCreationForm
   django.contrib.auth.forms.UserCreationForm
   django.contrib.auth.forms.UserChangeForm
   django.contrib.auth.forms.AuthenticationForm
   django.contrib.auth.forms.PasswordResetForm
   django.contrib.auth.forms.SetPasswordForm
   django.contrib.auth.forms.PasswordChangeForm
   django.contrib.auth.forms.AdminPasswordChangeForm


Module Contents
---------------

.. py:data:: UserModel

.. py:class:: ReadOnlyPasswordHashWidget

   Bases: :py:obj:`django.forms.Widget`


   .. py:attribute:: template_name
      :value: 'auth/widgets/read_only_password_hash.html'



   .. py:attribute:: read_only
      :value: True



   .. py:method:: get_context(name, value, attrs)


   .. py:method:: id_for_label(id_)


.. py:class:: ReadOnlyPasswordHashField(*args, **kwargs)

   Bases: :py:obj:`django.forms.Field`


   .. py:attribute:: widget


.. py:class:: UsernameField(*, max_length=None, min_length=None, strip=True, empty_value='', **kwargs)

   Bases: :py:obj:`django.forms.CharField`


   .. py:method:: to_python(value)

      Return a string.



   .. py:method:: widget_attrs(widget)

      Given a Widget instance (*not* a Widget class), return a dictionary of
      any HTML attributes that should be added to the Widget, based on this
      Field.



.. py:class:: BaseUserCreationForm(*args, **kwargs)

   Bases: :py:obj:`django.forms.ModelForm`


   A form that creates a user, with no privileges, from the given username and
   password.


   .. py:attribute:: error_messages


   .. py:attribute:: password1


   .. py:attribute:: password2


   .. py:class:: Meta

      .. py:attribute:: model


      .. py:attribute:: fields
         :value: ('username',)



      .. py:attribute:: field_classes



   .. py:method:: clean_password2()


   .. py:method:: save(commit=True)

      Save this form's self.instance object if commit=True. Otherwise, add
      a save_m2m() method to the form which can be called after the instance
      is saved manually at a later time. Return the model instance.



.. py:class:: UserCreationForm(*args, **kwargs)

   Bases: :py:obj:`BaseUserCreationForm`


   A form that creates a user, with no privileges, from the given username and
   password.


   .. py:method:: clean_username()

      Reject usernames that differ only in case.



.. py:class:: UserChangeForm(*args, **kwargs)

   Bases: :py:obj:`django.forms.ModelForm`


   The main implementation of all the Form logic. Note that this class is
   different than Form. See the comments by the Form class for more info. Any
   improvements to the form API should be made to this class, not to the Form
   class.


   .. py:attribute:: password


   .. py:class:: Meta

      .. py:attribute:: model


      .. py:attribute:: fields
         :value: '__all__'



      .. py:attribute:: field_classes



.. py:class:: AuthenticationForm(request=None, *args, **kwargs)

   Bases: :py:obj:`django.forms.Form`


   Base class for authenticating users. Extend this to get a form that accepts
   username/password logins.


   .. py:attribute:: username


   .. py:attribute:: password


   .. py:attribute:: error_messages


   .. py:attribute:: request
      :value: None



   .. py:attribute:: user_cache
      :value: None



   .. py:attribute:: username_field


   .. py:method:: clean()


   .. py:method:: confirm_login_allowed(user)

      Controls whether the given User may log in. This is a policy setting,
      independent of end-user authentication. This default behavior is to
      allow login by active users, and reject login by inactive users.

      If the given user cannot log in, this method should raise a
      ``ValidationError``.

      If the given user may log in, this method should return None.



   .. py:method:: get_user()


   .. py:method:: get_invalid_login_error()


.. py:class:: PasswordResetForm

   Bases: :py:obj:`django.forms.Form`


   .. py:attribute:: email


   .. py:method:: send_mail(subject_template_name, email_template_name, context, from_email, to_email, html_email_template_name=None)

      Send a django.core.mail.EmailMultiAlternatives to `to_email`.



   .. py:method:: get_users(email)

      Given an email, return matching user(s) who should receive a reset.

      This allows subclasses to more easily customize the default policies
      that prevent inactive users and users with unusable passwords from
      resetting their password.



   .. py:method:: save(domain_override=None, subject_template_name='registration/password_reset_subject.txt', email_template_name='registration/password_reset_email.html', use_https=False, token_generator=default_token_generator, from_email=None, request=None, html_email_template_name=None, extra_email_context=None)

      Generate a one-use only link for resetting password and send it to the
      user.



.. py:class:: SetPasswordForm(user, *args, **kwargs)

   Bases: :py:obj:`django.forms.Form`


   A form that lets a user set their password without entering the old
   password


   .. py:attribute:: error_messages


   .. py:attribute:: new_password1


   .. py:attribute:: new_password2


   .. py:attribute:: user


   .. py:method:: clean_new_password2()


   .. py:method:: save(commit=True)


.. py:class:: PasswordChangeForm(user, *args, **kwargs)

   Bases: :py:obj:`SetPasswordForm`


   A form that lets a user change their password by entering their old
   password.


   .. py:attribute:: error_messages


   .. py:attribute:: old_password


   .. py:attribute:: field_order
      :value: ['old_password', 'new_password1', 'new_password2']



   .. py:method:: clean_old_password()

      Validate that the old_password field is correct.



.. py:class:: AdminPasswordChangeForm(user, *args, **kwargs)

   Bases: :py:obj:`django.forms.Form`


   A form used to change the password of a user in the admin interface.


   .. py:attribute:: error_messages


   .. py:attribute:: required_css_class
      :value: 'required'



   .. py:attribute:: password1


   .. py:attribute:: password2


   .. py:attribute:: user


   .. py:method:: clean_password2()


   .. py:method:: save(commit=True)

      Save the new password.



   .. py:property:: changed_data


