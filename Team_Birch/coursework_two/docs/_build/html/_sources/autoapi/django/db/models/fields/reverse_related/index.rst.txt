django.db.models.fields.reverse_related
=======================================

.. py:module:: django.db.models.fields.reverse_related

.. autoapi-nested-parse::

   "Rel objects" for related fields.

   "Rel objects" (for lack of a better name) carry information about the relation
   modeled by a related field and provide some utility functions. They're stored
   in the ``remote_field`` attribute of the field.

   They also act as reverse fields for the purposes of the Meta API because
   they're the closest concept currently available.



Classes
-------

.. autoapisummary::

   django.db.models.fields.reverse_related.ForeignObjectRel
   django.db.models.fields.reverse_related.ManyToOneRel
   django.db.models.fields.reverse_related.OneToOneRel
   django.db.models.fields.reverse_related.ManyToManyRel


Module Contents
---------------

.. py:class:: ForeignObjectRel(field, to, related_name=None, related_query_name=None, limit_choices_to=None, parent_link=False, on_delete=None)

   Bases: :py:obj:`django.db.models.fields.mixins.FieldCacheMixin`


   Used by ForeignObject to store information about the relation.

   ``_meta.get_fields()`` returns this class to provide access to the field
   flags for the reverse relation.


   .. py:attribute:: auto_created
      :value: True



   .. py:attribute:: concrete
      :value: False



   .. py:attribute:: editable
      :value: False



   .. py:attribute:: is_relation
      :value: True



   .. py:attribute:: null
      :value: True



   .. py:attribute:: empty_strings_allowed
      :value: False



   .. py:attribute:: field


   .. py:attribute:: model


   .. py:attribute:: related_name
      :value: None



   .. py:attribute:: related_query_name
      :value: None



   .. py:attribute:: limit_choices_to


   .. py:attribute:: parent_link
      :value: False



   .. py:attribute:: on_delete
      :value: None



   .. py:attribute:: symmetrical
      :value: False



   .. py:attribute:: multiple
      :value: True



   .. py:method:: hidden()


   .. py:method:: name()


   .. py:property:: remote_field


   .. py:property:: target_field

      When filtering against this relation, return the field on the remote
      model against which the filtering should happen.


   .. py:method:: related_model()


   .. py:method:: many_to_many()


   .. py:method:: many_to_one()


   .. py:method:: one_to_many()


   .. py:method:: one_to_one()


   .. py:method:: get_lookup(lookup_name)


   .. py:method:: get_lookups()


   .. py:method:: get_transform(name)


   .. py:method:: get_internal_type()


   .. py:property:: db_type


   .. py:property:: identity


   .. py:method:: get_choices(include_blank=True, blank_choice=BLANK_CHOICE_DASH, limit_choices_to=None, ordering=())

      Return choices with a default blank choices included, for use
      as <select> choices for this field.

      Analog of django.db.models.fields.Field.get_choices(), provided
      initially for utilization by RelatedFieldListFilter.



   .. py:method:: is_hidden()

      Should the related object be hidden?



   .. py:method:: get_joining_columns()


   .. py:method:: get_extra_restriction(alias, related_alias)


   .. py:method:: set_field_name()

      Set the related field's name, this is not available until later stages
      of app loading, so set_field_name is called from
      set_attributes_from_rel()



   .. py:method:: get_accessor_name(model=None)


   .. py:method:: get_path_info(filtered_relation=None)


   .. py:method:: path_infos()


   .. py:method:: get_cache_name()

      Return the name of the cache key to use for storing an instance of the
      forward model on the reverse model.



.. py:class:: ManyToOneRel(field, to, field_name, related_name=None, related_query_name=None, limit_choices_to=None, parent_link=False, on_delete=None)

   Bases: :py:obj:`ForeignObjectRel`


   Used by the ForeignKey field to store information about the relation.

   ``_meta.get_fields()`` returns this class to provide access to the field
   flags for the reverse relation.

   Note: Because we somewhat abuse the Rel objects by using them as reverse
   fields we get the funny situation where
   ``ManyToOneRel.many_to_one == False`` and
   ``ManyToOneRel.one_to_many == True``. This is unfortunate but the actual
   ManyToOneRel class is a private API and there is work underway to turn
   reverse relations into actual fields.


   .. py:attribute:: field_name


   .. py:property:: identity


   .. py:method:: get_related_field()

      Return the Field in the 'to' object to which this relationship is tied.



   .. py:method:: set_field_name()

      Set the related field's name, this is not available until later stages
      of app loading, so set_field_name is called from
      set_attributes_from_rel()



.. py:class:: OneToOneRel(field, to, field_name, related_name=None, related_query_name=None, limit_choices_to=None, parent_link=False, on_delete=None)

   Bases: :py:obj:`ManyToOneRel`


   Used by OneToOneField to store information about the relation.

   ``_meta.get_fields()`` returns this class to provide access to the field
   flags for the reverse relation.


   .. py:attribute:: multiple
      :value: False



.. py:class:: ManyToManyRel(field, to, related_name=None, related_query_name=None, limit_choices_to=None, symmetrical=True, through=None, through_fields=None, db_constraint=True)

   Bases: :py:obj:`ForeignObjectRel`


   Used by ManyToManyField to store information about the relation.

   ``_meta.get_fields()`` returns this class to provide access to the field
   flags for the reverse relation.


   .. py:attribute:: through
      :value: None



   .. py:attribute:: through_fields
      :value: None



   .. py:attribute:: symmetrical
      :value: True



   .. py:attribute:: db_constraint
      :value: True



   .. py:property:: identity


   .. py:method:: get_related_field()

      Return the field in the 'to' object to which this relationship is tied.
      Provided for symmetry with ManyToOneRel.



