django.test.testcases
=====================

.. py:module:: django.test.testcases


Classes
-------

.. autoapisummary::

   django.test.testcases.SimpleTestCase
   django.test.testcases.TransactionTestCase
   django.test.testcases.TestCase


Functions
---------

.. autoapisummary::

   django.test.testcases.skipIfDBFeature
   django.test.testcases.skipUnlessDBFeature


Module Contents
---------------

.. py:class:: SimpleTestCase(methodName='runTest')

   Bases: :py:obj:`unittest.TestCase`


   A class whose instances are single test cases.

   By default, the test code itself should be placed in a method named
   'runTest'.

   If the fixture may be used for many test cases, create as
   many test methods as are needed. When instantiating such a TestCase
   subclass, specify in the constructor arguments the name of the test method
   that the instance is to execute.

   Test authors should subclass TestCase for their own tests. Construction
   and deconstruction of the test's environment ('fixture') can be
   implemented by overriding the 'setUp' and 'tearDown' methods respectively.

   If it is necessary to override the __init__ method, the base class
   __init__ method must always be called. It is important that subclasses
   should not change the signature of their __init__ method, since instances
   of the classes are instantiated automatically by parts of the framework
   in order to be run.

   When subclassing TestCase, you can set these attributes:
   * failureException: determines which exception will be raised when
       the instance's assertion methods fail; test methods raising this
       exception will be deemed to have 'failed' rather than 'errored'.
   * longMessage: determines whether long messages (including repr of
       objects used in assert methods) will be printed on failure in *addition*
       to any explicit message passed.
   * maxDiff: sets the maximum length of a diff in failure messages
       by assert methods using difflib. It is looked up as an instance
       attribute so can be configured by individual tests if required.


   .. py:attribute:: client_class


   .. py:attribute:: async_client_class


   .. py:attribute:: databases


   .. py:method:: setUpClass()
      :classmethod:


      Hook method for setting up class fixture before running tests in the class.



   .. py:method:: debug()

      Perform the same as __call__(), without catching the exception.



   .. py:method:: settings(**kwargs)

      A context manager that temporarily sets a setting and reverts to the
      original value when exiting the context.



   .. py:method:: modify_settings(**kwargs)

      A context manager that temporarily applies changes a list setting and
      reverts back to the original value when exiting the context.



   .. py:method:: assertRedirects(response, expected_url, status_code=302, target_status_code=200, msg_prefix='', fetch_redirect_response=True)

      Assert that a response redirected to a specific URL and that the
      redirect URL can be loaded.

      Won't work for external links since it uses the test client to do a
      request (use fetch_redirect_response=False to check such links without
      fetching them).



   .. py:method:: assertURLEqual(url1, url2, msg_prefix='')

      Assert that two URLs are the same, ignoring the order of query string
      parameters except for parameters with the same name.

      For example, /path/?x=1&y=2 is equal to /path/?y=2&x=1, but
      /path/?a=1&a=2 isn't equal to /path/?a=2&a=1.



   .. py:method:: assertContains(response, text, count=None, status_code=200, msg_prefix='', html=False)

      Assert that a response indicates that some content was retrieved
      successfully, (i.e., the HTTP status code was as expected) and that
      ``text`` occurs ``count`` times in the content of the response.
      If ``count`` is None, the count doesn't matter - the assertion is true
      if the text occurs at least once in the response.



   .. py:method:: assertNotContains(response, text, status_code=200, msg_prefix='', html=False)

      Assert that a response indicates that some content was retrieved
      successfully, (i.e., the HTTP status code was as expected) and that
      ``text`` doesn't occur in the content of the response.



   .. py:method:: assertFormError(form, field, errors, msg_prefix='')

      Assert that a field named "field" on the given form object has specific
      errors.

      errors can be either a single error message or a list of errors
      messages. Using errors=[] test that the field has no errors.

      You can pass field=None to check the form's non-field errors.



   .. py:method:: assertFormsetError(*args, **kw)


   .. py:method:: assertFormSetError(formset, form_index, field, errors, msg_prefix='')

      Similar to assertFormError() but for formsets.

      Use form_index=None to check the formset's non-form errors (in that
      case, you must also use field=None).
      Otherwise use an integer to check the formset's n-th form for errors.

      Other parameters are the same as assertFormError().



   .. py:method:: assertTemplateUsed(response=None, template_name=None, msg_prefix='', count=None)

      Assert that the template with the provided name was used in rendering
      the response. Also usable as context manager.



   .. py:method:: assertTemplateNotUsed(response=None, template_name=None, msg_prefix='')

      Assert that the template with the provided name was NOT used in
      rendering the response. Also usable as context manager.



   .. py:method:: assertRaisesMessage(expected_exception, expected_message, *args, **kwargs)

      Assert that expected_message is found in the message of a raised
      exception.

      :param expected_exception: Exception class expected to be raised.
      :param expected_message: expected error message string value.
      :param args: Function to be called and extra positional args.
      :param kwargs: Extra kwargs.



   .. py:method:: assertWarnsMessage(expected_warning, expected_message, *args, **kwargs)

      Same as assertRaisesMessage but for assertWarns() instead of
      assertRaises().



   .. py:method:: assertNoLogs(logger, level=None)

      Assert no messages are logged on the logger, with at least the
      given level.



   .. py:method:: assertFieldOutput(fieldclass, valid, invalid, field_args=None, field_kwargs=None, empty_value='')

      Assert that a form field behaves correctly with various inputs.

      :param fieldclass: the class of the field to be tested.
      :param valid: a dictionary mapping valid inputs to their expected
                    cleaned values.
      :param invalid: a dictionary mapping invalid inputs to one or more
                      raised error messages.
      :param field_args: the args passed to instantiate the field
      :param field_kwargs: the kwargs passed to instantiate the field
      :param empty_value: the expected clean output for inputs in empty_values



   .. py:method:: assertHTMLEqual(html1, html2, msg=None)

      Assert that two HTML snippets are semantically the same.
      Whitespace in most cases is ignored, and attribute ordering is not
      significant. The arguments must be valid HTML.



   .. py:method:: assertHTMLNotEqual(html1, html2, msg=None)

      Assert that two HTML snippets are not semantically equivalent.



   .. py:method:: assertInHTML(needle, haystack, count=None, msg_prefix='')


   .. py:method:: assertJSONEqual(raw, expected_data, msg=None)

      Assert that the JSON fragments raw and expected_data are equal.
      Usual JSON non-significant whitespace rules apply as the heavyweight
      is delegated to the json library.



   .. py:method:: assertJSONNotEqual(raw, expected_data, msg=None)

      Assert that the JSON fragments raw and expected_data are not equal.
      Usual JSON non-significant whitespace rules apply as the heavyweight
      is delegated to the json library.



   .. py:method:: assertXMLEqual(xml1, xml2, msg=None)

      Assert that two XML snippets are semantically the same.
      Whitespace in most cases is ignored and attribute ordering is not
      significant. The arguments must be valid XML.



   .. py:method:: assertXMLNotEqual(xml1, xml2, msg=None)

      Assert that two XML snippets are not semantically equivalent.
      Whitespace in most cases is ignored and attribute ordering is not
      significant. The arguments must be valid XML.



.. py:class:: TransactionTestCase(methodName='runTest')

   Bases: :py:obj:`SimpleTestCase`


   A class whose instances are single test cases.

   By default, the test code itself should be placed in a method named
   'runTest'.

   If the fixture may be used for many test cases, create as
   many test methods as are needed. When instantiating such a TestCase
   subclass, specify in the constructor arguments the name of the test method
   that the instance is to execute.

   Test authors should subclass TestCase for their own tests. Construction
   and deconstruction of the test's environment ('fixture') can be
   implemented by overriding the 'setUp' and 'tearDown' methods respectively.

   If it is necessary to override the __init__ method, the base class
   __init__ method must always be called. It is important that subclasses
   should not change the signature of their __init__ method, since instances
   of the classes are instantiated automatically by parts of the framework
   in order to be run.

   When subclassing TestCase, you can set these attributes:
   * failureException: determines which exception will be raised when
       the instance's assertion methods fail; test methods raising this
       exception will be deemed to have 'failed' rather than 'errored'.
   * longMessage: determines whether long messages (including repr of
       objects used in assert methods) will be printed on failure in *addition*
       to any explicit message passed.
   * maxDiff: sets the maximum length of a diff in failure messages
       by assert methods using difflib. It is looked up as an instance
       attribute so can be configured by individual tests if required.


   .. py:attribute:: reset_sequences
      :value: False



   .. py:attribute:: available_apps
      :value: None



   .. py:attribute:: fixtures
      :value: None



   .. py:attribute:: databases


   .. py:attribute:: serialized_rollback
      :value: False



   .. py:method:: assertQuerysetEqual(*args, **kw)


   .. py:method:: assertQuerySetEqual(qs, values, transform=None, ordered=True, msg=None)


   .. py:method:: assertNumQueries(num, func=None, *args, using=DEFAULT_DB_ALIAS, **kwargs)


.. py:class:: TestCase(methodName='runTest')

   Bases: :py:obj:`TransactionTestCase`


   Similar to TransactionTestCase, but use `transaction.atomic()` to achieve
   test isolation.

   In most situations, TestCase should be preferred to TransactionTestCase as
   it allows faster execution. However, there are some situations where using
   TransactionTestCase might be necessary (e.g. testing some transactional
   behavior).

   On database backends with no transaction support, TestCase behaves as
   TransactionTestCase.


   .. py:method:: setUpClass()
      :classmethod:


      Hook method for setting up class fixture before running tests in the class.



   .. py:method:: tearDownClass()
      :classmethod:


      Hook method for deconstructing the class fixture after running all tests in the class.



   .. py:method:: setUpTestData()
      :classmethod:


      Load initial data for the TestCase.



   .. py:method:: captureOnCommitCallbacks(*, using=DEFAULT_DB_ALIAS, execute=False)
      :classmethod:


      Context manager to capture transaction.on_commit() callbacks.



.. py:function:: skipIfDBFeature(*features)

   Skip a test if a database has at least one of the named features.


.. py:function:: skipUnlessDBFeature(*features)

   Skip a test unless a database has all the named features.


