django.views.debug
==================

.. py:module:: django.views.debug


Attributes
----------

.. autoapisummary::

   django.views.debug.DEBUG_ENGINE


Exceptions
----------

.. autoapisummary::

   django.views.debug.ExceptionCycleWarning


Classes
-------

.. autoapisummary::

   django.views.debug.CallableSettingWrapper
   django.views.debug.SafeExceptionReporterFilter
   django.views.debug.ExceptionReporter


Functions
---------

.. autoapisummary::

   django.views.debug.builtin_template_path
   django.views.debug.technical_500_response
   django.views.debug.get_default_exception_reporter_filter
   django.views.debug.get_exception_reporter_filter
   django.views.debug.get_exception_reporter_class
   django.views.debug.get_caller
   django.views.debug.technical_404_response
   django.views.debug.default_urlconf


Module Contents
---------------

.. py:data:: DEBUG_ENGINE

.. py:function:: builtin_template_path(name)

   Return a path to a builtin template.

   Avoid calling this function at the module level or in a class-definition
   because __file__ may not exist, e.g. in frozen environments.


.. py:exception:: ExceptionCycleWarning

   Bases: :py:obj:`UserWarning`


   Base class for warnings generated by user code.


.. py:class:: CallableSettingWrapper(callable_setting)

   Object to wrap callable appearing in settings.
   * Not to call in the debug page (#21345).
   * Not to break the debug page if the callable forbidding to set attributes
     (#23070).


.. py:function:: technical_500_response(request, exc_type, exc_value, tb, status_code=500)

   Create a technical server error response. The last three arguments are
   the values returned from sys.exc_info() and friends.


.. py:function:: get_default_exception_reporter_filter()

.. py:function:: get_exception_reporter_filter(request)

.. py:function:: get_exception_reporter_class(request)

.. py:function:: get_caller(request)

.. py:class:: SafeExceptionReporterFilter

   Use annotations made by the sensitive_post_parameters and
   sensitive_variables decorators to filter out sensitive information.


   .. py:attribute:: cleansed_substitute
      :value: '********************'



   .. py:attribute:: hidden_settings


   .. py:method:: cleanse_setting(key, value)

      Cleanse an individual setting key/value of sensitive content. If the
      value is a dictionary, recursively cleanse the keys in that dictionary.



   .. py:method:: get_safe_settings()

      Return a dictionary of the settings module with values of sensitive
      settings replaced with stars (*********).



   .. py:method:: get_safe_request_meta(request)

      Return a dictionary of request.META with sensitive values redacted.



   .. py:method:: get_safe_cookies(request)

      Return a dictionary of request.COOKIES with sensitive values redacted.



   .. py:method:: is_active(request)

      This filter is to add safety in production environments (i.e. DEBUG
      is False). If DEBUG is True then your site is not safe anyway.
      This hook is provided as a convenience to easily activate or
      deactivate the filter on a per request basis.



   .. py:method:: get_cleansed_multivaluedict(request, multivaluedict)

      Replace the keys in a MultiValueDict marked as sensitive with stars.
      This mitigates leaking sensitive POST parameters if something like
      request.POST['nonexistent_key'] throws an exception (#21098).



   .. py:method:: get_post_parameters(request)

      Replace the values of POST parameters marked as sensitive with
      stars (*********).



   .. py:method:: cleanse_special_types(request, value)


   .. py:method:: get_traceback_frame_variables(request, tb_frame)

      Replace the values of variables marked as sensitive with
      stars (*********).



.. py:class:: ExceptionReporter(request, exc_type, exc_value, tb, is_email=False)

   Organize and coordinate reporting on exceptions.


   .. py:property:: html_template_path


   .. py:property:: text_template_path


   .. py:attribute:: request


   .. py:attribute:: filter


   .. py:attribute:: exc_type


   .. py:attribute:: exc_value


   .. py:attribute:: tb


   .. py:attribute:: is_email
      :value: False



   .. py:attribute:: template_info


   .. py:attribute:: template_does_not_exist
      :value: False



   .. py:attribute:: postmortem
      :value: None



   .. py:method:: get_traceback_data()

      Return a dictionary containing traceback information.



   .. py:method:: get_traceback_html()

      Return HTML version of debug 500 HTTP error page.



   .. py:method:: get_traceback_text()

      Return plain text version of debug 500 HTTP error page.



   .. py:method:: get_traceback_frames()


   .. py:method:: get_exception_traceback_frames(exc_value, tb)


.. py:function:: technical_404_response(request, exception)

   Create a technical 404 error response. `exception` is the Http404.


.. py:function:: default_urlconf(request)

   Create an empty URLconf 404 error response.


