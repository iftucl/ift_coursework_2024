django.utils.version
====================

.. py:module:: django.utils.version


Attributes
----------

.. autoapisummary::

   django.utils.version.PY36
   django.utils.version.PY37
   django.utils.version.PY38
   django.utils.version.PY39
   django.utils.version.PY310
   django.utils.version.PY311
   django.utils.version.PY312
   django.utils.version.version_component_re


Functions
---------

.. autoapisummary::

   django.utils.version.get_version
   django.utils.version.get_main_version
   django.utils.version.get_complete_version
   django.utils.version.get_docs_version
   django.utils.version.get_git_changeset
   django.utils.version.get_version_tuple


Module Contents
---------------

.. py:data:: PY36

.. py:data:: PY37

.. py:data:: PY38

.. py:data:: PY39

.. py:data:: PY310

.. py:data:: PY311

.. py:data:: PY312

.. py:function:: get_version(version=None)

   Return a PEP 440-compliant version number from VERSION.


.. py:function:: get_main_version(version=None)

   Return main version (X.Y[.Z]) from VERSION.


.. py:function:: get_complete_version(version=None)

   Return a tuple of the django version. If version argument is non-empty,
   check for correctness of the tuple provided.


.. py:function:: get_docs_version(version=None)

.. py:function:: get_git_changeset()

   Return a numeric identifier of the latest git changeset.

   The result is the UTC timestamp of the changeset in YYYYMMDDHHMMSS format.
   This value isn't guaranteed to be unique, but collisions are very unlikely,
   so it's sufficient for generating the development version numbers.


.. py:data:: version_component_re

.. py:function:: get_version_tuple(version)

   Return a tuple of version numbers (e.g. (1, 2, 3)) from the version
   string (e.g. '1.2.3').


