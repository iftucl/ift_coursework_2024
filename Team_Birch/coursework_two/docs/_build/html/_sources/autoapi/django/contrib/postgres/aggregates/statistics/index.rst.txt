django.contrib.postgres.aggregates.statistics
=============================================

.. py:module:: django.contrib.postgres.aggregates.statistics


Classes
-------

.. autoapisummary::

   django.contrib.postgres.aggregates.statistics.StatAggregate
   django.contrib.postgres.aggregates.statistics.Corr
   django.contrib.postgres.aggregates.statistics.CovarPop
   django.contrib.postgres.aggregates.statistics.RegrAvgX
   django.contrib.postgres.aggregates.statistics.RegrAvgY
   django.contrib.postgres.aggregates.statistics.RegrCount
   django.contrib.postgres.aggregates.statistics.RegrIntercept
   django.contrib.postgres.aggregates.statistics.RegrR2
   django.contrib.postgres.aggregates.statistics.RegrSlope
   django.contrib.postgres.aggregates.statistics.RegrSXX
   django.contrib.postgres.aggregates.statistics.RegrSXY
   django.contrib.postgres.aggregates.statistics.RegrSYY


Module Contents
---------------

.. py:class:: StatAggregate(y, x, output_field=None, filter=None, default=None)

   Bases: :py:obj:`django.db.models.Aggregate`


   .. py:attribute:: output_field


.. py:class:: Corr(y, x, output_field=None, filter=None, default=None)

   Bases: :py:obj:`StatAggregate`


   .. py:attribute:: function
      :value: 'CORR'



.. py:class:: CovarPop(y, x, sample=False, filter=None, default=None)

   Bases: :py:obj:`StatAggregate`


   .. py:attribute:: function
      :value: 'COVAR_POP'



.. py:class:: RegrAvgX(y, x, output_field=None, filter=None, default=None)

   Bases: :py:obj:`StatAggregate`


   .. py:attribute:: function
      :value: 'REGR_AVGX'



.. py:class:: RegrAvgY(y, x, output_field=None, filter=None, default=None)

   Bases: :py:obj:`StatAggregate`


   .. py:attribute:: function
      :value: 'REGR_AVGY'



.. py:class:: RegrCount(y, x, output_field=None, filter=None, default=None)

   Bases: :py:obj:`StatAggregate`


   .. py:attribute:: function
      :value: 'REGR_COUNT'



   .. py:attribute:: output_field


   .. py:attribute:: empty_result_set_value
      :value: 0



.. py:class:: RegrIntercept(y, x, output_field=None, filter=None, default=None)

   Bases: :py:obj:`StatAggregate`


   .. py:attribute:: function
      :value: 'REGR_INTERCEPT'



.. py:class:: RegrR2(y, x, output_field=None, filter=None, default=None)

   Bases: :py:obj:`StatAggregate`


   .. py:attribute:: function
      :value: 'REGR_R2'



.. py:class:: RegrSlope(y, x, output_field=None, filter=None, default=None)

   Bases: :py:obj:`StatAggregate`


   .. py:attribute:: function
      :value: 'REGR_SLOPE'



.. py:class:: RegrSXX(y, x, output_field=None, filter=None, default=None)

   Bases: :py:obj:`StatAggregate`


   .. py:attribute:: function
      :value: 'REGR_SXX'



.. py:class:: RegrSXY(y, x, output_field=None, filter=None, default=None)

   Bases: :py:obj:`StatAggregate`


   .. py:attribute:: function
      :value: 'REGR_SXY'



.. py:class:: RegrSYY(y, x, output_field=None, filter=None, default=None)

   Bases: :py:obj:`StatAggregate`


   .. py:attribute:: function
      :value: 'REGR_SYY'



