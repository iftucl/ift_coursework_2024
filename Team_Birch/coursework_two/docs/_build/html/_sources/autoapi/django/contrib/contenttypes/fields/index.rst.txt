django.contrib.contenttypes.fields
==================================

.. py:module:: django.contrib.contenttypes.fields


Classes
-------

.. autoapisummary::

   django.contrib.contenttypes.fields.GenericForeignKey
   django.contrib.contenttypes.fields.GenericRel
   django.contrib.contenttypes.fields.GenericRelation
   django.contrib.contenttypes.fields.ReverseGenericManyToOneDescriptor


Functions
---------

.. autoapisummary::

   django.contrib.contenttypes.fields.create_generic_related_manager


Module Contents
---------------

.. py:class:: GenericForeignKey(ct_field='content_type', fk_field='object_id', for_concrete_model=True)

   Bases: :py:obj:`django.db.models.fields.mixins.FieldCacheMixin`


   Provide a generic many-to-one relation through the ``content_type`` and
   ``object_id`` fields.

   This class also doubles as an accessor to the related object (similar to
   ForwardManyToOneDescriptor) by adding itself as a model attribute.


   .. py:attribute:: auto_created
      :value: False



   .. py:attribute:: concrete
      :value: False



   .. py:attribute:: editable
      :value: False



   .. py:attribute:: hidden
      :value: False



   .. py:attribute:: is_relation
      :value: True



   .. py:attribute:: many_to_many
      :value: False



   .. py:attribute:: many_to_one
      :value: True



   .. py:attribute:: one_to_many
      :value: False



   .. py:attribute:: one_to_one
      :value: False



   .. py:attribute:: related_model
      :value: None



   .. py:attribute:: remote_field
      :value: None



   .. py:attribute:: ct_field
      :value: 'content_type'



   .. py:attribute:: fk_field
      :value: 'object_id'



   .. py:attribute:: for_concrete_model
      :value: True



   .. py:attribute:: rel
      :value: None



   .. py:attribute:: column
      :value: None



   .. py:method:: contribute_to_class(cls, name, **kwargs)


   .. py:method:: get_filter_kwargs_for_object(obj)

      See corresponding method on Field



   .. py:method:: get_forward_related_filter(obj)

      See corresponding method on RelatedField



   .. py:method:: check(**kwargs)


   .. py:method:: get_cache_name()


   .. py:method:: get_content_type(obj=None, id=None, using=None)


   .. py:method:: get_prefetch_queryset(instances, queryset=None)


.. py:class:: GenericRel(field, to, related_name=None, related_query_name=None, limit_choices_to=None)

   Bases: :py:obj:`django.db.models.ForeignObjectRel`


   Used by GenericRelation to store information about the relation.


.. py:class:: GenericRelation(to, object_id_field='object_id', content_type_field='content_type', for_concrete_model=True, related_query_name=None, limit_choices_to=None, **kwargs)

   Bases: :py:obj:`django.db.models.ForeignObject`


   Provide a reverse to a relation created by a GenericForeignKey.


   .. py:attribute:: auto_created
      :value: False



   .. py:attribute:: empty_strings_allowed
      :value: False



   .. py:attribute:: many_to_many
      :value: False



   .. py:attribute:: many_to_one
      :value: False



   .. py:attribute:: one_to_many
      :value: True



   .. py:attribute:: one_to_one
      :value: False



   .. py:attribute:: rel_class


   .. py:attribute:: mti_inherited
      :value: False



   .. py:attribute:: object_id_field_name
      :value: 'object_id'



   .. py:attribute:: content_type_field_name
      :value: 'content_type'



   .. py:attribute:: for_concrete_model
      :value: True



   .. py:method:: check(**kwargs)


   .. py:method:: resolve_related_fields()


   .. py:method:: get_path_info(filtered_relation=None)


   .. py:method:: get_reverse_path_info(filtered_relation=None)


   .. py:method:: value_to_string(obj)


   .. py:method:: contribute_to_class(cls, name, **kwargs)


   .. py:method:: set_attributes_from_rel()


   .. py:method:: get_internal_type()


   .. py:method:: get_content_type()

      Return the content type associated with this field's model.



   .. py:method:: get_extra_restriction(alias, remote_alias)


   .. py:method:: bulk_related_objects(objs, using=DEFAULT_DB_ALIAS)

      Return all objects related to ``objs`` via this ``GenericRelation``.



.. py:class:: ReverseGenericManyToOneDescriptor

   Bases: :py:obj:`django.db.models.fields.related.ReverseManyToOneDescriptor`


   Accessor to the related objects manager on the one-to-many relation created
   by GenericRelation.

   In the example::

       class Post(Model):
           comments = GenericRelation(Comment)

   ``post.comments`` is a ReverseGenericManyToOneDescriptor instance.


   .. py:method:: related_manager_cls()


.. py:function:: create_generic_related_manager(superclass, rel)

   Factory function to create a manager that subclasses another manager
   (generally the default manager of a given model) and adds behaviors
   specific to generic relations.


