django.utils.lorem_ipsum
========================

.. py:module:: django.utils.lorem_ipsum

.. autoapi-nested-parse::

   Utility functions for generating "lorem ipsum" Latin text.



Attributes
----------

.. autoapisummary::

   django.utils.lorem_ipsum.COMMON_P
   django.utils.lorem_ipsum.WORDS
   django.utils.lorem_ipsum.COMMON_WORDS


Functions
---------

.. autoapisummary::

   django.utils.lorem_ipsum.sentence
   django.utils.lorem_ipsum.paragraph
   django.utils.lorem_ipsum.paragraphs
   django.utils.lorem_ipsum.words


Module Contents
---------------

.. py:data:: COMMON_P
   :value: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut...


.. py:data:: WORDS
   :value: ('exercitationem', 'perferendis', 'perspiciatis', 'laborum', 'eveniet', 'sunt', 'iure', 'nam',...


.. py:data:: COMMON_WORDS
   :value: ('lorem', 'ipsum', 'dolor', 'sit', 'amet', 'consectetur', 'adipisicing', 'elit', 'sed', 'do',...


.. py:function:: sentence()

   Return a randomly generated sentence of lorem ipsum text.

   The first word is capitalized, and the sentence ends in either a period or
   question mark. Commas are added at random.


.. py:function:: paragraph()

   Return a randomly generated paragraph of lorem ipsum text.

   The paragraph consists of between 1 and 4 sentences, inclusive.


.. py:function:: paragraphs(count, common=True)

   Return a list of paragraphs as returned by paragraph().

   If `common` is True, then the first paragraph will be the standard
   'lorem ipsum' paragraph. Otherwise, the first paragraph will be random
   Latin text. Either way, subsequent paragraphs will be random Latin text.


.. py:function:: words(count, common=True)

   Return a string of `count` lorem ipsum words separated by a single space.

   If `common` is True, then the first 19 words will be the standard
   'lorem ipsum' words. Otherwise, all words will be selected randomly.


