django.db.backends.base.base
============================

.. py:module:: django.db.backends.base.base


Attributes
----------

.. autoapisummary::

   django.db.backends.base.base.NO_DB_ALIAS
   django.db.backends.base.base.RAN_DB_VERSION_CHECK
   django.db.backends.base.base.logger


Classes
-------

.. autoapisummary::

   django.db.backends.base.base.BaseDatabaseWrapper


Functions
---------

.. autoapisummary::

   django.db.backends.base.base.timezone_constructor


Module Contents
---------------

.. py:data:: NO_DB_ALIAS
   :value: '__no_db__'


.. py:data:: RAN_DB_VERSION_CHECK

.. py:data:: logger

.. py:function:: timezone_constructor(tzname)

.. py:class:: BaseDatabaseWrapper(settings_dict, alias=DEFAULT_DB_ALIAS)

   Represent a database connection.


   .. py:attribute:: data_types


   .. py:attribute:: data_types_suffix


   .. py:attribute:: data_type_check_constraints


   .. py:attribute:: ops
      :value: None



   .. py:attribute:: vendor
      :value: 'unknown'



   .. py:attribute:: display_name
      :value: 'unknown'



   .. py:attribute:: SchemaEditorClass
      :value: None



   .. py:attribute:: client_class
      :value: None



   .. py:attribute:: creation_class
      :value: None



   .. py:attribute:: features_class
      :value: None



   .. py:attribute:: introspection_class
      :value: None



   .. py:attribute:: ops_class
      :value: None



   .. py:attribute:: validation_class


   .. py:attribute:: queries_limit
      :value: 9000



   .. py:attribute:: connection
      :value: None



   .. py:attribute:: settings_dict


   .. py:attribute:: alias
      :value: 'default'



   .. py:attribute:: queries_log


   .. py:attribute:: force_debug_cursor
      :value: False



   .. py:attribute:: autocommit
      :value: False



   .. py:attribute:: in_atomic_block
      :value: False



   .. py:attribute:: savepoint_state
      :value: 0



   .. py:attribute:: savepoint_ids
      :value: []



   .. py:attribute:: atomic_blocks
      :value: []



   .. py:attribute:: commit_on_exit
      :value: True



   .. py:attribute:: needs_rollback
      :value: False



   .. py:attribute:: rollback_exc
      :value: None



   .. py:attribute:: close_at
      :value: None



   .. py:attribute:: closed_in_transaction
      :value: False



   .. py:attribute:: errors_occurred
      :value: False



   .. py:attribute:: health_check_enabled
      :value: False



   .. py:attribute:: health_check_done
      :value: False



   .. py:attribute:: run_on_commit
      :value: []



   .. py:attribute:: run_commit_hooks_on_set_autocommit_on
      :value: False



   .. py:attribute:: execute_wrappers
      :value: []



   .. py:attribute:: client


   .. py:attribute:: creation


   .. py:attribute:: features


   .. py:attribute:: introspection


   .. py:attribute:: validation


   .. py:method:: ensure_timezone()

      Ensure the connection's timezone is set to `self.timezone_name` and
      return whether it changed or not.



   .. py:method:: timezone()

      Return a tzinfo of the database connection time zone.

      This is only used when time zone support is enabled. When a datetime is
      read from the database, it is always returned in this time zone.

      When the database backend supports time zones, it doesn't matter which
      time zone Django uses, as long as aware datetimes are used everywhere.
      Other users connecting to the database can choose their own time zone.

      When the database backend doesn't support time zones, the time zone
      Django uses may be constrained by the requirements of other users of
      the database.



   .. py:method:: timezone_name()

      Name of the time zone of the database connection.



   .. py:property:: queries_logged


   .. py:property:: queries


   .. py:method:: get_database_version()
      :abstractmethod:


      Return a tuple of the database's version.



   .. py:method:: check_database_version_supported()

      Raise an error if the database version isn't supported by this
      version of Django.



   .. py:method:: get_connection_params()
      :abstractmethod:


      Return a dict of parameters suitable for get_new_connection.



   .. py:method:: get_new_connection(conn_params)
      :abstractmethod:


      Open a connection to the database.



   .. py:method:: init_connection_state()

      Initialize the database connection settings.



   .. py:method:: create_cursor(name=None)
      :abstractmethod:


      Create a cursor. Assume that a connection is established.



   .. py:method:: connect()

      Connect to the database. Assume that the connection is closed.



   .. py:method:: check_settings()


   .. py:method:: ensure_connection()

      Guarantee that a connection to the database is established.



   .. py:method:: cursor()

      Create a cursor, opening a connection if necessary.



   .. py:method:: commit()

      Commit a transaction and reset the dirty flag.



   .. py:method:: rollback()

      Roll back a transaction and reset the dirty flag.



   .. py:method:: close()

      Close the connection to the database.



   .. py:method:: savepoint()

      Create a savepoint inside the current transaction. Return an
      identifier for the savepoint that will be used for the subsequent
      rollback or commit. Do nothing if savepoints are not supported.



   .. py:method:: savepoint_rollback(sid)

      Roll back to a savepoint. Do nothing if savepoints are not supported.



   .. py:method:: savepoint_commit(sid)

      Release a savepoint. Do nothing if savepoints are not supported.



   .. py:method:: clean_savepoints()

      Reset the counter used to generate unique savepoint ids in this thread.



   .. py:method:: get_autocommit()

      Get the autocommit state.



   .. py:method:: set_autocommit(autocommit, force_begin_transaction_with_broken_autocommit=False)

      Enable or disable autocommit.

      The usual way to start a transaction is to turn autocommit off.
      SQLite does not properly start a transaction when disabling
      autocommit. To avoid this buggy behavior and to actually enter a new
      transaction, an explicit BEGIN is required. Using
      force_begin_transaction_with_broken_autocommit=True will issue an
      explicit BEGIN with SQLite. This option will be ignored for other
      backends.



   .. py:method:: get_rollback()

      Get the "needs rollback" flag -- for *advanced use* only.



   .. py:method:: set_rollback(rollback)

      Set or unset the "needs rollback" flag -- for *advanced use* only.



   .. py:method:: validate_no_atomic_block()

      Raise an error if an atomic block is active.



   .. py:method:: validate_no_broken_transaction()


   .. py:method:: constraint_checks_disabled()

      Disable foreign key constraint checking.



   .. py:method:: disable_constraint_checking()

      Backends can implement as needed to temporarily disable foreign key
      constraint checking. Should return True if the constraints were
      disabled and will need to be reenabled.



   .. py:method:: enable_constraint_checking()

      Backends can implement as needed to re-enable foreign key constraint
      checking.



   .. py:method:: check_constraints(table_names=None)

      Backends can override this method if they can apply constraint
      checking (e.g. via "SET CONSTRAINTS ALL IMMEDIATE"). Should raise an
      IntegrityError if any invalid foreign key references are encountered.



   .. py:method:: is_usable()
      :abstractmethod:


      Test if the database connection is usable.

      This method may assume that self.connection is not None.

      Actual implementations should take care not to raise exceptions
      as that may prevent Django from recycling unusable connections.



   .. py:method:: close_if_health_check_failed()

      Close existing connection if it fails a health check.



   .. py:method:: close_if_unusable_or_obsolete()

      Close the current connection if unrecoverable errors have occurred
      or if it outlived its maximum age.



   .. py:property:: allow_thread_sharing


   .. py:method:: inc_thread_sharing()


   .. py:method:: dec_thread_sharing()


   .. py:method:: validate_thread_sharing()

      Validate that the connection isn't accessed by another thread than the
      one which originally created it, unless the connection was explicitly
      authorized to be shared between threads (via the `inc_thread_sharing()`
      method). Raise an exception if the validation fails.



   .. py:method:: prepare_database()

      Hook to do any database check or preparation, generally called before
      migrating a project or an app.



   .. py:method:: wrap_database_errors()

      Context manager and decorator that re-throws backend-specific database
      exceptions using Django's common wrappers.



   .. py:method:: chunked_cursor()

      Return a cursor that tries to avoid caching in the database (if
      supported by the database), otherwise return a regular cursor.



   .. py:method:: make_debug_cursor(cursor)

      Create a cursor that logs all queries in self.queries_log.



   .. py:method:: make_cursor(cursor)

      Create a cursor without debug logging.



   .. py:method:: temporary_connection()

      Context manager that ensures that a connection is established, and
      if it opened one, closes it to avoid leaving a dangling connection.
      This is useful for operations outside of the request-response cycle.

      Provide a cursor: with self.temporary_connection() as cursor: ...



   .. py:method:: schema_editor(*args, **kwargs)

      Return a new instance of this backend's SchemaEditor.



   .. py:method:: on_commit(func, robust=False)


   .. py:method:: run_and_clear_commit_hooks()


   .. py:method:: execute_wrapper(wrapper)

      Return a context manager under which the wrapper is applied to suitable
      database query executions.



   .. py:method:: copy(alias=None)

      Return a copy of this connection.

      For tests that require two connections to the same database.



