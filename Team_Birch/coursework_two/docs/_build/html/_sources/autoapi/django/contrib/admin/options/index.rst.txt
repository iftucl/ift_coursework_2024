django.contrib.admin.options
============================

.. py:module:: django.contrib.admin.options


Attributes
----------

.. autoapisummary::

   django.contrib.admin.options.IS_POPUP_VAR
   django.contrib.admin.options.TO_FIELD_VAR
   django.contrib.admin.options.FORMFIELD_FOR_DBFIELD_DEFAULTS
   django.contrib.admin.options.csrf_protect_m


Exceptions
----------

.. autoapisummary::

   django.contrib.admin.options.IncorrectLookupParameters


Classes
-------

.. autoapisummary::

   django.contrib.admin.options.BaseModelAdmin
   django.contrib.admin.options.ModelAdmin
   django.contrib.admin.options.InlineModelAdmin
   django.contrib.admin.options.StackedInline
   django.contrib.admin.options.TabularInline


Functions
---------

.. autoapisummary::

   django.contrib.admin.options.get_content_type_for_model
   django.contrib.admin.options.get_ul_class


Module Contents
---------------

.. py:data:: IS_POPUP_VAR
   :value: '_popup'


.. py:data:: TO_FIELD_VAR
   :value: '_to_field'


.. py:function:: get_content_type_for_model(obj)

.. py:function:: get_ul_class(radio_style)

.. py:exception:: IncorrectLookupParameters

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


.. py:data:: FORMFIELD_FOR_DBFIELD_DEFAULTS

.. py:data:: csrf_protect_m

.. py:class:: BaseModelAdmin

   Functionality common to both ModelAdmin and InlineAdmin.


   .. py:attribute:: autocomplete_fields
      :value: ()



   .. py:attribute:: raw_id_fields
      :value: ()



   .. py:attribute:: fields
      :value: None



   .. py:attribute:: exclude
      :value: None



   .. py:attribute:: fieldsets
      :value: None



   .. py:attribute:: form


   .. py:attribute:: filter_vertical
      :value: ()



   .. py:attribute:: filter_horizontal
      :value: ()



   .. py:attribute:: radio_fields


   .. py:attribute:: prepopulated_fields


   .. py:attribute:: formfield_overrides


   .. py:attribute:: readonly_fields
      :value: ()



   .. py:attribute:: ordering
      :value: None



   .. py:attribute:: sortable_by
      :value: None



   .. py:attribute:: view_on_site
      :value: True



   .. py:attribute:: show_full_result_count
      :value: True



   .. py:attribute:: checks_class


   .. py:method:: check(**kwargs)


   .. py:method:: formfield_for_dbfield(db_field, request, **kwargs)

      Hook for specifying the form Field instance for a given database Field
      instance.

      If kwargs are given, they're passed to the form Field's constructor.



   .. py:method:: formfield_for_choice_field(db_field, request, **kwargs)

      Get a form Field for a database Field that has declared choices.



   .. py:method:: get_field_queryset(db, db_field, request)

      If the ModelAdmin specifies ordering, the queryset should respect that
      ordering.  Otherwise don't specify the queryset, let the field decide
      (return None in that case).



   .. py:method:: formfield_for_foreignkey(db_field, request, **kwargs)

      Get a form Field for a ForeignKey.



   .. py:method:: formfield_for_manytomany(db_field, request, **kwargs)

      Get a form Field for a ManyToManyField.



   .. py:method:: get_autocomplete_fields(request)

      Return a list of ForeignKey and/or ManyToMany fields which should use
      an autocomplete widget.



   .. py:method:: get_view_on_site_url(obj=None)


   .. py:method:: get_empty_value_display()

      Return the empty_value_display set on ModelAdmin or AdminSite.



   .. py:method:: get_exclude(request, obj=None)

      Hook for specifying exclude.



   .. py:method:: get_fields(request, obj=None)

      Hook for specifying fields.



   .. py:method:: get_fieldsets(request, obj=None)

      Hook for specifying fieldsets.



   .. py:method:: get_inlines(request, obj)

      Hook for specifying custom inlines.



   .. py:method:: get_ordering(request)

      Hook for specifying field ordering.



   .. py:method:: get_readonly_fields(request, obj=None)

      Hook for specifying custom readonly fields.



   .. py:method:: get_prepopulated_fields(request, obj=None)

      Hook for specifying custom prepopulated fields.



   .. py:method:: get_queryset(request)

      Return a QuerySet of all model instances that can be edited by the
      admin site. This is used by changelist_view.



   .. py:method:: get_sortable_by(request)

      Hook for specifying which fields can be sorted in the changelist.



   .. py:method:: lookup_allowed(lookup, value)


   .. py:method:: to_field_allowed(request, to_field)

      Return True if the model associated with this admin should be
      allowed to be referenced by the specified field.



   .. py:method:: has_add_permission(request)

      Return True if the given request has permission to add an object.
      Can be overridden by the user in subclasses.



   .. py:method:: has_change_permission(request, obj=None)

      Return True if the given request has permission to change the given
      Django model instance, the default implementation doesn't examine the
      `obj` parameter.

      Can be overridden by the user in subclasses. In such case it should
      return True if the given request has permission to change the `obj`
      model instance. If `obj` is None, this should return True if the given
      request has permission to change *any* object of the given type.



   .. py:method:: has_delete_permission(request, obj=None)

      Return True if the given request has permission to delete the given
      Django model instance, the default implementation doesn't examine the
      `obj` parameter.

      Can be overridden by the user in subclasses. In such case it should
      return True if the given request has permission to delete the `obj`
      model instance. If `obj` is None, this should return True if the given
      request has permission to delete *any* object of the given type.



   .. py:method:: has_view_permission(request, obj=None)

      Return True if the given request has permission to view the given
      Django model instance. The default implementation doesn't examine the
      `obj` parameter.

      If overridden by the user in subclasses, it should return True if the
      given request has permission to view the `obj` model instance. If `obj`
      is None, it should return True if the request has permission to view
      any object of the given type.



   .. py:method:: has_view_or_change_permission(request, obj=None)


   .. py:method:: has_module_permission(request)

      Return True if the given request has any permission in the given
      app label.

      Can be overridden by the user in subclasses. In such case it should
      return True if the given request has permission to view the module on
      the admin index page and access the module's index page. Overriding it
      does not restrict access to the add, change or delete views. Use
      `ModelAdmin.has_(add|change|delete)_permission` for that.



.. py:class:: ModelAdmin(model, admin_site)

   Bases: :py:obj:`BaseModelAdmin`


   Encapsulate all admin options and functionality for a given model.


   .. py:attribute:: list_display
      :value: ('__str__',)



   .. py:attribute:: list_display_links
      :value: ()



   .. py:attribute:: list_filter
      :value: ()



   .. py:attribute:: list_select_related
      :value: False



   .. py:attribute:: list_per_page
      :value: 100



   .. py:attribute:: list_max_show_all
      :value: 200



   .. py:attribute:: list_editable
      :value: ()



   .. py:attribute:: search_fields
      :value: ()



   .. py:attribute:: search_help_text
      :value: None



   .. py:attribute:: date_hierarchy
      :value: None



   .. py:attribute:: save_as
      :value: False



   .. py:attribute:: save_as_continue
      :value: True



   .. py:attribute:: save_on_top
      :value: False



   .. py:attribute:: paginator


   .. py:attribute:: preserve_filters
      :value: True



   .. py:attribute:: inlines
      :value: ()



   .. py:attribute:: add_form_template
      :value: None



   .. py:attribute:: change_form_template
      :value: None



   .. py:attribute:: change_list_template
      :value: None



   .. py:attribute:: delete_confirmation_template
      :value: None



   .. py:attribute:: delete_selected_confirmation_template
      :value: None



   .. py:attribute:: object_history_template
      :value: None



   .. py:attribute:: popup_response_template
      :value: None



   .. py:attribute:: actions
      :value: ()



   .. py:attribute:: action_form


   .. py:attribute:: actions_on_top
      :value: True



   .. py:attribute:: actions_on_bottom
      :value: False



   .. py:attribute:: actions_selection_counter
      :value: True



   .. py:attribute:: checks_class


   .. py:attribute:: model


   .. py:attribute:: opts


   .. py:attribute:: admin_site


   .. py:method:: get_inline_instances(request, obj=None)


   .. py:method:: get_urls()


   .. py:property:: urls


   .. py:property:: media


   .. py:method:: get_model_perms(request)

      Return a dict of all perms for this model. This dict has the keys
      ``add``, ``change``, ``delete``, and ``view`` mapping to the True/False
      for each of those actions.



   .. py:method:: get_form(request, obj=None, change=False, **kwargs)

      Return a Form class for use in the admin add view. This is used by
      add_view and change_view.



   .. py:method:: get_changelist(request, **kwargs)

      Return the ChangeList class for use on the changelist page.



   .. py:method:: get_changelist_instance(request)

      Return a `ChangeList` instance based on `request`. May raise
      `IncorrectLookupParameters`.



   .. py:method:: get_object(request, object_id, from_field=None)

      Return an instance matching the field and value provided, the primary
      key is used if no field is provided. Return ``None`` if no match is
      found or the object_id fails validation.



   .. py:method:: get_changelist_form(request, **kwargs)

      Return a Form class for use in the Formset on the changelist page.



   .. py:method:: get_changelist_formset(request, **kwargs)

      Return a FormSet class for use on the changelist page if list_editable
      is used.



   .. py:method:: get_formsets_with_inlines(request, obj=None)

      Yield formsets and the corresponding inlines.



   .. py:method:: get_paginator(request, queryset, per_page, orphans=0, allow_empty_first_page=True)


   .. py:method:: log_addition(request, obj, message)

      Log that an object has been successfully added.

      The default implementation creates an admin LogEntry object.



   .. py:method:: log_change(request, obj, message)

      Log that an object has been successfully changed.

      The default implementation creates an admin LogEntry object.



   .. py:method:: log_deletion(request, obj, object_repr)

      Log that an object will be deleted. Note that this method must be
      called before the deletion.

      The default implementation creates an admin LogEntry object.



   .. py:method:: action_checkbox(obj)

      A list_display column containing a checkbox widget.



   .. py:method:: get_actions(request)

      Return a dictionary mapping the names of all actions for this
      ModelAdmin to a tuple of (callable, name, description) for each action.



   .. py:method:: get_action_choices(request, default_choices=models.BLANK_CHOICE_DASH)

      Return a list of choices for use in a form object.  Each choice is a
      tuple (name, description).



   .. py:method:: get_action(action)

      Return a given action from a parameter, which can either be a callable,
      or the name of a method on the ModelAdmin.  Return is a tuple of
      (callable, name, description).



   .. py:method:: get_list_display(request)

      Return a sequence containing the fields to be displayed on the
      changelist.



   .. py:method:: get_list_display_links(request, list_display)

      Return a sequence containing the fields to be displayed as links
      on the changelist. The list_display parameter is the list of fields
      returned by get_list_display().



   .. py:method:: get_list_filter(request)

      Return a sequence containing the fields to be displayed as filters in
      the right sidebar of the changelist page.



   .. py:method:: get_list_select_related(request)

      Return a list of fields to add to the select_related() part of the
      changelist items query.



   .. py:method:: get_search_fields(request)

      Return a sequence containing the fields to be searched whenever
      somebody submits a search query.



   .. py:method:: get_search_results(request, queryset, search_term)

      Return a tuple containing a queryset to implement the search
      and a boolean indicating if the results may contain duplicates.



   .. py:method:: get_preserved_filters(request)

      Return the preserved filters querystring.



   .. py:method:: construct_change_message(request, form, formsets, add=False)

      Construct a JSON structure describing changes from a changed object.



   .. py:method:: message_user(request, message, level=messages.INFO, extra_tags='', fail_silently=False)

      Send a message to the user. The default implementation
      posts a message using the django.contrib.messages backend.

      Exposes almost the same API as messages.add_message(), but accepts the
      positional arguments in a different order to maintain backwards
      compatibility. For convenience, it accepts the `level` argument as
      a string rather than the usual level number.



   .. py:method:: save_form(request, form, change)

      Given a ModelForm return an unsaved instance. ``change`` is True if
      the object is being changed, and False if it's being added.



   .. py:method:: save_model(request, obj, form, change)

      Given a model instance save it to the database.



   .. py:method:: delete_model(request, obj)

      Given a model instance delete it from the database.



   .. py:method:: delete_queryset(request, queryset)

      Given a queryset, delete it from the database.



   .. py:method:: save_formset(request, form, formset, change)

      Given an inline formset save it to the database.



   .. py:method:: save_related(request, form, formsets, change)

      Given the ``HttpRequest``, the parent ``ModelForm`` instance, the
      list of inline formsets and a boolean value based on whether the
      parent is being added or changed, save the related objects to the
      database. Note that at this point save_form() and save_model() have
      already been called.



   .. py:method:: render_change_form(request, context, add=False, change=False, form_url='', obj=None)


   .. py:method:: response_add(request, obj, post_url_continue=None)

      Determine the HttpResponse for the add_view stage.



   .. py:method:: response_change(request, obj)

      Determine the HttpResponse for the change_view stage.



   .. py:method:: response_post_save_add(request, obj)

      Figure out where to redirect after the 'Save' button has been pressed
      when adding a new object.



   .. py:method:: response_post_save_change(request, obj)

      Figure out where to redirect after the 'Save' button has been pressed
      when editing an existing object.



   .. py:method:: response_action(request, queryset)

      Handle an admin action. This is called if a request is POSTed to the
      changelist; it returns an HttpResponse if the action was handled, and
      None otherwise.



   .. py:method:: response_delete(request, obj_display, obj_id)

      Determine the HttpResponse for the delete_view stage.



   .. py:method:: render_delete_form(request, context)


   .. py:method:: get_inline_formsets(request, formsets, inline_instances, obj=None)


   .. py:method:: get_changeform_initial_data(request)

      Get the initial form data from the request's GET params.



   .. py:method:: changeform_view(request, object_id=None, form_url='', extra_context=None)


   .. py:method:: add_view(request, form_url='', extra_context=None)


   .. py:method:: change_view(request, object_id, form_url='', extra_context=None)


   .. py:method:: changelist_view(request, extra_context=None)

      The 'change list' admin view for this model.



   .. py:method:: get_deleted_objects(objs, request)

      Hook for customizing the delete process for the delete view and the
      "delete selected" action.



   .. py:method:: delete_view(request, object_id, extra_context=None)


   .. py:method:: history_view(request, object_id, extra_context=None)

      The 'history' admin view for this model.



   .. py:method:: get_formset_kwargs(request, obj, inline, prefix)


.. py:class:: InlineModelAdmin(parent_model, admin_site)

   Bases: :py:obj:`BaseModelAdmin`


   Options for inline editing of ``model`` instances.

   Provide ``fk_name`` to specify the attribute name of the ``ForeignKey``
   from ``model`` to its parent. This is required if ``model`` has more than
   one ``ForeignKey`` to its parent.


   .. py:attribute:: model
      :value: None



   .. py:attribute:: fk_name
      :value: None



   .. py:attribute:: formset


   .. py:attribute:: extra
      :value: 3



   .. py:attribute:: min_num
      :value: None



   .. py:attribute:: max_num
      :value: None



   .. py:attribute:: template
      :value: None



   .. py:attribute:: verbose_name
      :value: None



   .. py:attribute:: verbose_name_plural
      :value: None



   .. py:attribute:: can_delete
      :value: True



   .. py:attribute:: show_change_link
      :value: False



   .. py:attribute:: checks_class


   .. py:attribute:: classes
      :value: None



   .. py:attribute:: admin_site


   .. py:attribute:: parent_model


   .. py:attribute:: opts


   .. py:attribute:: has_registered_model


   .. py:property:: media


   .. py:method:: get_extra(request, obj=None, **kwargs)

      Hook for customizing the number of extra inline forms.



   .. py:method:: get_min_num(request, obj=None, **kwargs)

      Hook for customizing the min number of inline forms.



   .. py:method:: get_max_num(request, obj=None, **kwargs)

      Hook for customizing the max number of extra inline forms.



   .. py:method:: get_formset(request, obj=None, **kwargs)

      Return a BaseInlineFormSet class for use in admin add/change views.



   .. py:method:: get_queryset(request)

      Return a QuerySet of all model instances that can be edited by the
      admin site. This is used by changelist_view.



   .. py:method:: has_add_permission(request, obj)

      Return True if the given request has permission to add an object.
      Can be overridden by the user in subclasses.



   .. py:method:: has_change_permission(request, obj=None)

      Return True if the given request has permission to change the given
      Django model instance, the default implementation doesn't examine the
      `obj` parameter.

      Can be overridden by the user in subclasses. In such case it should
      return True if the given request has permission to change the `obj`
      model instance. If `obj` is None, this should return True if the given
      request has permission to change *any* object of the given type.



   .. py:method:: has_delete_permission(request, obj=None)

      Return True if the given request has permission to delete the given
      Django model instance, the default implementation doesn't examine the
      `obj` parameter.

      Can be overridden by the user in subclasses. In such case it should
      return True if the given request has permission to delete the `obj`
      model instance. If `obj` is None, this should return True if the given
      request has permission to delete *any* object of the given type.



   .. py:method:: has_view_permission(request, obj=None)

      Return True if the given request has permission to view the given
      Django model instance. The default implementation doesn't examine the
      `obj` parameter.

      If overridden by the user in subclasses, it should return True if the
      given request has permission to view the `obj` model instance. If `obj`
      is None, it should return True if the request has permission to view
      any object of the given type.



.. py:class:: StackedInline(parent_model, admin_site)

   Bases: :py:obj:`InlineModelAdmin`


   Options for inline editing of ``model`` instances.

   Provide ``fk_name`` to specify the attribute name of the ``ForeignKey``
   from ``model`` to its parent. This is required if ``model`` has more than
   one ``ForeignKey`` to its parent.


   .. py:attribute:: template
      :value: 'admin/edit_inline/stacked.html'



.. py:class:: TabularInline(parent_model, admin_site)

   Bases: :py:obj:`InlineModelAdmin`


   Options for inline editing of ``model`` instances.

   Provide ``fk_name`` to specify the attribute name of the ``ForeignKey``
   from ``model`` to its parent. This is required if ``model`` has more than
   one ``ForeignKey`` to its parent.


   .. py:attribute:: template
      :value: 'admin/edit_inline/tabular.html'



