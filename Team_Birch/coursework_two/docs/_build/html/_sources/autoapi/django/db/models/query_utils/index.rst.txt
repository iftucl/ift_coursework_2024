django.db.models.query_utils
============================

.. py:module:: django.db.models.query_utils

.. autoapi-nested-parse::

   Various data structures used in query construction.

   Factored out from django.db.models.query to avoid making the main module very
   large and/or so that they can be used by other modules without getting into
   circular import difficulties.



Attributes
----------

.. autoapisummary::

   django.db.models.query_utils.logger


Classes
-------

.. autoapisummary::

   django.db.models.query_utils.PathInfo
   django.db.models.query_utils.Q
   django.db.models.query_utils.DeferredAttribute
   django.db.models.query_utils.class_or_instance_method
   django.db.models.query_utils.RegisterLookupMixin
   django.db.models.query_utils.FilteredRelation


Functions
---------

.. autoapisummary::

   django.db.models.query_utils.subclasses
   django.db.models.query_utils.select_related_descend
   django.db.models.query_utils.refs_expression
   django.db.models.query_utils.check_rel_lookup_compatibility


Module Contents
---------------

.. py:data:: logger

.. py:class:: PathInfo

   Bases: :py:obj:`tuple`


   .. py:attribute:: from_opts


   .. py:attribute:: to_opts


   .. py:attribute:: target_fields


   .. py:attribute:: join_field


   .. py:attribute:: m2m


   .. py:attribute:: direct


   .. py:attribute:: filtered_relation


.. py:function:: subclasses(cls)

.. py:class:: Q(*args, _connector=None, _negated=False, **kwargs)

   Bases: :py:obj:`django.utils.tree.Node`


   Encapsulate filters as objects that can then be combined logically (using
   `&` and `|`).


   .. py:attribute:: AND
      :value: 'AND'



   .. py:attribute:: OR
      :value: 'OR'



   .. py:attribute:: XOR
      :value: 'XOR'



   .. py:attribute:: default
      :value: 'AND'



   .. py:attribute:: conditional
      :value: True



   .. py:method:: resolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)


   .. py:method:: flatten()

      Recursively yield this Q object and all subexpressions, in depth-first
      order.



   .. py:method:: check(against, using=DEFAULT_DB_ALIAS)

      Do a database query to check if the expressions of the Q instance
      matches against the expressions.



   .. py:method:: deconstruct()


.. py:class:: DeferredAttribute(field)

   A wrapper for a deferred-loading field. When the value is read from this
   object the first time, the query is executed.


   .. py:attribute:: field


.. py:class:: class_or_instance_method(class_method, instance_method)

   Hook used in RegisterLookupMixin to return partial functions depending on
   the caller type (instance or class of models.Field).


   .. py:attribute:: class_method


   .. py:attribute:: instance_method


.. py:class:: RegisterLookupMixin

   .. py:method:: get_class_lookups()
      :classmethod:



   .. py:method:: get_instance_lookups()


   .. py:attribute:: get_lookups


   .. py:method:: get_lookup(lookup_name)


   .. py:method:: get_transform(lookup_name)


   .. py:method:: merge_dicts(dicts)
      :staticmethod:


      Merge dicts in reverse to preference the order of the original list. e.g.,
      merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.



   .. py:method:: register_class_lookup(lookup, lookup_name=None)
      :classmethod:



   .. py:method:: register_instance_lookup(lookup, lookup_name=None)


   .. py:attribute:: register_lookup


.. py:function:: select_related_descend(field, restricted, requested, select_mask, reverse=False)

   Return True if this field should be used to descend deeper for
   select_related() purposes. Used by both the query construction code
   (compiler.get_related_selections()) and the model instance creation code
   (compiler.klass_info).

   :param \* field - the field to be checked:
   :param \* restricted - a boolean field: manually restricted using a requested clause)
   :param indicating if the field list has been: manually restricted using a requested clause)
   :param \* requested - The select_related() dictionary.:
   :param \* select_mask - the dictionary of selected fields.:
   :param \* reverse - boolean:
   :param True if we are checking a reverse select related:


.. py:function:: refs_expression(lookup_parts, annotations)

   Check if the lookup_parts contains references to the given annotations set.
   Because the LOOKUP_SEP is contained in the default annotation names, check
   each prefix of the lookup_parts for a match.


.. py:function:: check_rel_lookup_compatibility(model, target_opts, field)

   Check that self.model is compatible with target_opts. Compatibility
   is OK if:
     1) model and opts match (where proxy inheritance is removed)
     2) model is parent of opts' model or the other way around


.. py:class:: FilteredRelation(relation_name, *, condition=Q())

   Specify custom filtering in the ON clause of SQL joins.


   .. py:attribute:: relation_name


   .. py:attribute:: alias
      :value: None



   .. py:attribute:: condition


   .. py:attribute:: path
      :value: []



   .. py:method:: clone()


   .. py:method:: resolve_expression(*args, **kwargs)
      :abstractmethod:


      QuerySet.annotate() only accepts expression-like arguments
      (with a resolve_expression() method).



   .. py:method:: as_sql(compiler, connection)


