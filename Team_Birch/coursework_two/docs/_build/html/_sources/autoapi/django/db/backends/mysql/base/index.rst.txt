django.db.backends.mysql.base
=============================

.. py:module:: django.db.backends.mysql.base

.. autoapi-nested-parse::

   MySQL database backend for Django.

   Requires mysqlclient: https://pypi.org/project/mysqlclient/



Attributes
----------

.. autoapisummary::

   django.db.backends.mysql.base.version
   django.db.backends.mysql.base.django_conversions
   django.db.backends.mysql.base.server_version_re


Classes
-------

.. autoapisummary::

   django.db.backends.mysql.base.CursorWrapper
   django.db.backends.mysql.base.DatabaseWrapper


Module Contents
---------------

.. py:data:: version

.. py:data:: django_conversions

.. py:data:: server_version_re

.. py:class:: CursorWrapper(cursor)

   A thin wrapper around MySQLdb's normal cursor class that catches particular
   exception instances and reraises them with the correct types.

   Implemented as a wrapper, rather than a subclass, so that it isn't stuck
   to the particular underlying representation returned by Connection.cursor().


   .. py:attribute:: codes_for_integrityerror
      :value: (1048, 1690, 3819, 4025)



   .. py:attribute:: cursor


   .. py:method:: execute(query, args=None)


   .. py:method:: executemany(query, args)


.. py:class:: DatabaseWrapper

   Bases: :py:obj:`django.db.backends.base.base.BaseDatabaseWrapper`


   .. py:attribute:: vendor
      :value: 'mysql'



   .. py:attribute:: data_types


   .. py:attribute:: operators


   .. py:attribute:: pattern_esc
      :value: "REPLACE(REPLACE(REPLACE({}, '\\\\', '\\\\\\\\'), '%%', '\\%%'), '_', '\\_')"



   .. py:attribute:: pattern_ops


   .. py:attribute:: isolation_levels


   .. py:attribute:: Database


   .. py:attribute:: SchemaEditorClass


   .. py:attribute:: client_class


   .. py:attribute:: creation_class


   .. py:attribute:: features_class


   .. py:attribute:: introspection_class


   .. py:attribute:: ops_class


   .. py:attribute:: validation_class


   .. py:method:: get_database_version()


   .. py:method:: get_connection_params()


   .. py:method:: get_new_connection(conn_params)


   .. py:method:: init_connection_state()


   .. py:method:: create_cursor(name=None)


   .. py:method:: disable_constraint_checking()

      Disable foreign key checks, primarily for use in adding rows with
      forward references. Always return True to indicate constraint checks
      need to be re-enabled.



   .. py:method:: enable_constraint_checking()

      Re-enable foreign key checks after they have been disabled.



   .. py:method:: check_constraints(table_names=None)

      Check each table name in `table_names` for rows with invalid foreign
      key references. This method is intended to be used in conjunction with
      `disable_constraint_checking()` and `enable_constraint_checking()`, to
      determine if rows with invalid references were entered while constraint
      checks were off.



   .. py:method:: is_usable()


   .. py:method:: display_name()


   .. py:method:: data_type_check_constraints()


   .. py:method:: mysql_server_data()


   .. py:method:: mysql_server_info()


   .. py:method:: mysql_version()


   .. py:method:: mysql_is_mariadb()


   .. py:method:: sql_mode()


