django.test.utils
=================

.. py:module:: django.test.utils


Attributes
----------

.. autoapisummary::

   django.test.utils.requires_tz_support


Classes
-------

.. autoapisummary::

   django.test.utils.Approximate
   django.test.utils.ContextList
   django.test.utils.override_settings
   django.test.utils.modify_settings
   django.test.utils.override_system_checks
   django.test.utils.CaptureQueriesContext
   django.test.utils.ignore_warnings
   django.test.utils.isolate_apps


Functions
---------

.. autoapisummary::

   django.test.utils.setup_test_environment
   django.test.utils.teardown_test_environment
   django.test.utils.setup_databases
   django.test.utils.get_runner
   django.test.utils.isolate_lru_cache
   django.test.utils.tag


Module Contents
---------------

.. py:class:: Approximate(val, places=7)

   .. py:attribute:: val


   .. py:attribute:: places
      :value: 7



.. py:class:: ContextList

   Bases: :py:obj:`list`


   A wrapper that provides direct key access to context items contained
   in a list of context objects.


   .. py:method:: get(key, default=None)


   .. py:method:: keys()

      Flattened keys of subcontexts.



.. py:function:: setup_test_environment(debug=None)

   Perform global pre-test setup, such as installing the instrumented template
   renderer and setting the email backend to the locmem email backend.


.. py:function:: teardown_test_environment()

   Perform any global post-test teardown, such as restoring the original
   template renderer and restoring the email sending functions.


.. py:function:: setup_databases(verbosity, interactive, *, time_keeper=None, keepdb=False, debug_sql=False, parallel=0, aliases=None, serialized_aliases=None, **kwargs)

   Create the test databases.


.. py:function:: get_runner(settings, test_runner_class=None)

.. py:class:: override_settings(**kwargs)

   Bases: :py:obj:`TestContextDecorator`


   Act as either a decorator or a context manager. If it's a decorator, take a
   function and return a wrapped function. If it's a contextmanager, use it
   with the ``with`` statement. In either event, entering/exiting are called
   before and after, respectively, the function/block is executed.


   .. py:attribute:: enable_exception
      :value: None



   .. py:attribute:: options


   .. py:method:: enable()


   .. py:method:: disable()


   .. py:method:: save_options(test_func)


   .. py:method:: decorate_class(cls)


.. py:class:: modify_settings(*args, **kwargs)

   Bases: :py:obj:`override_settings`


   Like override_settings, but makes it possible to append, prepend, or remove
   items instead of redefining the entire list.


   .. py:method:: save_options(test_func)


   .. py:method:: enable()


.. py:class:: override_system_checks(new_checks, deployment_checks=None)

   Bases: :py:obj:`TestContextDecorator`


   Act as a decorator. Override list of registered system checks.
   Useful when you override `INSTALLED_APPS`, e.g. if you exclude `auth` app,
   you also need to exclude its system checks.


   .. py:attribute:: registry


   .. py:attribute:: new_checks


   .. py:attribute:: deployment_checks
      :value: None



   .. py:method:: enable()


   .. py:method:: disable()


.. py:class:: CaptureQueriesContext(connection)

   Context manager that captures queries executed by the specified connection.


   .. py:attribute:: connection


   .. py:property:: captured_queries


.. py:class:: ignore_warnings(**kwargs)

   Bases: :py:obj:`TestContextDecorator`


   A base class that can either be used as a context manager during tests
   or as a test function or unittest.TestCase subclass decorator to perform
   temporary alterations.

   `attr_name`: attribute assigned the return value of enable() if used as
                a class decorator.

   `kwarg_name`: keyword argument passing the return value of enable() if
                 used as a function decorator.


   .. py:attribute:: ignore_kwargs


   .. py:method:: enable()


   .. py:method:: disable()


.. py:data:: requires_tz_support

.. py:function:: isolate_lru_cache(lru_cache_object)

   Clear the cache of an LRU cache object on entering and exiting.


.. py:class:: isolate_apps(*installed_apps, **kwargs)

   Bases: :py:obj:`TestContextDecorator`


   Act as either a decorator or a context manager to register models defined
   in its wrapped context to an isolated registry.

   The list of installed apps the isolated registry should contain must be
   passed as arguments.

   Two optional keyword arguments can be specified:

   `attr_name`: attribute assigned the isolated registry if used as a class
                decorator.

   `kwarg_name`: keyword argument passing the isolated registry if used as a
                 function decorator.


   .. py:attribute:: installed_apps
      :value: ()



   .. py:method:: enable()


   .. py:method:: disable()


.. py:function:: tag(*tags)

   Decorator to add tags to a test class or method.


