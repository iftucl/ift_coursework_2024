django.contrib.contenttypes.management
======================================

.. py:module:: django.contrib.contenttypes.management


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/django/contrib/contenttypes/management/commands/index


Classes
-------

.. autoapisummary::

   django.contrib.contenttypes.management.RenameContentType


Functions
---------

.. autoapisummary::

   django.contrib.contenttypes.management.inject_rename_contenttypes_operations
   django.contrib.contenttypes.management.get_contenttypes_and_models
   django.contrib.contenttypes.management.create_contenttypes


Package Contents
----------------

.. py:class:: RenameContentType(app_label, old_model, new_model)

   Bases: :py:obj:`django.db.migrations.RunPython`


   .. py:attribute:: app_label


   .. py:attribute:: old_model


   .. py:attribute:: new_model


   .. py:method:: rename_forward(apps, schema_editor)


   .. py:method:: rename_backward(apps, schema_editor)


.. py:function:: inject_rename_contenttypes_operations(plan=None, apps=global_apps, using=DEFAULT_DB_ALIAS, **kwargs)

   Insert a `RenameContentType` operation after every planned `RenameModel`
   operation.


.. py:function:: get_contenttypes_and_models(app_config, using, ContentType)

.. py:function:: create_contenttypes(app_config, verbosity=2, interactive=True, using=DEFAULT_DB_ALIAS, apps=global_apps, **kwargs)

   Create content types for models in the given app.


