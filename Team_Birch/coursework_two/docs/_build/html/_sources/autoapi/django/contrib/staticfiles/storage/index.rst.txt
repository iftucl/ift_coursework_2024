django.contrib.staticfiles.storage
==================================

.. py:module:: django.contrib.staticfiles.storage


Attributes
----------

.. autoapisummary::

   django.contrib.staticfiles.storage.staticfiles_storage


Classes
-------

.. autoapisummary::

   django.contrib.staticfiles.storage.StaticFilesStorage
   django.contrib.staticfiles.storage.HashedFilesMixin
   django.contrib.staticfiles.storage.ManifestFilesMixin
   django.contrib.staticfiles.storage.ManifestStaticFilesStorage
   django.contrib.staticfiles.storage.ConfiguredStorage


Module Contents
---------------

.. py:class:: StaticFilesStorage(location=None, base_url=None, *args, **kwargs)

   Bases: :py:obj:`django.core.files.storage.FileSystemStorage`


   Standard file system storage for static files.

   The defaults for ``location`` and ``base_url`` are
   ``STATIC_ROOT`` and ``STATIC_URL``.


   .. py:method:: path(name)

      Return a local filesystem path where the file can be retrieved using
      Python's built-in open() function. Storage systems that can't be
      accessed using open() should *not* implement this method.



.. py:class:: HashedFilesMixin(*args, **kwargs)

   .. py:attribute:: default_template
      :value: 'url("%(url)s")'



   .. py:attribute:: max_post_process_passes
      :value: 5



   .. py:attribute:: support_js_module_import_aggregation
      :value: False



   .. py:attribute:: patterns
      :value: (('*.css', ('(?P<matched>url\\([\'"]{0,1}\\s*(?P<url>.*?)["\']{0,1}\\))',...



   .. py:attribute:: keep_intermediate_files
      :value: True



   .. py:attribute:: hashed_files


   .. py:method:: file_hash(name, content=None)

      Return a hash of the file with the given name and optional content.



   .. py:method:: hashed_name(name, content=None, filename=None)


   .. py:method:: url(name, force=False)

      Return the non-hashed URL in DEBUG mode.



   .. py:method:: url_converter(name, hashed_files, template=None)

      Return the custom URL converter for the given file name.



   .. py:method:: post_process(paths, dry_run=False, **options)

      Post process the given dictionary of files (called from collectstatic).

      Processing is actually two separate operations:

      1. renaming files to include a hash of their content for cache-busting,
         and copying those files to the target storage.
      2. adjusting files which contain references to other files so they
         refer to the cache-busting filenames.

      If either of these are performed on a file, then that file is considered
      post-processed.



   .. py:method:: clean_name(name)


   .. py:method:: hash_key(name)


   .. py:method:: stored_name(name)


.. py:class:: ManifestFilesMixin(*args, manifest_storage=None, **kwargs)

   Bases: :py:obj:`HashedFilesMixin`


   .. py:attribute:: manifest_version
      :value: '1.1'



   .. py:attribute:: manifest_name
      :value: 'staticfiles.json'



   .. py:attribute:: manifest_strict
      :value: True



   .. py:attribute:: keep_intermediate_files
      :value: False



   .. py:attribute:: manifest_storage
      :value: None



   .. py:method:: read_manifest()


   .. py:method:: load_manifest()


   .. py:method:: post_process(*args, **kwargs)

      Post process the given dictionary of files (called from collectstatic).

      Processing is actually two separate operations:

      1. renaming files to include a hash of their content for cache-busting,
         and copying those files to the target storage.
      2. adjusting files which contain references to other files so they
         refer to the cache-busting filenames.

      If either of these are performed on a file, then that file is considered
      post-processed.



   .. py:method:: save_manifest()


   .. py:method:: stored_name(name)


.. py:class:: ManifestStaticFilesStorage(*args, manifest_storage=None, **kwargs)

   Bases: :py:obj:`ManifestFilesMixin`, :py:obj:`StaticFilesStorage`


   A static file system storage backend which also saves
   hashed copies of the files it saves.


.. py:class:: ConfiguredStorage

   Bases: :py:obj:`django.utils.functional.LazyObject`


   A wrapper for another class that can be used to delay instantiation of the
   wrapped class.

   By subclassing, you have the opportunity to intercept and alter the
   instantiation. If you don't need to do that, use SimpleLazyObject.


.. py:data:: staticfiles_storage

