django.contrib.gis.gdal.geometries
==================================

.. py:module:: django.contrib.gis.gdal.geometries

.. autoapi-nested-parse::

   The OGRGeometry is a wrapper for using the OGR Geometry class
   (see https://gdal.org/api/ogrgeometry_cpp.html#_CPPv411OGRGeometry).
   OGRGeometry may be instantiated when reading geometries from OGR Data Sources
   (e.g. SHP files), or when given OGC WKT (a string).

   While the 'full' API is not present yet, the API is "pythonic" unlike
   the traditional and "next-generation" OGR Python bindings.  One major
   advantage OGR Geometries have over their GEOS counterparts is support
   for spatial reference systems and their transformation.

   .. rubric:: Example

   >>> from django.contrib.gis.gdal import OGRGeometry, OGRGeomType, SpatialReference
   >>> wkt1, wkt2 = 'POINT(-90 30)', 'POLYGON((0 0, 5 0, 5 5, 0 5)'
   >>> pnt = OGRGeometry(wkt1)
   >>> print(pnt)
   POINT (-90 30)
   >>> mpnt = OGRGeometry(OGRGeomType('MultiPoint'), SpatialReference('WGS84'))
   >>> mpnt.add(wkt1)
   >>> mpnt.add(wkt1)
   >>> print(mpnt)
   MULTIPOINT (-90 30,-90 30)
   >>> print(mpnt.srs.name)
   WGS 84
   >>> print(mpnt.srs.proj)
   +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs
   >>> mpnt.transform(SpatialReference('NAD27'))
   >>> print(mpnt.proj)
   +proj=longlat +ellps=clrk66 +datum=NAD27 +no_defs
   >>> print(mpnt)
   MULTIPOINT (-89.99993037860248 29.99979788655764,-89.99993037860248 29.99979788655764)

   The OGRGeomType class is to make it easy to specify an OGR geometry type:
   >>> from django.contrib.gis.gdal import OGRGeomType
   >>> gt1 = OGRGeomType(3) # Using an integer for the type
   >>> gt2 = OGRGeomType('Polygon') # Using a string
   >>> gt3 = OGRGeomType('POLYGON') # It's case-insensitive
   >>> print(gt1 == 3, gt1 == 'Polygon') # Equivalence works w/non-OGRGeomType objects
   True True



Attributes
----------

.. autoapisummary::

   django.contrib.gis.gdal.geometries.GEO_CLASSES


Classes
-------

.. autoapisummary::

   django.contrib.gis.gdal.geometries.OGRGeometry
   django.contrib.gis.gdal.geometries.Point
   django.contrib.gis.gdal.geometries.LineString
   django.contrib.gis.gdal.geometries.LinearRing
   django.contrib.gis.gdal.geometries.Polygon
   django.contrib.gis.gdal.geometries.GeometryCollection
   django.contrib.gis.gdal.geometries.MultiPoint
   django.contrib.gis.gdal.geometries.MultiLineString
   django.contrib.gis.gdal.geometries.MultiPolygon


Module Contents
---------------

.. py:class:: OGRGeometry(geom_input, srs=None)

   Bases: :py:obj:`django.contrib.gis.gdal.base.GDALBase`


   Encapsulate an OGR geometry.


   .. py:attribute:: destructor


   .. py:attribute:: ptr


   .. py:method:: from_bbox(bbox)
      :classmethod:


      Construct a Polygon from a bounding box (4-tuple).



   .. py:method:: from_json(geom_input)
      :staticmethod:



   .. py:method:: from_gml(gml_string)
      :classmethod:



   .. py:property:: dimension

      Return 0 for points, 1 for lines, and 2 for surfaces.


   .. py:attribute:: coord_dim


   .. py:property:: geom_count

      Return the number of elements in this Geometry.


   .. py:property:: point_count

      Return the number of Points in this Geometry.


   .. py:property:: num_points

      Alias for `point_count` (same name method in GEOS API.)


   .. py:property:: num_coords

      Alias for `point_count`.


   .. py:property:: geom_type

      Return the Type for this Geometry.


   .. py:property:: geom_name

      Return the Name of this Geometry.


   .. py:property:: area

      Return the area for a LinearRing, Polygon, or MultiPolygon; 0 otherwise.


   .. py:property:: envelope

      Return the envelope for this Geometry.


   .. py:property:: empty


   .. py:property:: extent

      Return the envelope as a 4-tuple, instead of as an Envelope object.


   .. py:attribute:: srs


   .. py:attribute:: srid


   .. py:property:: geos

      Return a GEOSGeometry object from this OGRGeometry.


   .. py:property:: gml

      Return the GML representation of the Geometry.


   .. py:property:: hex

      Return the hexadecimal representation of the WKB (a string).


   .. py:property:: json

      Return the GeoJSON representation of this Geometry.


   .. py:attribute:: geojson


   .. py:property:: kml

      Return the KML representation of the Geometry.


   .. py:property:: wkb_size

      Return the size of the WKB buffer.


   .. py:property:: wkb

      Return the WKB representation of the Geometry.


   .. py:property:: wkt

      Return the WKT representation of the Geometry.


   .. py:property:: ewkt

      Return the EWKT representation of the Geometry.


   .. py:method:: clone()

      Clone this OGR Geometry.



   .. py:method:: close_rings()

      If there are any rings within this geometry that have not been
      closed, this routine will do so by adding the starting point at the
      end.



   .. py:method:: transform(coord_trans, clone=False)

      Transform this geometry to a different spatial reference system.
      May take a CoordTransform object, a SpatialReference object, string
      WKT or PROJ, and/or an integer SRID.  By default, return nothing
      and transform the geometry in-place. However, if the `clone` keyword is
      set, return a transformed clone of this geometry.



   .. py:method:: intersects(other)

      Return True if this geometry intersects with the other.



   .. py:method:: equals(other)

      Return True if this geometry is equivalent to the other.



   .. py:method:: disjoint(other)

      Return True if this geometry and the other are spatially disjoint.



   .. py:method:: touches(other)

      Return True if this geometry touches the other.



   .. py:method:: crosses(other)

      Return True if this geometry crosses the other.



   .. py:method:: within(other)

      Return True if this geometry is within the other.



   .. py:method:: contains(other)

      Return True if this geometry contains the other.



   .. py:method:: overlaps(other)

      Return True if this geometry overlaps the other.



   .. py:property:: boundary

      Return the boundary of this geometry.


   .. py:property:: convex_hull

      Return the smallest convex Polygon that contains all the points in
      this Geometry.


   .. py:method:: difference(other)

      Return a new geometry consisting of the region which is the difference
      of this geometry and the other.



   .. py:method:: intersection(other)

      Return a new geometry consisting of the region of intersection of this
      geometry and the other.



   .. py:method:: sym_difference(other)

      Return a new geometry which is the symmetric difference of this
      geometry and the other.



   .. py:method:: union(other)

      Return a new geometry consisting of the region which is the union of
      this geometry and the other.



.. py:class:: Point(geom_input, srs=None)

   Bases: :py:obj:`OGRGeometry`


   Encapsulate an OGR geometry.


   .. py:property:: x

      Return the X coordinate for this Point.


   .. py:property:: y

      Return the Y coordinate for this Point.


   .. py:property:: z

      Return the Z coordinate for this Point.


   .. py:property:: tuple

      Return the tuple of this point.


   .. py:attribute:: coords


.. py:class:: LineString(geom_input, srs=None)

   Bases: :py:obj:`OGRGeometry`


   Encapsulate an OGR geometry.


   .. py:property:: tuple

      Return the tuple representation of this LineString.


   .. py:attribute:: coords


   .. py:property:: x

      Return the X coordinates in a list.


   .. py:property:: y

      Return the Y coordinates in a list.


   .. py:property:: z

      Return the Z coordinates in a list.


.. py:class:: LinearRing(geom_input, srs=None)

   Bases: :py:obj:`LineString`


   Encapsulate an OGR geometry.


.. py:class:: Polygon(geom_input, srs=None)

   Bases: :py:obj:`OGRGeometry`


   Encapsulate an OGR geometry.


   .. py:property:: shell

      Return the shell of this Polygon.


   .. py:attribute:: exterior_ring


   .. py:property:: tuple

      Return a tuple of LinearRing coordinate tuples.


   .. py:attribute:: coords


   .. py:property:: point_count

      Return the number of Points in this Polygon.


   .. py:property:: centroid

      Return the centroid (a Point) of this Polygon.


.. py:class:: GeometryCollection(geom_input, srs=None)

   Bases: :py:obj:`OGRGeometry`


   The Geometry Collection class.


   .. py:method:: add(geom)

      Add the geometry to this Geometry Collection.



   .. py:property:: point_count

      Return the number of Points in this Geometry Collection.


   .. py:property:: tuple

      Return a tuple representation of this Geometry Collection.


   .. py:attribute:: coords


.. py:class:: MultiPoint(geom_input, srs=None)

   Bases: :py:obj:`GeometryCollection`


   The Geometry Collection class.


.. py:class:: MultiLineString(geom_input, srs=None)

   Bases: :py:obj:`GeometryCollection`


   The Geometry Collection class.


.. py:class:: MultiPolygon(geom_input, srs=None)

   Bases: :py:obj:`GeometryCollection`


   The Geometry Collection class.


.. py:data:: GEO_CLASSES

