django.views.decorators.http
============================

.. py:module:: django.views.decorators.http

.. autoapi-nested-parse::

   Decorators for views based on HTTP headers.



Attributes
----------

.. autoapisummary::

   django.views.decorators.http.conditional_page
   django.views.decorators.http.require_GET
   django.views.decorators.http.require_POST
   django.views.decorators.http.require_safe


Functions
---------

.. autoapisummary::

   django.views.decorators.http.require_http_methods
   django.views.decorators.http.condition
   django.views.decorators.http.etag
   django.views.decorators.http.last_modified


Module Contents
---------------

.. py:data:: conditional_page

.. py:function:: require_http_methods(request_method_list)

   Decorator to make a view only accept particular request methods.  Usage::

       @require_http_methods(["GET", "POST"])
       def my_view(request):
           # I can assume now that only GET or POST requests make it this far
           # ...

   Note that request methods should be in uppercase.


.. py:data:: require_GET

.. py:data:: require_POST

.. py:data:: require_safe

.. py:function:: condition(etag_func=None, last_modified_func=None)

   Decorator to support conditional retrieval (or change) for a view
   function.

   The parameters are callables to compute the ETag and last modified time for
   the requested resource, respectively. The callables are passed the same
   parameters as the view itself. The ETag function should return a string (or
   None if the resource doesn't exist), while the last_modified function
   should return a datetime object (or None if the resource doesn't exist).

   The ETag function should return a complete ETag, including quotes (e.g.
   '"etag"'), since that's the only way to distinguish between weak and strong
   ETags. If an unquoted ETag is returned (e.g. 'etag'), it will be converted
   to a strong ETag by adding quotes.

   This decorator will either pass control to the wrapped view function or
   return an HTTP 304 response (unmodified) or 412 response (precondition
   failed), depending upon the request method. In either case, the decorator
   will add the generated ETag and Last-Modified headers to the response if
   the headers aren't already set and if the request's method is safe.


.. py:function:: etag(etag_func)

.. py:function:: last_modified(last_modified_func)

