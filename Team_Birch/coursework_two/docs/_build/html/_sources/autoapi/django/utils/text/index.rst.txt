django.utils.text
=================

.. py:module:: django.utils.text


Attributes
----------

.. autoapisummary::

   django.utils.text.re_words
   django.utils.text.re_chars
   django.utils.text.re_tag
   django.utils.text.re_newlines
   django.utils.text.re_camel_case
   django.utils.text.smart_split_re
   django.utils.text.format_lazy


Classes
-------

.. autoapisummary::

   django.utils.text.Truncator
   django.utils.text.StreamingBuffer


Functions
---------

.. autoapisummary::

   django.utils.text.capfirst
   django.utils.text.wrap
   django.utils.text.get_valid_filename
   django.utils.text.get_text_list
   django.utils.text.normalize_newlines
   django.utils.text.phone2numeric
   django.utils.text.compress_string
   django.utils.text.compress_sequence
   django.utils.text.smart_split
   django.utils.text.unescape_string_literal
   django.utils.text.slugify
   django.utils.text.camel_case_to_spaces


Module Contents
---------------

.. py:function:: capfirst(x)

   Capitalize the first letter of a string.


.. py:data:: re_words

.. py:data:: re_chars

.. py:data:: re_tag

.. py:data:: re_newlines

.. py:data:: re_camel_case

.. py:function:: wrap(text, width)

   A word-wrap function that preserves existing line breaks. Expects that
   existing line breaks are posix newlines.

   Preserve all white space except added line breaks consume the space on
   which they break the line.

   Don't wrap long words, thus the output text may have lines longer than
   ``width``.


.. py:class:: Truncator(text)

   Bases: :py:obj:`django.utils.functional.SimpleLazyObject`


   An object used to truncate text, either by characters or words.

   When truncating HTML text (either chars or words), input will be limited to
   at most `MAX_LENGTH_HTML` characters.


   .. py:attribute:: MAX_LENGTH_HTML
      :value: 5000000



   .. py:method:: add_truncation_text(text, truncate=None)


   .. py:method:: chars(num, truncate=None, html=False)

      Return the text truncated to be no longer than the specified number
      of characters.

      `truncate` specifies what should be used to notify that the string has
      been truncated, defaulting to a translatable string of an ellipsis.



   .. py:method:: words(num, truncate=None, html=False)

      Truncate a string after a certain number of words. `truncate` specifies
      what should be used to notify that the string has been truncated,
      defaulting to ellipsis.



.. py:function:: get_valid_filename(name)

   Return the given string converted to a string that can be used for a clean
   filename. Remove leading and trailing spaces; convert other spaces to
   underscores; and remove anything that is not an alphanumeric, dash,
   underscore, or dot.
   >>> get_valid_filename("john's portrait in 2004.jpg")
   'johns_portrait_in_2004.jpg'


.. py:function:: get_text_list(list_, last_word=gettext_lazy('or'))

   >>> get_text_list(['a', 'b', 'c', 'd'])
   'a, b, c or d'
   >>> get_text_list(['a', 'b', 'c'], 'and')
   'a, b and c'
   >>> get_text_list(['a', 'b'], 'and')
   'a and b'
   >>> get_text_list(['a'])
   'a'
   >>> get_text_list([])
   ''


.. py:function:: normalize_newlines(text)

   Normalize CRLF and CR newlines to just LF.


.. py:function:: phone2numeric(phone)

   Convert a phone number with letters into its numeric equivalent.


.. py:function:: compress_string(s, *, max_random_bytes=None)

.. py:class:: StreamingBuffer

   Bases: :py:obj:`io.BytesIO`


   Buffered I/O implementation using an in-memory bytes buffer.


   .. py:method:: read()

      Read at most size bytes, returned as a bytes object.

      If the size argument is negative, read until EOF is reached.
      Return an empty bytes object at EOF.



.. py:function:: compress_sequence(sequence, *, max_random_bytes=None)

.. py:data:: smart_split_re

.. py:function:: smart_split(text)

   Generator that splits a string by spaces, leaving quoted phrases together.
   Supports both single and double quotes, and supports escaping quotes with
   backslashes. In the output, strings will keep their initial and trailing
   quote marks and escaped quotes will remain escaped (the results can then
   be further processed with unescape_string_literal()).

   >>> list(smart_split(r'This is "a person\'s" test.'))
   ['This', 'is', '"a person\\\'s"', 'test.']
   >>> list(smart_split(r"Another 'person\'s' test."))
   ['Another', "'person\\'s'", 'test.']
   >>> list(smart_split(r'A "\"funky\" style" test.'))
   ['A', '"\\"funky\\" style"', 'test.']


.. py:function:: unescape_string_literal(s)

   Convert quoted string literals to unquoted strings with escaped quotes and
   backslashes unquoted::

       >>> unescape_string_literal('"abc"')
       'abc'
       >>> unescape_string_literal("'abc'")
       'abc'
       >>> unescape_string_literal('"a \"bc\""')
       'a "bc"'
       >>> unescape_string_literal("'\'ab\' c'")
       "'ab' c"


.. py:function:: slugify(value, allow_unicode=False)

   Convert to ASCII if 'allow_unicode' is False. Convert spaces or repeated
   dashes to single dashes. Remove characters that aren't alphanumerics,
   underscores, or hyphens. Convert to lowercase. Also strip leading and
   trailing whitespace, dashes, and underscores.


.. py:function:: camel_case_to_spaces(value)

   Split CamelCase and convert to lowercase. Strip surrounding whitespace.


.. py:data:: format_lazy

