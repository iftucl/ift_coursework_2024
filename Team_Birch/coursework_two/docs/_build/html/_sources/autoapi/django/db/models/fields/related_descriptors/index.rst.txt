django.db.models.fields.related_descriptors
===========================================

.. py:module:: django.db.models.fields.related_descriptors

.. autoapi-nested-parse::

   Accessors for related objects.

   When a field defines a relation between two models, each model class provides
   an attribute to access related instances of the other model class (unless the
   reverse accessor has been disabled with related_name='+').

   Accessors are implemented as descriptors in order to customize access and
   assignment. This module defines the descriptor classes.

   Forward accessors follow foreign keys. Reverse accessors trace them back. For
   example, with the following models::

       class Parent(Model):
           pass

       class Child(Model):
           parent = ForeignKey(Parent, related_name='children')

    ``child.parent`` is a forward many-to-one relation. ``parent.children`` is a
   reverse many-to-one relation.

   There are three types of relations (many-to-one, one-to-one, and many-to-many)
   and two directions (forward and reverse) for a total of six combinations.

   1. Related instance on the forward side of a many-to-one relation:
      ``ForwardManyToOneDescriptor``.

      Uniqueness of foreign key values is irrelevant to accessing the related
      instance, making the many-to-one and one-to-one cases identical as far as
      the descriptor is concerned. The constraint is checked upstream (unicity
      validation in forms) or downstream (unique indexes in the database).

   2. Related instance on the forward side of a one-to-one
      relation: ``ForwardOneToOneDescriptor``.

      It avoids querying the database when accessing the parent link field in
      a multi-table inheritance scenario.

   3. Related instance on the reverse side of a one-to-one relation:
      ``ReverseOneToOneDescriptor``.

      One-to-one relations are asymmetrical, despite the apparent symmetry of the
      name, because they're implemented in the database with a foreign key from
      one table to another. As a consequence ``ReverseOneToOneDescriptor`` is
      slightly different from ``ForwardManyToOneDescriptor``.

   4. Related objects manager for related instances on the reverse side of a
      many-to-one relation: ``ReverseManyToOneDescriptor``.

      Unlike the previous two classes, this one provides access to a collection
      of objects. It returns a manager rather than an instance.

   5. Related objects manager for related instances on the forward or reverse
      sides of a many-to-many relation: ``ManyToManyDescriptor``.

      Many-to-many relations are symmetrical. The syntax of Django models
      requires declaring them on one side but that's an implementation detail.
      They could be declared on the other side without any change in behavior.
      Therefore the forward and reverse descriptors can be the same.

      If you're looking for ``ForwardManyToManyDescriptor`` or
      ``ReverseManyToManyDescriptor``, use ``ManyToManyDescriptor`` instead.



Classes
-------

.. autoapisummary::

   django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute
   django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor
   django.db.models.fields.related_descriptors.ForwardOneToOneDescriptor
   django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor
   django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor
   django.db.models.fields.related_descriptors.ManyToManyDescriptor


Functions
---------

.. autoapisummary::

   django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager
   django.db.models.fields.related_descriptors.create_forward_many_to_many_manager


Module Contents
---------------

.. py:class:: ForeignKeyDeferredAttribute(field)

   Bases: :py:obj:`django.db.models.query_utils.DeferredAttribute`


   A wrapper for a deferred-loading field. When the value is read from this
   object the first time, the query is executed.


.. py:class:: ForwardManyToOneDescriptor(field_with_rel)

   Accessor to the related object on the forward side of a many-to-one or
   one-to-one (via ForwardOneToOneDescriptor subclass) relation.

   In the example::

       class Child(Model):
           parent = ForeignKey(Parent, related_name='children')

   ``Child.parent`` is a ``ForwardManyToOneDescriptor`` instance.


   .. py:attribute:: field


   .. py:method:: RelatedObjectDoesNotExist()


   .. py:method:: is_cached(instance)


   .. py:method:: get_queryset(**hints)


   .. py:method:: get_prefetch_queryset(instances, queryset=None)


   .. py:method:: get_object(instance)


.. py:class:: ForwardOneToOneDescriptor(field_with_rel)

   Bases: :py:obj:`ForwardManyToOneDescriptor`


   Accessor to the related object on the forward side of a one-to-one relation.

   In the example::

       class Restaurant(Model):
           place = OneToOneField(Place, related_name='restaurant')

   ``Restaurant.place`` is a ``ForwardOneToOneDescriptor`` instance.


   .. py:method:: get_object(instance)


.. py:class:: ReverseOneToOneDescriptor(related)

   Accessor to the related object on the reverse side of a one-to-one
   relation.

   In the example::

       class Restaurant(Model):
           place = OneToOneField(Place, related_name='restaurant')

   ``Place.restaurant`` is a ``ReverseOneToOneDescriptor`` instance.


   .. py:attribute:: related


   .. py:method:: RelatedObjectDoesNotExist()


   .. py:method:: is_cached(instance)


   .. py:method:: get_queryset(**hints)


   .. py:method:: get_prefetch_queryset(instances, queryset=None)


.. py:class:: ReverseManyToOneDescriptor(rel)

   Accessor to the related objects manager on the reverse side of a
   many-to-one relation.

   In the example::

       class Child(Model):
           parent = ForeignKey(Parent, related_name='children')

   ``Parent.children`` is a ``ReverseManyToOneDescriptor`` instance.

   Most of the implementation is delegated to a dynamically defined manager
   class built by ``create_forward_many_to_many_manager()`` defined below.


   .. py:attribute:: rel


   .. py:attribute:: field


   .. py:method:: related_manager_cls()


.. py:function:: create_reverse_many_to_one_manager(superclass, rel)

   Create a manager for the reverse side of a many-to-one relation.

   This manager subclasses another manager, generally the default manager of
   the related model, and adds behaviors specific to many-to-one relations.


.. py:class:: ManyToManyDescriptor(rel, reverse=False)

   Bases: :py:obj:`ReverseManyToOneDescriptor`


   Accessor to the related objects manager on the forward and reverse sides of
   a many-to-many relation.

   In the example::

       class Pizza(Model):
           toppings = ManyToManyField(Topping, related_name='pizzas')

   ``Pizza.toppings`` and ``Topping.pizzas`` are ``ManyToManyDescriptor``
   instances.

   Most of the implementation is delegated to a dynamically defined manager
   class built by ``create_forward_many_to_many_manager()`` defined below.


   .. py:attribute:: reverse
      :value: False



   .. py:property:: through


   .. py:method:: related_manager_cls()


.. py:function:: create_forward_many_to_many_manager(superclass, rel, reverse)

   Create a manager for the either side of a many-to-many relation.

   This manager subclasses another manager, generally the default manager of
   the related model, and adds behaviors specific to many-to-many relations.


