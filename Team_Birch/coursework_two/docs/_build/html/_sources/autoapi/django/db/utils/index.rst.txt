django.db.utils
===============

.. py:module:: django.db.utils


Attributes
----------

.. autoapisummary::

   django.db.utils.DEFAULT_DB_ALIAS
   django.db.utils.DJANGO_VERSION_PICKLE_KEY


Exceptions
----------

.. autoapisummary::

   django.db.utils.Error
   django.db.utils.InterfaceError
   django.db.utils.DatabaseError
   django.db.utils.DataError
   django.db.utils.OperationalError
   django.db.utils.IntegrityError
   django.db.utils.InternalError
   django.db.utils.ProgrammingError
   django.db.utils.NotSupportedError


Classes
-------

.. autoapisummary::

   django.db.utils.DatabaseErrorWrapper
   django.db.utils.ConnectionHandler
   django.db.utils.ConnectionRouter


Functions
---------

.. autoapisummary::

   django.db.utils.load_backend


Module Contents
---------------

.. py:data:: DEFAULT_DB_ALIAS
   :value: 'default'


.. py:data:: DJANGO_VERSION_PICKLE_KEY
   :value: '_django_version'


.. py:exception:: Error

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


.. py:exception:: InterfaceError

   Bases: :py:obj:`Error`


   Common base class for all non-exit exceptions.


.. py:exception:: DatabaseError

   Bases: :py:obj:`Error`


   Common base class for all non-exit exceptions.


.. py:exception:: DataError

   Bases: :py:obj:`DatabaseError`


   Common base class for all non-exit exceptions.


.. py:exception:: OperationalError

   Bases: :py:obj:`DatabaseError`


   Common base class for all non-exit exceptions.


.. py:exception:: IntegrityError

   Bases: :py:obj:`DatabaseError`


   Common base class for all non-exit exceptions.


.. py:exception:: InternalError

   Bases: :py:obj:`DatabaseError`


   Common base class for all non-exit exceptions.


.. py:exception:: ProgrammingError

   Bases: :py:obj:`DatabaseError`


   Common base class for all non-exit exceptions.


.. py:exception:: NotSupportedError

   Bases: :py:obj:`DatabaseError`


   Common base class for all non-exit exceptions.


.. py:class:: DatabaseErrorWrapper(wrapper)

   Context manager and decorator that reraises backend-specific database
   exceptions using Django's common wrappers.


   .. py:attribute:: wrapper


.. py:function:: load_backend(backend_name)

   Return a database backend's "base" module given a fully qualified database
   backend name, or raise an error if it doesn't exist.


.. py:class:: ConnectionHandler(settings=None)

   Bases: :py:obj:`django.utils.connection.BaseConnectionHandler`


   .. py:attribute:: settings_name
      :value: 'DATABASES'



   .. py:attribute:: thread_critical
      :value: True



   .. py:method:: configure_settings(databases)


   .. py:property:: databases


   .. py:method:: create_connection(alias)


.. py:class:: ConnectionRouter(routers=None)

   .. py:method:: routers()


   .. py:attribute:: db_for_read


   .. py:attribute:: db_for_write


   .. py:method:: allow_relation(obj1, obj2, **hints)


   .. py:method:: allow_migrate(db, app_label, **hints)


   .. py:method:: allow_migrate_model(db, model)


   .. py:method:: get_migratable_models(app_config, db, include_auto_created=False)

      Return app models allowed to be migrated on provided db.



