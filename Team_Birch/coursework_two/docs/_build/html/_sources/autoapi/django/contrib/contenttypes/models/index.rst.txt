django.contrib.contenttypes.models
==================================

.. py:module:: django.contrib.contenttypes.models


Classes
-------

.. autoapisummary::

   django.contrib.contenttypes.models.ContentTypeManager
   django.contrib.contenttypes.models.ContentType


Module Contents
---------------

.. py:class:: ContentTypeManager(*args, **kwargs)

   Bases: :py:obj:`django.db.models.Manager`


   .. py:attribute:: use_in_migrations
      :value: True



   .. py:method:: get_by_natural_key(app_label, model)


   .. py:method:: get_for_model(model, for_concrete_model=True)

      Return the ContentType object for a given model, creating the
      ContentType if necessary. Lookups are cached so that subsequent lookups
      for the same model don't hit the database.



   .. py:method:: get_for_models(*models, for_concrete_models=True)

      Given *models, return a dictionary mapping {model: content_type}.



   .. py:method:: get_for_id(id)

      Lookup a ContentType by ID. Use the same shared cache as get_for_model
      (though ContentTypes are not created on-the-fly by get_by_id).



   .. py:method:: clear_cache()

      Clear out the content-type cache.



.. py:class:: ContentType

   Bases: :py:obj:`django.db.models.Model`


   .. py:attribute:: app_label


   .. py:attribute:: model


   .. py:attribute:: objects


   .. py:class:: Meta

      .. py:attribute:: verbose_name


      .. py:attribute:: verbose_name_plural


      .. py:attribute:: db_table
         :value: 'django_content_type'



      .. py:attribute:: unique_together
         :value: [['app_label', 'model']]




   .. py:property:: name


   .. py:property:: app_labeled_name


   .. py:method:: model_class()

      Return the model class for this type of content.



   .. py:method:: get_object_for_this_type(**kwargs)

      Return an object of this type for the keyword arguments given.
      Basically, this is a proxy around this object_type's get_object() model
      method. The ObjectNotExist exception, if thrown, will not be caught,
      so code that calls this method should catch it.



   .. py:method:: get_all_objects_for_this_type(**kwargs)

      Return all objects of this type for the keyword arguments given.



   .. py:method:: natural_key()


