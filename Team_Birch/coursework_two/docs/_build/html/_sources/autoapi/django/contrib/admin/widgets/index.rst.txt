django.contrib.admin.widgets
============================

.. py:module:: django.contrib.admin.widgets

.. autoapi-nested-parse::

   Form Widget classes specific to the Django admin site.



Attributes
----------

.. autoapisummary::

   django.contrib.admin.widgets.SELECT2_TRANSLATIONS


Classes
-------

.. autoapisummary::

   django.contrib.admin.widgets.FilteredSelectMultiple
   django.contrib.admin.widgets.BaseAdminDateWidget
   django.contrib.admin.widgets.AdminDateWidget
   django.contrib.admin.widgets.BaseAdminTimeWidget
   django.contrib.admin.widgets.AdminTimeWidget
   django.contrib.admin.widgets.AdminSplitDateTime
   django.contrib.admin.widgets.AdminRadioSelect
   django.contrib.admin.widgets.AdminFileWidget
   django.contrib.admin.widgets.ForeignKeyRawIdWidget
   django.contrib.admin.widgets.ManyToManyRawIdWidget
   django.contrib.admin.widgets.RelatedFieldWidgetWrapper
   django.contrib.admin.widgets.AdminTextareaWidget
   django.contrib.admin.widgets.AdminTextInputWidget
   django.contrib.admin.widgets.AdminEmailInputWidget
   django.contrib.admin.widgets.AdminURLFieldWidget
   django.contrib.admin.widgets.AdminIntegerFieldWidget
   django.contrib.admin.widgets.AdminBigIntegerFieldWidget
   django.contrib.admin.widgets.AdminUUIDInputWidget
   django.contrib.admin.widgets.AutocompleteMixin
   django.contrib.admin.widgets.AutocompleteSelect
   django.contrib.admin.widgets.AutocompleteSelectMultiple


Functions
---------

.. autoapisummary::

   django.contrib.admin.widgets.url_params_from_lookup_dict
   django.contrib.admin.widgets.get_select2_language


Module Contents
---------------

.. py:class:: FilteredSelectMultiple(verbose_name, is_stacked, attrs=None, choices=())

   Bases: :py:obj:`django.forms.SelectMultiple`


   A SelectMultiple with a JavaScript filter interface.

   Note that the resulting JavaScript assumes that the jsi18n
   catalog has been loaded in the page


   .. py:class:: Media

      .. py:attribute:: js
         :value: ['admin/js/core.js', 'admin/js/SelectBox.js', 'admin/js/SelectFilter2.js']




   .. py:attribute:: verbose_name


   .. py:attribute:: is_stacked


   .. py:method:: get_context(name, value, attrs)


.. py:class:: BaseAdminDateWidget(attrs=None, format=None)

   Bases: :py:obj:`django.forms.DateInput`


   Base class for all <input> widgets.


   .. py:class:: Media

      .. py:attribute:: js
         :value: ['admin/js/calendar.js', 'admin/js/admin/DateTimeShortcuts.js']




.. py:class:: AdminDateWidget(attrs=None, format=None)

   Bases: :py:obj:`BaseAdminDateWidget`


   Base class for all <input> widgets.


   .. py:attribute:: template_name
      :value: 'admin/widgets/date.html'



.. py:class:: BaseAdminTimeWidget(attrs=None, format=None)

   Bases: :py:obj:`django.forms.TimeInput`


   Base class for all <input> widgets.


   .. py:class:: Media

      .. py:attribute:: js
         :value: ['admin/js/calendar.js', 'admin/js/admin/DateTimeShortcuts.js']




.. py:class:: AdminTimeWidget(attrs=None, format=None)

   Bases: :py:obj:`BaseAdminTimeWidget`


   Base class for all <input> widgets.


   .. py:attribute:: template_name
      :value: 'admin/widgets/time.html'



.. py:class:: AdminSplitDateTime(attrs=None)

   Bases: :py:obj:`django.forms.SplitDateTimeWidget`


   A SplitDateTime Widget that has some admin-specific styling.


   .. py:attribute:: template_name
      :value: 'admin/widgets/split_datetime.html'



   .. py:method:: get_context(name, value, attrs)


.. py:class:: AdminRadioSelect(attrs=None, choices=())

   Bases: :py:obj:`django.forms.RadioSelect`


   .. py:attribute:: template_name
      :value: 'admin/widgets/radio.html'



.. py:class:: AdminFileWidget(attrs=None)

   Bases: :py:obj:`django.forms.ClearableFileInput`


   Base class for all <input> widgets.


   .. py:attribute:: template_name
      :value: 'admin/widgets/clearable_file_input.html'



.. py:function:: url_params_from_lookup_dict(lookups)

   Convert the type of lookups specified in a ForeignKey limit_choices_to
   attribute to a dictionary of query parameters


.. py:class:: ForeignKeyRawIdWidget(rel, admin_site, attrs=None, using=None)

   Bases: :py:obj:`django.forms.TextInput`


   A Widget for displaying ForeignKeys in the "raw_id" interface rather than
   in a <select> box.


   .. py:attribute:: template_name
      :value: 'admin/widgets/foreign_key_raw_id.html'



   .. py:attribute:: rel


   .. py:attribute:: admin_site


   .. py:attribute:: db
      :value: None



   .. py:method:: get_context(name, value, attrs)


   .. py:method:: base_url_parameters()


   .. py:method:: url_parameters()


   .. py:method:: label_and_url_for_value(value)


.. py:class:: ManyToManyRawIdWidget(rel, admin_site, attrs=None, using=None)

   Bases: :py:obj:`ForeignKeyRawIdWidget`


   A Widget for displaying ManyToMany ids in the "raw_id" interface rather than
   in a <select multiple> box.


   .. py:attribute:: template_name
      :value: 'admin/widgets/many_to_many_raw_id.html'



   .. py:method:: get_context(name, value, attrs)


   .. py:method:: url_parameters()


   .. py:method:: label_and_url_for_value(value)


   .. py:method:: value_from_datadict(data, files, name)

      Given a dictionary of data and this widget's name, return the value
      of this widget or None if it's not provided.



   .. py:method:: format_value(value)

      Return a value as it should appear when rendered in a template.



.. py:class:: RelatedFieldWidgetWrapper(widget, rel, admin_site, can_add_related=None, can_change_related=False, can_delete_related=False, can_view_related=False)

   Bases: :py:obj:`django.forms.Widget`


   This class is a wrapper to a given widget to add the add icon for the
   admin interface.


   .. py:attribute:: template_name
      :value: 'admin/widgets/related_widget_wrapper.html'



   .. py:attribute:: needs_multipart_form


   .. py:attribute:: attrs


   .. py:attribute:: choices


   .. py:attribute:: widget


   .. py:attribute:: rel


   .. py:attribute:: can_add_related
      :value: None



   .. py:attribute:: can_change_related


   .. py:attribute:: can_delete_related


   .. py:attribute:: can_view_related


   .. py:attribute:: admin_site


   .. py:property:: is_hidden


   .. py:property:: media


   .. py:method:: get_related_url(info, action, *args)


   .. py:method:: get_context(name, value, attrs)


   .. py:method:: value_from_datadict(data, files, name)


   .. py:method:: value_omitted_from_data(data, files, name)


   .. py:method:: id_for_label(id_)


.. py:class:: AdminTextareaWidget(attrs=None)

   Bases: :py:obj:`django.forms.Textarea`


.. py:class:: AdminTextInputWidget(attrs=None)

   Bases: :py:obj:`django.forms.TextInput`


   Base class for all <input> widgets.


.. py:class:: AdminEmailInputWidget(attrs=None)

   Bases: :py:obj:`django.forms.EmailInput`


   Base class for all <input> widgets.


.. py:class:: AdminURLFieldWidget(attrs=None, validator_class=URLValidator)

   Bases: :py:obj:`django.forms.URLInput`


   Base class for all <input> widgets.


   .. py:attribute:: template_name
      :value: 'admin/widgets/url.html'



   .. py:attribute:: validator


   .. py:method:: get_context(name, value, attrs)


.. py:class:: AdminIntegerFieldWidget(attrs=None)

   Bases: :py:obj:`django.forms.NumberInput`


   Base class for all <input> widgets.


   .. py:attribute:: class_name
      :value: 'vIntegerField'



.. py:class:: AdminBigIntegerFieldWidget(attrs=None)

   Bases: :py:obj:`AdminIntegerFieldWidget`


   Base class for all <input> widgets.


   .. py:attribute:: class_name
      :value: 'vBigIntegerField'



.. py:class:: AdminUUIDInputWidget(attrs=None)

   Bases: :py:obj:`django.forms.TextInput`


   Base class for all <input> widgets.


.. py:data:: SELECT2_TRANSLATIONS

.. py:function:: get_select2_language()

.. py:class:: AutocompleteMixin(field, admin_site, attrs=None, choices=(), using=None)

   Select widget mixin that loads options from AutocompleteJsonView via AJAX.

   Renders the necessary data attributes for select2 and adds the static form
   media.


   .. py:attribute:: url_name
      :value: '%s:autocomplete'



   .. py:attribute:: field


   .. py:attribute:: admin_site


   .. py:attribute:: db
      :value: None



   .. py:attribute:: choices
      :value: ()



   .. py:attribute:: attrs


   .. py:attribute:: i18n_name


   .. py:method:: get_url()


   .. py:method:: build_attrs(base_attrs, extra_attrs=None)

      Set select2's AJAX attributes.

      Attributes can be set using the html5 data attribute.
      Nested attributes require a double dash as per
      https://select2.org/configuration/data-attributes#nested-subkey-options



   .. py:method:: optgroups(name, value, attr=None)

      Return selected options based on the ModelChoiceIterator.



   .. py:property:: media


.. py:class:: AutocompleteSelect(field, admin_site, attrs=None, choices=(), using=None)

   Bases: :py:obj:`AutocompleteMixin`, :py:obj:`django.forms.Select`


   Select widget mixin that loads options from AutocompleteJsonView via AJAX.

   Renders the necessary data attributes for select2 and adds the static form
   media.


.. py:class:: AutocompleteSelectMultiple(field, admin_site, attrs=None, choices=(), using=None)

   Bases: :py:obj:`AutocompleteMixin`, :py:obj:`django.forms.SelectMultiple`


   Select widget mixin that loads options from AutocompleteJsonView via AJAX.

   Renders the necessary data attributes for select2 and adds the static form
   media.


