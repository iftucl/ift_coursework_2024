django.db.models.sql.subqueries
===============================

.. py:module:: django.db.models.sql.subqueries

.. autoapi-nested-parse::

   Query subclasses which provide extra functionality beyond simple data retrieval.



Classes
-------

.. autoapisummary::

   django.db.models.sql.subqueries.DeleteQuery
   django.db.models.sql.subqueries.UpdateQuery
   django.db.models.sql.subqueries.InsertQuery
   django.db.models.sql.subqueries.AggregateQuery


Module Contents
---------------

.. py:class:: DeleteQuery(model, alias_cols=True)

   Bases: :py:obj:`django.db.models.sql.query.Query`


   A DELETE SQL query.


   .. py:attribute:: compiler
      :value: 'SQLDeleteCompiler'



   .. py:method:: do_query(table, where, using)


   .. py:method:: delete_batch(pk_list, using)

      Set up and execute delete queries for all the objects in pk_list.

      More than one physical query may be executed if there are a
      lot of values in pk_list.



.. py:class:: UpdateQuery(*args, **kwargs)

   Bases: :py:obj:`django.db.models.sql.query.Query`


   An UPDATE SQL query.


   .. py:attribute:: compiler
      :value: 'SQLUpdateCompiler'



   .. py:method:: clone()

      Return a copy of the current Query. A lightweight alternative to
      deepcopy().



   .. py:method:: update_batch(pk_list, values, using)


   .. py:method:: add_update_values(values)

      Convert a dictionary of field name to value mappings into an update
      query. This is the entry point for the public update() method on
      querysets.



   .. py:method:: add_update_fields(values_seq)

      Append a sequence of (field, model, value) triples to the internal list
      that will be used to generate the UPDATE query. Might be more usefully
      called add_update_targets() to hint at the extra information here.



   .. py:method:: add_related_update(model, field, value)

      Add (name, value) to an update query for an ancestor model.

      Update are coalesced so that only one update query per ancestor is run.



   .. py:method:: get_related_updates()

      Return a list of query objects: one for each update required to an
      ancestor model. Each query will have the same filtering conditions as
      the current query but will only update a single table.



.. py:class:: InsertQuery(*args, on_conflict=None, update_fields=None, unique_fields=None, **kwargs)

   Bases: :py:obj:`django.db.models.sql.query.Query`


   A single SQL query.


   .. py:attribute:: compiler
      :value: 'SQLInsertCompiler'



   .. py:attribute:: fields
      :value: []



   .. py:attribute:: objs
      :value: []



   .. py:attribute:: on_conflict
      :value: None



   .. py:attribute:: update_fields
      :value: []



   .. py:attribute:: unique_fields
      :value: []



   .. py:method:: insert_values(fields, objs, raw=False)


.. py:class:: AggregateQuery(model, inner_query)

   Bases: :py:obj:`django.db.models.sql.query.Query`


   Take another query as a parameter to the FROM clause and only select the
   elements in the provided list.


   .. py:attribute:: compiler
      :value: 'SQLAggregateCompiler'



   .. py:attribute:: inner_query


