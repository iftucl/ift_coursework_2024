django.contrib.admindocs.views
==============================

.. py:module:: django.contrib.admindocs.views


Attributes
----------

.. autoapisummary::

   django.contrib.admindocs.views.MODEL_METHODS_EXCLUDE


Classes
-------

.. autoapisummary::

   django.contrib.admindocs.views.BaseAdminDocsView
   django.contrib.admindocs.views.BookmarkletsView
   django.contrib.admindocs.views.TemplateTagIndexView
   django.contrib.admindocs.views.TemplateFilterIndexView
   django.contrib.admindocs.views.ViewIndexView
   django.contrib.admindocs.views.ViewDetailView
   django.contrib.admindocs.views.ModelIndexView
   django.contrib.admindocs.views.ModelDetailView
   django.contrib.admindocs.views.TemplateDetailView


Functions
---------

.. autoapisummary::

   django.contrib.admindocs.views.get_return_data_type
   django.contrib.admindocs.views.get_readable_field_data_type
   django.contrib.admindocs.views.extract_views_from_urlpatterns
   django.contrib.admindocs.views.simplify_regex


Module Contents
---------------

.. py:data:: MODEL_METHODS_EXCLUDE
   :value: ('_', 'add_', 'delete', 'save', 'set_')


.. py:class:: BaseAdminDocsView

   Bases: :py:obj:`django.views.generic.TemplateView`


   Base view for admindocs views.


   .. py:method:: dispatch(request, *args, **kwargs)


   .. py:method:: get_context_data(**kwargs)


.. py:class:: BookmarkletsView

   Bases: :py:obj:`BaseAdminDocsView`


   Base view for admindocs views.


   .. py:attribute:: template_name
      :value: 'admin_doc/bookmarklets.html'



.. py:class:: TemplateTagIndexView

   Bases: :py:obj:`BaseAdminDocsView`


   Base view for admindocs views.


   .. py:attribute:: template_name
      :value: 'admin_doc/template_tag_index.html'



   .. py:method:: get_context_data(**kwargs)


.. py:class:: TemplateFilterIndexView

   Bases: :py:obj:`BaseAdminDocsView`


   Base view for admindocs views.


   .. py:attribute:: template_name
      :value: 'admin_doc/template_filter_index.html'



   .. py:method:: get_context_data(**kwargs)


.. py:class:: ViewIndexView

   Bases: :py:obj:`BaseAdminDocsView`


   Base view for admindocs views.


   .. py:attribute:: template_name
      :value: 'admin_doc/view_index.html'



   .. py:method:: get_context_data(**kwargs)


.. py:class:: ViewDetailView

   Bases: :py:obj:`BaseAdminDocsView`


   Base view for admindocs views.


   .. py:attribute:: template_name
      :value: 'admin_doc/view_detail.html'



   .. py:method:: get_context_data(**kwargs)


.. py:class:: ModelIndexView

   Bases: :py:obj:`BaseAdminDocsView`


   Base view for admindocs views.


   .. py:attribute:: template_name
      :value: 'admin_doc/model_index.html'



   .. py:method:: get_context_data(**kwargs)


.. py:class:: ModelDetailView

   Bases: :py:obj:`BaseAdminDocsView`


   Base view for admindocs views.


   .. py:attribute:: template_name
      :value: 'admin_doc/model_detail.html'



   .. py:method:: get_context_data(**kwargs)


.. py:class:: TemplateDetailView

   Bases: :py:obj:`BaseAdminDocsView`


   Base view for admindocs views.


   .. py:attribute:: template_name
      :value: 'admin_doc/template_detail.html'



   .. py:method:: get_context_data(**kwargs)


.. py:function:: get_return_data_type(func_name)

   Return a somewhat-helpful data type given a function name


.. py:function:: get_readable_field_data_type(field)

   Return the description for a given field type, if it exists. Fields'
   descriptions can contain format strings, which will be interpolated with
   the values of field.__dict__ before being output.


.. py:function:: extract_views_from_urlpatterns(urlpatterns, base='', namespace=None)

   Return a list of views from a list of urlpatterns.

   Each object in the returned list is a four-tuple:
   (view_func, regex, namespace, name)


.. py:function:: simplify_regex(pattern)

   Clean up urlpattern regexes into something more readable by humans. For
   example, turn "^(?P<sport_slug>\w+)/athletes/(?P<athlete_slug>\w+)/$"
   into "/<sport_slug>/athletes/<athlete_slug>/".


