django.contrib.auth.middleware
==============================

.. py:module:: django.contrib.auth.middleware


Classes
-------

.. autoapisummary::

   django.contrib.auth.middleware.AuthenticationMiddleware
   django.contrib.auth.middleware.RemoteUserMiddleware
   django.contrib.auth.middleware.PersistentRemoteUserMiddleware


Functions
---------

.. autoapisummary::

   django.contrib.auth.middleware.get_user


Module Contents
---------------

.. py:function:: get_user(request)

.. py:class:: AuthenticationMiddleware(get_response)

   Bases: :py:obj:`django.utils.deprecation.MiddlewareMixin`


   .. py:method:: process_request(request)


.. py:class:: RemoteUserMiddleware(get_response)

   Bases: :py:obj:`django.utils.deprecation.MiddlewareMixin`


   Middleware for utilizing web-server-provided authentication.

   If request.user is not authenticated, then this middleware attempts to
   authenticate the username passed in the ``REMOTE_USER`` request header.
   If authentication is successful, the user is automatically logged in to
   persist the user in the session.

   The header used is configurable and defaults to ``REMOTE_USER``.  Subclass
   this class and change the ``header`` attribute if you need to use a
   different header.


   .. py:attribute:: header
      :value: 'REMOTE_USER'



   .. py:attribute:: force_logout_if_no_header
      :value: True



   .. py:method:: process_request(request)


   .. py:method:: clean_username(username, request)

      Allow the backend to clean the username, if the backend defines a
      clean_username method.



.. py:class:: PersistentRemoteUserMiddleware(get_response)

   Bases: :py:obj:`RemoteUserMiddleware`


   Middleware for web-server provided authentication on logon pages.

   Like RemoteUserMiddleware but keeps the user authenticated even if
   the header (``REMOTE_USER``) is not found in the request. Useful
   for setups when the external authentication via ``REMOTE_USER``
   is only expected to happen on some "logon" URL and the rest of
   the application wants to use Django's authentication mechanism.


   .. py:attribute:: force_logout_if_no_header
      :value: False



