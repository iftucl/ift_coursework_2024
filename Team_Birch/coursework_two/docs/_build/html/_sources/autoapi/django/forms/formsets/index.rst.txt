django.forms.formsets
=====================

.. py:module:: django.forms.formsets


Classes
-------

.. autoapisummary::

   django.forms.formsets.BaseFormSet


Functions
---------

.. autoapisummary::

   django.forms.formsets.formset_factory
   django.forms.formsets.all_valid


Module Contents
---------------

.. py:class:: BaseFormSet(data=None, files=None, auto_id='id_%s', prefix=None, initial=None, error_class=ErrorList, form_kwargs=None, error_messages=None)

   Bases: :py:obj:`django.forms.utils.RenderableFormMixin`


   A collection of instances of the same Form class.


   .. py:attribute:: deletion_widget


   .. py:attribute:: ordering_widget


   .. py:attribute:: default_error_messages


   .. py:attribute:: template_name_div
      :value: 'django/forms/formsets/div.html'



   .. py:attribute:: template_name_p
      :value: 'django/forms/formsets/p.html'



   .. py:attribute:: template_name_table
      :value: 'django/forms/formsets/table.html'



   .. py:attribute:: template_name_ul
      :value: 'django/forms/formsets/ul.html'



   .. py:attribute:: is_bound


   .. py:attribute:: prefix
      :value: 'form'



   .. py:attribute:: auto_id
      :value: 'id_%s'



   .. py:attribute:: data


   .. py:attribute:: files


   .. py:attribute:: initial
      :value: None



   .. py:attribute:: form_kwargs


   .. py:attribute:: error_class


   .. py:attribute:: error_messages


   .. py:method:: management_form()

      Return the ManagementForm instance for this FormSet.



   .. py:method:: total_form_count()

      Return the total number of forms in this FormSet.



   .. py:method:: initial_form_count()

      Return the number of forms that are required in this FormSet.



   .. py:method:: forms()

      Instantiate forms at first property access.



   .. py:method:: get_form_kwargs(index)

      Return additional keyword arguments for each individual formset form.

      index will be None if the form being constructed is a new empty
      form.



   .. py:property:: initial_forms

      Return a list of all the initial forms in this formset.


   .. py:property:: extra_forms

      Return a list of all the extra forms in this formset.


   .. py:property:: empty_form


   .. py:property:: cleaned_data

      Return a list of form.cleaned_data dicts for every form in self.forms.


   .. py:property:: deleted_forms

      Return a list of forms that have been marked for deletion.


   .. py:property:: ordered_forms

      Return a list of form in the order specified by the incoming data.
      Raise an AttributeError if ordering is not allowed.


   .. py:method:: get_default_prefix()
      :classmethod:



   .. py:method:: get_deletion_widget()
      :classmethod:



   .. py:method:: get_ordering_widget()
      :classmethod:



   .. py:method:: non_form_errors()

      Return an ErrorList of errors that aren't associated with a particular
      form -- i.e., from formset.clean(). Return an empty ErrorList if there
      are none.



   .. py:property:: errors

      Return a list of form.errors for every form in self.forms.


   .. py:method:: total_error_count()

      Return the number of errors across all forms in the formset.



   .. py:method:: is_valid()

      Return True if every form in self.forms is valid.



   .. py:method:: full_clean()

      Clean all of self.data and populate self._errors and
      self._non_form_errors.



   .. py:method:: clean()

      Hook for doing any extra formset-wide cleaning after Form.clean() has
      been called on every form. Any ValidationError raised by this method
      will not be associated with a particular form; it will be accessible
      via formset.non_form_errors()



   .. py:method:: has_changed()

      Return True if data in any form differs from initial.



   .. py:method:: add_fields(form, index)

      A hook for adding extra fields on to each form instance.



   .. py:method:: add_prefix(index)


   .. py:method:: is_multipart()

      Return True if the formset needs to be multipart, i.e. it
      has FileInput, or False otherwise.



   .. py:property:: media


   .. py:property:: template_name


   .. py:method:: get_context()


.. py:function:: formset_factory(form, formset=BaseFormSet, extra=1, can_order=False, can_delete=False, max_num=None, validate_max=False, min_num=None, validate_min=False, absolute_max=None, can_delete_extra=True, renderer=None)

   Return a FormSet for the given form class.


.. py:function:: all_valid(formsets)

   Validate every formset and return True if all are valid.


