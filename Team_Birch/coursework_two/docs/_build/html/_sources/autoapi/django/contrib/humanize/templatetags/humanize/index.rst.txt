django.contrib.humanize.templatetags.humanize
=============================================

.. py:module:: django.contrib.humanize.templatetags.humanize


Attributes
----------

.. autoapisummary::

   django.contrib.humanize.templatetags.humanize.register
   django.contrib.humanize.templatetags.humanize.intword_converters


Classes
-------

.. autoapisummary::

   django.contrib.humanize.templatetags.humanize.NaturalTimeFormatter


Functions
---------

.. autoapisummary::

   django.contrib.humanize.templatetags.humanize.ordinal
   django.contrib.humanize.templatetags.humanize.intcomma
   django.contrib.humanize.templatetags.humanize.intword
   django.contrib.humanize.templatetags.humanize.apnumber
   django.contrib.humanize.templatetags.humanize.naturalday
   django.contrib.humanize.templatetags.humanize.naturaltime


Module Contents
---------------

.. py:data:: register

.. py:function:: ordinal(value)

   Convert an integer to its ordinal as a string. 1 is '1st', 2 is '2nd',
   3 is '3rd', etc. Works for any integer.


.. py:function:: intcomma(value, use_l10n=True)

   Convert an integer to a string containing commas every three digits.
   For example, 3000 becomes '3,000' and 45000 becomes '45,000'.


.. py:data:: intword_converters

.. py:function:: intword(value)

   Convert a large integer to a friendly text representation. Works best
   for numbers over 1 million. For example, 1000000 becomes '1.0 million',
   1200000 becomes '1.2 million' and '1200000000' becomes '1.2 billion'.


.. py:function:: apnumber(value)

   For numbers 1-9, return the number spelled out. Otherwise, return the
   number. This follows Associated Press style.


.. py:function:: naturalday(value, arg=None)

   For date values that are tomorrow, today or yesterday compared to
   present day return representing string. Otherwise, return a string
   formatted according to settings.DATE_FORMAT.


.. py:function:: naturaltime(value)

   For date and time values show how many seconds, minutes, or hours ago
   compared to current timestamp return representing string.


.. py:class:: NaturalTimeFormatter

   .. py:attribute:: time_strings


   .. py:attribute:: past_substrings


   .. py:attribute:: future_substrings


   .. py:method:: string_for(value)
      :classmethod:



