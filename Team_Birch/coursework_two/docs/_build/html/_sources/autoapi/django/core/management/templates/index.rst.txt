django.core.management.templates
================================

.. py:module:: django.core.management.templates


Classes
-------

.. autoapisummary::

   django.core.management.templates.TemplateCommand


Module Contents
---------------

.. py:class:: TemplateCommand

   Bases: :py:obj:`django.core.management.base.BaseCommand`


   Copy either a Django application layout template or a Django project
   layout template into the specified directory.

   :param style: A color style object (see django.core.management.color).
   :param app_or_project: The string 'app' or 'project'.
   :param name: The name of the application or project.
   :param directory: The directory to which the template should be copied.
   :param options: The additional variables passed to project or app templates


   .. py:attribute:: requires_system_checks
      :value: []



   .. py:attribute:: url_schemes
      :value: ['http', 'https', 'ftp']



   .. py:attribute:: rewrite_template_suffixes
      :value: (('.py-tpl', '.py'),)



   .. py:method:: add_arguments(parser)


   .. py:method:: handle(app_or_project, name, target=None, **options)


   .. py:method:: handle_template(template, subdir)

      Determine where the app or project templates are.
      Use django.__path__[0] as the default because the Django install
      directory isn't known.



   .. py:method:: validate_name(name, name_or_dir='name')


   .. py:method:: download(url)

      Download the given URL and return the file name.



   .. py:method:: splitext(the_path)

      Like os.path.splitext, but takes off .tar, too



   .. py:method:: extract(filename)

      Extract the given file to a temporary directory and return
      the path of the directory with the extracted content.



   .. py:method:: is_url(template)

      Return True if the name looks like a URL.



   .. py:method:: apply_umask(old_path, new_path)


   .. py:method:: make_writeable(filename)

      Make sure that the file is writeable.
      Useful if our source is read-only.



