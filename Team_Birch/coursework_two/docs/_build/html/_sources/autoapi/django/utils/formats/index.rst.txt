django.utils.formats
====================

.. py:module:: django.utils.formats


Attributes
----------

.. autoapisummary::

   django.utils.formats.ISO_INPUT_FORMATS
   django.utils.formats.FORMAT_SETTINGS
   django.utils.formats.get_format_lazy


Functions
---------

.. autoapisummary::

   django.utils.formats.reset_format_cache
   django.utils.formats.iter_format_modules
   django.utils.formats.get_format_modules
   django.utils.formats.get_format
   django.utils.formats.date_format
   django.utils.formats.time_format
   django.utils.formats.number_format
   django.utils.formats.localize
   django.utils.formats.localize_input
   django.utils.formats.sanitize_strftime_format
   django.utils.formats.sanitize_separators


Module Contents
---------------

.. py:data:: ISO_INPUT_FORMATS

.. py:data:: FORMAT_SETTINGS

.. py:function:: reset_format_cache()

   Clear any cached formats.

   This method is provided primarily for testing purposes,
   so that the effects of cached formats can be removed.


.. py:function:: iter_format_modules(lang, format_module_path=None)

   Find format modules.


.. py:function:: get_format_modules(lang=None)

   Return a list of the format modules found.


.. py:function:: get_format(format_type, lang=None, use_l10n=None)

   For a specific format type, return the format for the current
   language (locale). Default to the format in the settings.
   format_type is the name of the format, e.g. 'DATE_FORMAT'.

   If use_l10n is provided and is not None, it forces the value to
   be localized (or not), overriding the value of settings.USE_L10N.


.. py:data:: get_format_lazy

.. py:function:: date_format(value, format=None, use_l10n=None)

   Format a datetime.date or datetime.datetime object using a
   localizable format.

   If use_l10n is provided and is not None, that will force the value to
   be localized (or not), overriding the value of settings.USE_L10N.


.. py:function:: time_format(value, format=None, use_l10n=None)

   Format a datetime.time object using a localizable format.

   If use_l10n is provided and is not None, it forces the value to
   be localized (or not), overriding the value of settings.USE_L10N.


.. py:function:: number_format(value, decimal_pos=None, use_l10n=None, force_grouping=False)

   Format a numeric value using localization settings.

   If use_l10n is provided and is not None, it forces the value to
   be localized (or not), overriding the value of settings.USE_L10N.


.. py:function:: localize(value, use_l10n=None)

   Check if value is a localizable type (date, number...) and return it
   formatted as a string using current locale format.

   If use_l10n is provided and is not None, it forces the value to
   be localized (or not), overriding the value of settings.USE_L10N.


.. py:function:: localize_input(value, default=None)

   Check if an input value is a localizable type and return it
   formatted with the appropriate formatting string of the current locale.


.. py:function:: sanitize_strftime_format(fmt)

   Ensure that certain specifiers are correctly padded with leading zeros.

   For years < 1000 specifiers %C, %F, %G, and %Y don't work as expected for
   strftime provided by glibc on Linux as they don't pad the year or century
   with leading zeros. Support for specifying the padding explicitly is
   available, however, which can be used to fix this issue.

   FreeBSD, macOS, and Windows do not support explicitly specifying the
   padding, but return four digit years (with leading zeros) as expected.

   This function checks whether the %Y produces a correctly padded string and,
   if not, makes the following substitutions:

   - %C → %02C
   - %F → %010F
   - %G → %04G
   - %Y → %04Y

   See https://bugs.python.org/issue13305 for more details.


.. py:function:: sanitize_separators(value)

   Sanitize a value according to the current decimal and
   thousand separator setting. Used with form field input.


