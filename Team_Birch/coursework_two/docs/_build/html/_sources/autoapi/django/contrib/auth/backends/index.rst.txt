django.contrib.auth.backends
============================

.. py:module:: django.contrib.auth.backends


Attributes
----------

.. autoapisummary::

   django.contrib.auth.backends.UserModel


Classes
-------

.. autoapisummary::

   django.contrib.auth.backends.BaseBackend
   django.contrib.auth.backends.ModelBackend
   django.contrib.auth.backends.AllowAllUsersModelBackend
   django.contrib.auth.backends.RemoteUserBackend
   django.contrib.auth.backends.AllowAllUsersRemoteUserBackend


Module Contents
---------------

.. py:data:: UserModel

.. py:class:: BaseBackend

   .. py:method:: authenticate(request, **kwargs)


   .. py:method:: get_user(user_id)


   .. py:method:: get_user_permissions(user_obj, obj=None)


   .. py:method:: get_group_permissions(user_obj, obj=None)


   .. py:method:: get_all_permissions(user_obj, obj=None)


   .. py:method:: has_perm(user_obj, perm, obj=None)


.. py:class:: ModelBackend

   Bases: :py:obj:`BaseBackend`


   Authenticates against settings.AUTH_USER_MODEL.


   .. py:method:: authenticate(request, username=None, password=None, **kwargs)


   .. py:method:: user_can_authenticate(user)

      Reject users with is_active=False. Custom user models that don't have
      that attribute are allowed.



   .. py:method:: get_user_permissions(user_obj, obj=None)

      Return a set of permission strings the user `user_obj` has from their
      `user_permissions`.



   .. py:method:: get_group_permissions(user_obj, obj=None)

      Return a set of permission strings the user `user_obj` has from the
      groups they belong.



   .. py:method:: get_all_permissions(user_obj, obj=None)


   .. py:method:: has_perm(user_obj, perm, obj=None)


   .. py:method:: has_module_perms(user_obj, app_label)

      Return True if user_obj has any permissions in the given app_label.



   .. py:method:: with_perm(perm, is_active=True, include_superusers=True, obj=None)

      Return users that have permission "perm". By default, filter out
      inactive users and include superusers.



   .. py:method:: get_user(user_id)


.. py:class:: AllowAllUsersModelBackend

   Bases: :py:obj:`ModelBackend`


   Authenticates against settings.AUTH_USER_MODEL.


   .. py:method:: user_can_authenticate(user)

      Reject users with is_active=False. Custom user models that don't have
      that attribute are allowed.



.. py:class:: RemoteUserBackend

   Bases: :py:obj:`ModelBackend`


   This backend is to be used in conjunction with the ``RemoteUserMiddleware``
   found in the middleware module of this package, and is used when the server
   is handling authentication outside of Django.

   By default, the ``authenticate`` method creates ``User`` objects for
   usernames that don't already exist in the database.  Subclasses can disable
   this behavior by setting the ``create_unknown_user`` attribute to
   ``False``.


   .. py:attribute:: create_unknown_user
      :value: True



   .. py:method:: authenticate(request, remote_user)

      The username passed as ``remote_user`` is considered trusted. Return
      the ``User`` object with the given username. Create a new ``User``
      object if ``create_unknown_user`` is ``True``.

      Return None if ``create_unknown_user`` is ``False`` and a ``User``
      object with the given username is not found in the database.



   .. py:method:: clean_username(username)

      Perform any cleaning on the "username" prior to using it to get or
      create the user object.  Return the cleaned username.

      By default, return the username unchanged.



   .. py:method:: configure_user(request, user, created=True)

      Configure a user and return the updated user.

      By default, return the user unmodified.



.. py:class:: AllowAllUsersRemoteUserBackend

   Bases: :py:obj:`RemoteUserBackend`


   This backend is to be used in conjunction with the ``RemoteUserMiddleware``
   found in the middleware module of this package, and is used when the server
   is handling authentication outside of Django.

   By default, the ``authenticate`` method creates ``User`` objects for
   usernames that don't already exist in the database.  Subclasses can disable
   this behavior by setting the ``create_unknown_user`` attribute to
   ``False``.


   .. py:method:: user_can_authenticate(user)

      Reject users with is_active=False. Custom user models that don't have
      that attribute are allowed.



