django.db.backends.base.schema
==============================

.. py:module:: django.db.backends.base.schema


Attributes
----------

.. autoapisummary::

   django.db.backends.base.schema.logger


Classes
-------

.. autoapisummary::

   django.db.backends.base.schema.BaseDatabaseSchemaEditor


Module Contents
---------------

.. py:data:: logger

.. py:class:: BaseDatabaseSchemaEditor(connection, collect_sql=False, atomic=True)

   This class and its subclasses are responsible for emitting schema-changing
   statements to the databases - model creation/removal/alteration, field
   renaming, index fiddling, and so on.


   .. py:attribute:: sql_create_table
      :value: 'CREATE TABLE %(table)s (%(definition)s)'



   .. py:attribute:: sql_rename_table
      :value: 'ALTER TABLE %(old_table)s RENAME TO %(new_table)s'



   .. py:attribute:: sql_retablespace_table
      :value: 'ALTER TABLE %(table)s SET TABLESPACE %(new_tablespace)s'



   .. py:attribute:: sql_delete_table
      :value: 'DROP TABLE %(table)s CASCADE'



   .. py:attribute:: sql_create_column
      :value: 'ALTER TABLE %(table)s ADD COLUMN %(column)s %(definition)s'



   .. py:attribute:: sql_alter_column
      :value: 'ALTER TABLE %(table)s %(changes)s'



   .. py:attribute:: sql_alter_column_type
      :value: 'ALTER COLUMN %(column)s TYPE %(type)s%(collation)s'



   .. py:attribute:: sql_alter_column_null
      :value: 'ALTER COLUMN %(column)s DROP NOT NULL'



   .. py:attribute:: sql_alter_column_not_null
      :value: 'ALTER COLUMN %(column)s SET NOT NULL'



   .. py:attribute:: sql_alter_column_default
      :value: 'ALTER COLUMN %(column)s SET DEFAULT %(default)s'



   .. py:attribute:: sql_alter_column_no_default
      :value: 'ALTER COLUMN %(column)s DROP DEFAULT'



   .. py:attribute:: sql_alter_column_no_default_null
      :value: 'ALTER COLUMN %(column)s DROP DEFAULT'



   .. py:attribute:: sql_delete_column
      :value: 'ALTER TABLE %(table)s DROP COLUMN %(column)s CASCADE'



   .. py:attribute:: sql_rename_column
      :value: 'ALTER TABLE %(table)s RENAME COLUMN %(old_column)s TO %(new_column)s'



   .. py:attribute:: sql_update_with_default
      :value: 'UPDATE %(table)s SET %(column)s = %(default)s WHERE %(column)s IS NULL'



   .. py:attribute:: sql_unique_constraint
      :value: 'UNIQUE (%(columns)s)%(deferrable)s'



   .. py:attribute:: sql_check_constraint
      :value: 'CHECK (%(check)s)'



   .. py:attribute:: sql_delete_constraint
      :value: 'ALTER TABLE %(table)s DROP CONSTRAINT %(name)s'



   .. py:attribute:: sql_constraint
      :value: 'CONSTRAINT %(name)s %(constraint)s'



   .. py:attribute:: sql_create_check
      :value: 'ALTER TABLE %(table)s ADD CONSTRAINT %(name)s CHECK (%(check)s)'



   .. py:attribute:: sql_delete_check
      :value: 'ALTER TABLE %(table)s DROP CONSTRAINT %(name)s'



   .. py:attribute:: sql_create_unique
      :value: 'ALTER TABLE %(table)s ADD CONSTRAINT %(name)s UNIQUE (%(columns)s)%(deferrable)s'



   .. py:attribute:: sql_delete_unique
      :value: 'ALTER TABLE %(table)s DROP CONSTRAINT %(name)s'



   .. py:attribute:: sql_create_fk
      :value: 'ALTER TABLE %(table)s ADD CONSTRAINT %(name)s FOREIGN KEY (%(column)s) REFERENCES %(to_table)s...



   .. py:attribute:: sql_create_inline_fk
      :value: None



   .. py:attribute:: sql_create_column_inline_fk
      :value: None



   .. py:attribute:: sql_delete_fk
      :value: 'ALTER TABLE %(table)s DROP CONSTRAINT %(name)s'



   .. py:attribute:: sql_create_index
      :value: 'CREATE INDEX %(name)s ON %(table)s (%(columns)s)%(include)s%(extra)s%(condition)s'



   .. py:attribute:: sql_create_unique_index
      :value: 'CREATE UNIQUE INDEX %(name)s ON %(table)s (%(columns)s)%(include)s%(condition)s'



   .. py:attribute:: sql_rename_index
      :value: 'ALTER INDEX %(old_name)s RENAME TO %(new_name)s'



   .. py:attribute:: sql_delete_index
      :value: 'DROP INDEX %(name)s'



   .. py:attribute:: sql_create_pk
      :value: 'ALTER TABLE %(table)s ADD CONSTRAINT %(name)s PRIMARY KEY (%(columns)s)'



   .. py:attribute:: sql_delete_pk
      :value: 'ALTER TABLE %(table)s DROP CONSTRAINT %(name)s'



   .. py:attribute:: sql_delete_procedure
      :value: 'DROP PROCEDURE %(procedure)s'



   .. py:attribute:: sql_alter_table_comment
      :value: 'COMMENT ON TABLE %(table)s IS %(comment)s'



   .. py:attribute:: sql_alter_column_comment
      :value: 'COMMENT ON COLUMN %(table)s.%(column)s IS %(comment)s'



   .. py:attribute:: connection


   .. py:attribute:: collect_sql
      :value: False



   .. py:attribute:: atomic_migration


   .. py:method:: execute(sql, params=())

      Execute the given SQL statement, with optional parameters.



   .. py:method:: quote_name(name)


   .. py:method:: table_sql(model)

      Take a model and return its table definition.



   .. py:method:: column_sql(model, field, include_default=False)

      Return the column definition for a field. The field must already have
      had set_attributes_from_name() called.



   .. py:method:: skip_default(field)

      Some backends don't accept default values for certain columns types
      (i.e. MySQL longtext and longblob).



   .. py:method:: skip_default_on_alter(field)

      Some backends don't accept default values for certain columns types
      (i.e. MySQL longtext and longblob) in the ALTER COLUMN statement.



   .. py:method:: prepare_default(value)
      :abstractmethod:


      Only used for backends which have requires_literal_defaults feature



   .. py:method:: effective_default(field)

      Return a field's effective database default value.



   .. py:method:: quote_value(value)
      :abstractmethod:


      Return a quoted version of the value so it's safe to use in an SQL
      string. This is not safe against injection from user code; it is
      intended only for use in making SQL scripts or preparing default values
      for particularly tricky backends (defaults are not user-defined, though,
      so this is safe).



   .. py:method:: create_model(model)

      Create a table and any accompanying indexes or unique constraints for
      the given `model`.



   .. py:method:: delete_model(model)

      Delete a model from the database.



   .. py:method:: add_index(model, index)

      Add an index on a model.



   .. py:method:: remove_index(model, index)

      Remove an index from a model.



   .. py:method:: rename_index(model, old_index, new_index)


   .. py:method:: add_constraint(model, constraint)

      Add a constraint to a model.



   .. py:method:: remove_constraint(model, constraint)

      Remove a constraint from a model.



   .. py:method:: alter_unique_together(model, old_unique_together, new_unique_together)

      Deal with a model changing its unique_together. The input
      unique_togethers must be doubly-nested, not the single-nested
      ["foo", "bar"] format.



   .. py:method:: alter_index_together(model, old_index_together, new_index_together)

      Deal with a model changing its index_together. The input
      index_togethers must be doubly-nested, not the single-nested
      ["foo", "bar"] format.



   .. py:method:: alter_db_table(model, old_db_table, new_db_table)

      Rename the table a model points to.



   .. py:method:: alter_db_table_comment(model, old_db_table_comment, new_db_table_comment)


   .. py:method:: alter_db_tablespace(model, old_db_tablespace, new_db_tablespace)

      Move a model's table between tablespaces.



   .. py:method:: add_field(model, field)

      Create a field on a model. Usually involves adding a column, but may
      involve adding a table instead (for M2M fields).



   .. py:method:: remove_field(model, field)

      Remove a field from a model. Usually involves deleting a column,
      but for M2Ms may involve deleting a table.



   .. py:method:: alter_field(model, old_field, new_field, strict=False)

      Allow a field's type, uniqueness, nullability, default, column,
      constraints, etc. to be modified.
      `old_field` is required to compute the necessary changes.
      If `strict` is True, raise errors if the old column does not match
      `old_field` precisely.



   .. py:method:: remove_procedure(procedure_name, param_types=())


