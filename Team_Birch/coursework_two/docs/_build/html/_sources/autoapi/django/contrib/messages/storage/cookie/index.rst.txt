django.contrib.messages.storage.cookie
======================================

.. py:module:: django.contrib.messages.storage.cookie


Classes
-------

.. autoapisummary::

   django.contrib.messages.storage.cookie.MessageEncoder
   django.contrib.messages.storage.cookie.MessageDecoder
   django.contrib.messages.storage.cookie.MessageSerializer
   django.contrib.messages.storage.cookie.CookieStorage


Module Contents
---------------

.. py:class:: MessageEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)

   Bases: :py:obj:`json.JSONEncoder`


   Compactly serialize instances of the ``Message`` class as JSON.


   .. py:attribute:: message_key
      :value: '__json_message'



   .. py:method:: default(obj)

      Implement this method in a subclass such that it returns
      a serializable object for ``o``, or calls the base implementation
      (to raise a ``TypeError``).

      For example, to support arbitrary iterators, you could
      implement default like this::

          def default(self, o):
              try:
                  iterable = iter(o)
              except TypeError:
                  pass
              else:
                  return list(iterable)
              # Let the base class default method raise the TypeError
              return super().default(o)




.. py:class:: MessageDecoder(*, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)

   Bases: :py:obj:`json.JSONDecoder`


   Decode JSON that includes serialized ``Message`` instances.


   .. py:method:: process_messages(obj)


   .. py:method:: decode(s, **kwargs)

      Return the Python representation of ``s`` (a ``str`` instance
      containing a JSON document).




.. py:class:: MessageSerializer

   .. py:method:: dumps(obj)


   .. py:method:: loads(data)


.. py:class:: CookieStorage(*args, **kwargs)

   Bases: :py:obj:`django.contrib.messages.storage.base.BaseStorage`


   Store messages in a cookie.


   .. py:attribute:: cookie_name
      :value: 'messages'



   .. py:attribute:: max_cookie_size
      :value: 2048



   .. py:attribute:: not_finished
      :value: '__messagesnotfinished__'



   .. py:attribute:: key_salt
      :value: 'django.contrib.messages'



   .. py:attribute:: signer


