django.utils.feedgenerator
==========================

.. py:module:: django.utils.feedgenerator

.. autoapi-nested-parse::

   Syndication feed generation library -- used for generating RSS, etc.

   Sample usage:

   >>> from django.utils import feedgenerator
   >>> feed = feedgenerator.Rss201rev2Feed(
   ...     title="Poynter E-Media Tidbits",
   ...     link="http://www.poynter.org/column.asp?id=31",
   ...     description="A group blog by the sharpest minds in online journalism.",
   ...     language="en",
   ... )
   >>> feed.add_item(
   ...     title="Hello",
   ...     link="http://www.holovaty.com/test/",
   ...     description="Testing."
   ... )
   >>> with open('test.rss', 'w') as fp:
   ...     feed.write(fp, 'utf-8')

   For definitions of the different versions of RSS, see:
   https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss



Attributes
----------

.. autoapisummary::

   django.utils.feedgenerator.DefaultFeed


Classes
-------

.. autoapisummary::

   django.utils.feedgenerator.SyndicationFeed
   django.utils.feedgenerator.Enclosure
   django.utils.feedgenerator.RssFeed
   django.utils.feedgenerator.RssUserland091Feed
   django.utils.feedgenerator.Rss201rev2Feed
   django.utils.feedgenerator.Atom1Feed


Functions
---------

.. autoapisummary::

   django.utils.feedgenerator.rfc2822_date
   django.utils.feedgenerator.rfc3339_date
   django.utils.feedgenerator.get_tag_uri


Module Contents
---------------

.. py:function:: rfc2822_date(date)

.. py:function:: rfc3339_date(date)

.. py:function:: get_tag_uri(url, date)

   Create a TagURI.

   See
   https://web.archive.org/web/20110514113830/http://diveintomark.org/archives/2004/05/28/howto-atom-id


.. py:class:: SyndicationFeed(title, link, description, language=None, author_email=None, author_name=None, author_link=None, subtitle=None, categories=None, feed_url=None, feed_copyright=None, feed_guid=None, ttl=None, **kwargs)

   Base class for all syndication feeds. Subclasses should provide write()


   .. py:attribute:: feed


   .. py:attribute:: items
      :value: []



   .. py:method:: add_item(title, link, description, author_email=None, author_name=None, author_link=None, pubdate=None, comments=None, unique_id=None, unique_id_is_permalink=None, categories=(), item_copyright=None, ttl=None, updateddate=None, enclosures=None, **kwargs)

      Add an item to the feed. All args are expected to be strings except
      pubdate and updateddate, which are datetime.datetime objects, and
      enclosures, which is an iterable of instances of the Enclosure class.



   .. py:method:: num_items()


   .. py:method:: root_attributes()

      Return extra attributes to place on the root (i.e. feed/channel) element.
      Called from write().



   .. py:method:: add_root_elements(handler)

      Add elements in the root (i.e. feed/channel) element. Called
      from write().



   .. py:method:: item_attributes(item)

      Return extra attributes to place on each item (i.e. item/entry) element.



   .. py:method:: add_item_elements(handler, item)

      Add elements on each item (i.e. item/entry) element.



   .. py:method:: write(outfile, encoding)
      :abstractmethod:


      Output the feed in the given encoding to outfile, which is a file-like
      object. Subclasses should override this.



   .. py:method:: writeString(encoding)

      Return the feed in the given encoding as a string.



   .. py:method:: latest_post_date()

      Return the latest item's pubdate or updateddate. If no items
      have either of these attributes this return the current UTC date/time.



.. py:class:: Enclosure(url, length, mime_type)

   An RSS enclosure


   .. py:attribute:: url


.. py:class:: RssFeed(title, link, description, language=None, author_email=None, author_name=None, author_link=None, subtitle=None, categories=None, feed_url=None, feed_copyright=None, feed_guid=None, ttl=None, **kwargs)

   Bases: :py:obj:`SyndicationFeed`


   Base class for all syndication feeds. Subclasses should provide write()


   .. py:attribute:: content_type
      :value: 'application/rss+xml; charset=utf-8'



   .. py:method:: write(outfile, encoding)

      Output the feed in the given encoding to outfile, which is a file-like
      object. Subclasses should override this.



   .. py:method:: rss_attributes()


   .. py:method:: write_items(handler)


   .. py:method:: add_root_elements(handler)

      Add elements in the root (i.e. feed/channel) element. Called
      from write().



   .. py:method:: endChannelElement(handler)


.. py:class:: RssUserland091Feed(title, link, description, language=None, author_email=None, author_name=None, author_link=None, subtitle=None, categories=None, feed_url=None, feed_copyright=None, feed_guid=None, ttl=None, **kwargs)

   Bases: :py:obj:`RssFeed`


   Base class for all syndication feeds. Subclasses should provide write()


   .. py:method:: add_item_elements(handler, item)

      Add elements on each item (i.e. item/entry) element.



.. py:class:: Rss201rev2Feed(title, link, description, language=None, author_email=None, author_name=None, author_link=None, subtitle=None, categories=None, feed_url=None, feed_copyright=None, feed_guid=None, ttl=None, **kwargs)

   Bases: :py:obj:`RssFeed`


   Base class for all syndication feeds. Subclasses should provide write()


   .. py:method:: add_item_elements(handler, item)

      Add elements on each item (i.e. item/entry) element.



.. py:class:: Atom1Feed(title, link, description, language=None, author_email=None, author_name=None, author_link=None, subtitle=None, categories=None, feed_url=None, feed_copyright=None, feed_guid=None, ttl=None, **kwargs)

   Bases: :py:obj:`SyndicationFeed`


   Base class for all syndication feeds. Subclasses should provide write()


   .. py:attribute:: content_type
      :value: 'application/atom+xml; charset=utf-8'



   .. py:attribute:: ns
      :value: 'http://www.w3.org/2005/Atom'



   .. py:method:: write(outfile, encoding)

      Output the feed in the given encoding to outfile, which is a file-like
      object. Subclasses should override this.



   .. py:method:: root_attributes()

      Return extra attributes to place on the root (i.e. feed/channel) element.
      Called from write().



   .. py:method:: add_root_elements(handler)

      Add elements in the root (i.e. feed/channel) element. Called
      from write().



   .. py:method:: write_items(handler)


   .. py:method:: add_item_elements(handler, item)

      Add elements on each item (i.e. item/entry) element.



.. py:data:: DefaultFeed

