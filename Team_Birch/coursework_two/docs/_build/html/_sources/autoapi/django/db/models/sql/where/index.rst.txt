django.db.models.sql.where
==========================

.. py:module:: django.db.models.sql.where

.. autoapi-nested-parse::

   Code to manage the creation and SQL rendering of 'where' constraints.



Attributes
----------

.. autoapisummary::

   django.db.models.sql.where.AND
   django.db.models.sql.where.OR
   django.db.models.sql.where.XOR


Classes
-------

.. autoapisummary::

   django.db.models.sql.where.WhereNode
   django.db.models.sql.where.NothingNode
   django.db.models.sql.where.ExtraWhere
   django.db.models.sql.where.SubqueryConstraint


Module Contents
---------------

.. py:data:: AND
   :value: 'AND'


.. py:data:: OR
   :value: 'OR'


.. py:data:: XOR
   :value: 'XOR'


.. py:class:: WhereNode(children=None, connector=None, negated=False)

   Bases: :py:obj:`django.utils.tree.Node`


   An SQL WHERE clause.

   The class is tied to the Query class that created it (in order to create
   the correct SQL).

   A child is usually an expression producing boolean values. Most likely the
   expression is a Lookup instance.

   However, a child could also be any class with as_sql() and either
   relabeled_clone() method or relabel_aliases() and clone() methods and
   contains_aggregate attribute.


   .. py:attribute:: default
      :value: 'AND'



   .. py:attribute:: resolved
      :value: False



   .. py:attribute:: conditional
      :value: True



   .. py:method:: split_having_qualify(negated=False, must_group_by=False)

      Return three possibly None nodes: one for those parts of self that
      should be included in the WHERE clause, one for those parts of self
      that must be included in the HAVING clause, and one for those parts
      that refer to window functions.



   .. py:method:: as_sql(compiler, connection)

      Return the SQL version of the where clause and the value to be
      substituted in. Return '', [] if this node matches everything,
      None, [] if this node is empty, and raise EmptyResultSet if this
      node can't match anything.



   .. py:method:: get_group_by_cols()


   .. py:method:: get_source_expressions()


   .. py:method:: set_source_expressions(children)


   .. py:method:: relabel_aliases(change_map)

      Relabel the alias values of any children. 'change_map' is a dictionary
      mapping old (current) alias values to the new values.



   .. py:method:: clone()


   .. py:method:: relabeled_clone(change_map)


   .. py:method:: replace_expressions(replacements)


   .. py:method:: get_refs()


   .. py:method:: contains_aggregate()


   .. py:method:: contains_over_clause()


   .. py:property:: is_summary


   .. py:method:: resolve_expression(*args, **kwargs)


   .. py:method:: output_field()


   .. py:method:: select_format(compiler, sql, params)


   .. py:method:: get_db_converters(connection)


   .. py:method:: get_lookup(lookup)


   .. py:method:: leaves()


.. py:class:: NothingNode

   A node that matches nothing.


   .. py:attribute:: contains_aggregate
      :value: False



   .. py:attribute:: contains_over_clause
      :value: False



   .. py:method:: as_sql(compiler=None, connection=None)


.. py:class:: ExtraWhere(sqls, params)

   .. py:attribute:: contains_aggregate
      :value: False



   .. py:attribute:: contains_over_clause
      :value: False



   .. py:attribute:: sqls


   .. py:attribute:: params


   .. py:method:: as_sql(compiler=None, connection=None)


.. py:class:: SubqueryConstraint(alias, columns, targets, query_object)

   .. py:attribute:: contains_aggregate
      :value: False



   .. py:attribute:: contains_over_clause
      :value: False



   .. py:attribute:: alias


   .. py:attribute:: columns


   .. py:attribute:: targets


   .. py:attribute:: query_object


   .. py:method:: as_sql(compiler, connection)


