django.templatetags.cache
=========================

.. py:module:: django.templatetags.cache


Attributes
----------

.. autoapisummary::

   django.templatetags.cache.register


Classes
-------

.. autoapisummary::

   django.templatetags.cache.CacheNode


Functions
---------

.. autoapisummary::

   django.templatetags.cache.do_cache


Module Contents
---------------

.. py:data:: register

.. py:class:: CacheNode(nodelist, expire_time_var, fragment_name, vary_on, cache_name)

   Bases: :py:obj:`django.template.Node`


   .. py:attribute:: nodelist


   .. py:attribute:: expire_time_var


   .. py:attribute:: fragment_name


   .. py:attribute:: vary_on


   .. py:attribute:: cache_name


   .. py:method:: render(context)


.. py:function:: do_cache(parser, token)

   This will cache the contents of a template fragment for a given amount
   of time.

   Usage::

       {% load cache %}
       {% cache [expire_time] [fragment_name] %}
           .. some expensive processing ..
       {% endcache %}

   This tag also supports varying by a list of arguments::

       {% load cache %}
       {% cache [expire_time] [fragment_name] [var1] [var2] .. %}
           .. some expensive processing ..
       {% endcache %}

   Optionally the cache to use may be specified thus::

       {% cache ....  using="cachename" %}

   Each unique set of arguments will result in a unique cache entry.


