django.utils.encoding
=====================

.. py:module:: django.utils.encoding


Attributes
----------

.. autoapisummary::

   django.utils.encoding.DEFAULT_LOCALE_ENCODING


Exceptions
----------

.. autoapisummary::

   django.utils.encoding.DjangoUnicodeDecodeError


Functions
---------

.. autoapisummary::

   django.utils.encoding.smart_str
   django.utils.encoding.is_protected_type
   django.utils.encoding.force_str
   django.utils.encoding.smart_bytes
   django.utils.encoding.force_bytes
   django.utils.encoding.iri_to_uri
   django.utils.encoding.uri_to_iri
   django.utils.encoding.escape_uri_path
   django.utils.encoding.punycode
   django.utils.encoding.repercent_broken_unicode
   django.utils.encoding.filepath_to_uri
   django.utils.encoding.get_system_encoding


Module Contents
---------------

.. py:exception:: DjangoUnicodeDecodeError(obj, *args)

   Bases: :py:obj:`UnicodeDecodeError`


   Unicode decoding error.


   .. py:attribute:: obj


.. py:function:: smart_str(s, encoding='utf-8', strings_only=False, errors='strict')

   Return a string representing 's'. Treat bytestrings using the 'encoding'
   codec.

   If strings_only is True, don't convert (some) non-string-like objects.


.. py:function:: is_protected_type(obj)

   Determine if the object instance is of a protected type.

   Objects of protected types are preserved as-is when passed to
   force_str(strings_only=True).


.. py:function:: force_str(s, encoding='utf-8', strings_only=False, errors='strict')

   Similar to smart_str(), except that lazy instances are resolved to
   strings, rather than kept as lazy objects.

   If strings_only is True, don't convert (some) non-string-like objects.


.. py:function:: smart_bytes(s, encoding='utf-8', strings_only=False, errors='strict')

   Return a bytestring version of 's', encoded as specified in 'encoding'.

   If strings_only is True, don't convert (some) non-string-like objects.


.. py:function:: force_bytes(s, encoding='utf-8', strings_only=False, errors='strict')

   Similar to smart_bytes, except that lazy instances are resolved to
   strings, rather than kept as lazy objects.

   If strings_only is True, don't convert (some) non-string-like objects.


.. py:function:: iri_to_uri(iri)

   Convert an Internationalized Resource Identifier (IRI) portion to a URI
   portion that is suitable for inclusion in a URL.

   This is the algorithm from RFC 3987 Section 3.1, slightly simplified since
   the input is assumed to be a string rather than an arbitrary byte stream.

   Take an IRI (string or UTF-8 bytes, e.g. '/I ♥ Django/' or
   b'/I â¥ Django/') and return a string containing the encoded
   result with ASCII chars only (e.g. '/I%20%E2%99%A5%20Django/').


.. py:function:: uri_to_iri(uri)

   Convert a Uniform Resource Identifier(URI) into an Internationalized
   Resource Identifier(IRI).

   This is the algorithm from RFC 3987 Section 3.2, excluding step 4.

   Take an URI in ASCII bytes (e.g. '/I%20%E2%99%A5%20Django/') and return
   a string containing the encoded result (e.g. '/I%20♥%20Django/').


.. py:function:: escape_uri_path(path)

   Escape the unsafe characters from the path portion of a Uniform Resource
   Identifier (URI).


.. py:function:: punycode(domain)

   Return the Punycode of the given domain if it's non-ASCII.


.. py:function:: repercent_broken_unicode(path)

   As per RFC 3987 Section 3.2, step three of converting a URI into an IRI,
   repercent-encode any octet produced that is not part of a strictly legal
   UTF-8 octet sequence.


.. py:function:: filepath_to_uri(path)

   Convert a file system path to a URI portion that is suitable for
   inclusion in a URL.

   Encode certain chars that would normally be recognized as special chars
   for URIs. Do not encode the ' character, as it is a valid character
   within URIs. See the encodeURIComponent() JavaScript function for details.


.. py:function:: get_system_encoding()

   The encoding for the character type functions. Fallback to 'ascii' if the
   #encoding is unsupported by Python or could not be determined. See tickets
   #10335 and #5846.


.. py:data:: DEFAULT_LOCALE_ENCODING

