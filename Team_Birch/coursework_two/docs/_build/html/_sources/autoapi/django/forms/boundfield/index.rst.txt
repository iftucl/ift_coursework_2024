django.forms.boundfield
=======================

.. py:module:: django.forms.boundfield


Classes
-------

.. autoapisummary::

   django.forms.boundfield.BoundField


Module Contents
---------------

.. py:class:: BoundField(form, field, name)

   A Field plus data


   .. py:attribute:: form


   .. py:attribute:: field


   .. py:attribute:: name


   .. py:attribute:: html_name


   .. py:attribute:: html_initial_name


   .. py:attribute:: html_initial_id


   .. py:attribute:: help_text


   .. py:method:: subwidgets()

      Most widgets yield a single subwidget, but others like RadioSelect and
      CheckboxSelectMultiple produce one subwidget for each choice.

      This property is cached so that only one database query occurs when
      rendering ModelChoiceFields.



   .. py:property:: errors

      Return an ErrorList (empty if there are no errors) for this field.


   .. py:method:: as_widget(widget=None, attrs=None, only_initial=False)

      Render the field by rendering the passed widget, adding any HTML
      attributes passed as attrs. If a widget isn't specified, use the
      field's default widget.



   .. py:method:: as_text(attrs=None, **kwargs)

      Return a string of HTML for representing this as an <input type="text">.



   .. py:method:: as_textarea(attrs=None, **kwargs)

      Return a string of HTML for representing this as a <textarea>.



   .. py:method:: as_hidden(attrs=None, **kwargs)

      Return a string of HTML for representing this as an <input type="hidden">.



   .. py:property:: data

      Return the data for this BoundField, or None if it wasn't given.


   .. py:method:: value()

      Return the value for this BoundField, using the initial value if
      the form is not bound or the data otherwise.



   .. py:method:: label_tag(contents=None, attrs=None, label_suffix=None, tag=None)

      Wrap the given contents in a <label>, if the field has an ID attribute.
      contents should be mark_safe'd to avoid HTML escaping. If contents
      aren't given, use the field's HTML-escaped label.

      If attrs are given, use them as HTML attributes on the <label> tag.

      label_suffix overrides the form's label_suffix.



   .. py:method:: legend_tag(contents=None, attrs=None, label_suffix=None)

      Wrap the given contents in a <legend>, if the field has an ID
      attribute. Contents should be mark_safe'd to avoid HTML escaping. If
      contents aren't given, use the field's HTML-escaped label.

      If attrs are given, use them as HTML attributes on the <legend> tag.

      label_suffix overrides the form's label_suffix.



   .. py:method:: css_classes(extra_classes=None)

      Return a string of space-separated CSS classes for this field.



   .. py:property:: is_hidden

      Return True if this BoundField's widget is hidden.


   .. py:property:: auto_id

      Calculate and return the ID attribute for this BoundField, if the
      associated Form has specified auto_id. Return an empty string otherwise.


   .. py:property:: id_for_label

      Wrapper around the field widget's `id_for_label` method.
      Useful, for example, for focusing on this field regardless of whether
      it has a single widget or a MultiWidget.


   .. py:method:: initial()


   .. py:method:: build_widget_attrs(attrs, widget=None)


   .. py:property:: widget_type


   .. py:property:: use_fieldset

      Return the value of this BoundField widget's use_fieldset attribute.


