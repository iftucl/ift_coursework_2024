django.contrib.gis.gdal.datasource
==================================

.. py:module:: django.contrib.gis.gdal.datasource

.. autoapi-nested-parse::

   DataSource is a wrapper for the OGR Data Source object, which provides
   an interface for reading vector geometry data from many different file
   formats (including ESRI shapefiles).

   When instantiating a DataSource object, use the filename of a
   GDAL-supported data source.  For example, a SHP file or a
   TIGER/Line file from the government.

   The ds_driver keyword is used internally when a ctypes pointer
   is passed in directly.

   .. rubric:: Example

   ds = DataSource('/home/foo/bar.shp')
   for layer in ds:
       for feature in layer:
           # Getting the geometry for the feature.
           g = feature.geom

           # Getting the 'description' field for the feature.
           desc = feature['description']

           # We can also increment through all of the fields
           #  attached to this feature.
           for field in feature:
               # Get the name of the field (e.g. 'description')
               nm = field.name

               # Get the type (integer) of the field, e.g. 0 => OFTInteger
               t = field.type

               # Returns the value the field; OFTIntegers return ints,
               #  OFTReal returns floats, all else returns string.
               val = field.value



Classes
-------

.. autoapisummary::

   django.contrib.gis.gdal.datasource.DataSource


Module Contents
---------------

.. py:class:: DataSource(ds_input, ds_driver=False, write=False, encoding='utf-8')

   Bases: :py:obj:`django.contrib.gis.gdal.base.GDALBase`


   Wraps an OGR Data Source object.


   .. py:attribute:: destructor


   .. py:attribute:: encoding
      :value: 'utf-8'



   .. py:property:: layer_count

      Return the number of layers in the data source.


   .. py:property:: name

      Return the name of the data source.


