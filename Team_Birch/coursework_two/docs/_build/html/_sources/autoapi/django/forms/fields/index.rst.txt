django.forms.fields
===================

.. py:module:: django.forms.fields

.. autoapi-nested-parse::

   Field classes.



Classes
-------

.. autoapisummary::

   django.forms.fields.Field
   django.forms.fields.CharField
   django.forms.fields.IntegerField
   django.forms.fields.FloatField
   django.forms.fields.DecimalField
   django.forms.fields.DateField
   django.forms.fields.TimeField
   django.forms.fields.DateTimeField
   django.forms.fields.DurationField
   django.forms.fields.RegexField
   django.forms.fields.EmailField
   django.forms.fields.FileField
   django.forms.fields.ImageField
   django.forms.fields.URLField
   django.forms.fields.BooleanField
   django.forms.fields.NullBooleanField
   django.forms.fields.ChoiceField
   django.forms.fields.TypedChoiceField
   django.forms.fields.MultipleChoiceField
   django.forms.fields.TypedMultipleChoiceField
   django.forms.fields.ComboField
   django.forms.fields.MultiValueField
   django.forms.fields.FilePathField
   django.forms.fields.SplitDateTimeField
   django.forms.fields.GenericIPAddressField
   django.forms.fields.SlugField
   django.forms.fields.UUIDField
   django.forms.fields.JSONField


Module Contents
---------------

.. py:class:: Field(*, required=True, widget=None, label=None, initial=None, help_text='', error_messages=None, show_hidden_initial=False, validators=(), localize=False, disabled=False, label_suffix=None)

   .. py:attribute:: widget


   .. py:attribute:: hidden_widget


   .. py:attribute:: default_validators
      :value: []



   .. py:attribute:: default_error_messages


   .. py:attribute:: empty_values


   .. py:attribute:: show_hidden_initial
      :value: False



   .. py:attribute:: help_text
      :value: ''



   .. py:attribute:: disabled
      :value: False



   .. py:attribute:: label_suffix
      :value: None



   .. py:attribute:: localize
      :value: False



   .. py:attribute:: error_messages


   .. py:attribute:: validators


   .. py:method:: prepare_value(value)


   .. py:method:: to_python(value)


   .. py:method:: validate(value)


   .. py:method:: run_validators(value)


   .. py:method:: clean(value)

      Validate the given value and return its "cleaned" value as an
      appropriate Python object. Raise ValidationError for any errors.



   .. py:method:: bound_data(data, initial)

      Return the value that should be shown for this field on render of a
      bound form, given the submitted POST data for the field and the initial
      data, if any.

      For most fields, this will simply be data; FileFields need to handle it
      a bit differently.



   .. py:method:: widget_attrs(widget)

      Given a Widget instance (*not* a Widget class), return a dictionary of
      any HTML attributes that should be added to the Widget, based on this
      Field.



   .. py:method:: has_changed(initial, data)

      Return True if data differs from initial.



   .. py:method:: get_bound_field(form, field_name)

      Return a BoundField instance that will be used when accessing the form
      field in a template.



.. py:class:: CharField(*, max_length=None, min_length=None, strip=True, empty_value='', **kwargs)

   Bases: :py:obj:`Field`


   .. py:attribute:: max_length
      :value: None



   .. py:attribute:: min_length
      :value: None



   .. py:attribute:: strip
      :value: True



   .. py:attribute:: empty_value
      :value: ''



   .. py:method:: to_python(value)

      Return a string.



   .. py:method:: widget_attrs(widget)

      Given a Widget instance (*not* a Widget class), return a dictionary of
      any HTML attributes that should be added to the Widget, based on this
      Field.



.. py:class:: IntegerField(*, max_value=None, min_value=None, step_size=None, **kwargs)

   Bases: :py:obj:`Field`


   .. py:attribute:: widget


   .. py:attribute:: default_error_messages


   .. py:attribute:: re_decimal


   .. py:method:: to_python(value)

      Validate that int() can be called on the input. Return the result
      of int() or None for empty values.



   .. py:method:: widget_attrs(widget)

      Given a Widget instance (*not* a Widget class), return a dictionary of
      any HTML attributes that should be added to the Widget, based on this
      Field.



.. py:class:: FloatField(*, max_value=None, min_value=None, step_size=None, **kwargs)

   Bases: :py:obj:`IntegerField`


   .. py:attribute:: default_error_messages


   .. py:method:: to_python(value)

      Validate that float() can be called on the input. Return the result
      of float() or None for empty values.



   .. py:method:: validate(value)


   .. py:method:: widget_attrs(widget)

      Given a Widget instance (*not* a Widget class), return a dictionary of
      any HTML attributes that should be added to the Widget, based on this
      Field.



.. py:class:: DecimalField(*, max_value=None, min_value=None, max_digits=None, decimal_places=None, **kwargs)

   Bases: :py:obj:`IntegerField`


   .. py:attribute:: default_error_messages


   .. py:method:: to_python(value)

      Validate that the input is a decimal number. Return a Decimal
      instance or None for empty values. Ensure that there are no more
      than max_digits in the number and no more than decimal_places digits
      after the decimal point.



   .. py:method:: validate(value)


   .. py:method:: widget_attrs(widget)

      Given a Widget instance (*not* a Widget class), return a dictionary of
      any HTML attributes that should be added to the Widget, based on this
      Field.



.. py:class:: DateField(*, input_formats=None, **kwargs)

   Bases: :py:obj:`BaseTemporalField`


   .. py:attribute:: widget


   .. py:attribute:: input_formats


   .. py:attribute:: default_error_messages


   .. py:method:: to_python(value)

      Validate that the input can be converted to a date. Return a Python
      datetime.date object.



   .. py:method:: strptime(value, format)


.. py:class:: TimeField(*, input_formats=None, **kwargs)

   Bases: :py:obj:`BaseTemporalField`


   .. py:attribute:: widget


   .. py:attribute:: input_formats


   .. py:attribute:: default_error_messages


   .. py:method:: to_python(value)

      Validate that the input can be converted to a time. Return a Python
      datetime.time object.



   .. py:method:: strptime(value, format)


.. py:class:: DateTimeField(*, input_formats=None, **kwargs)

   Bases: :py:obj:`BaseTemporalField`


   .. py:attribute:: widget


   .. py:attribute:: input_formats


   .. py:attribute:: default_error_messages


   .. py:method:: prepare_value(value)


   .. py:method:: to_python(value)

      Validate that the input can be converted to a datetime. Return a
      Python datetime.datetime object.



   .. py:method:: strptime(value, format)


.. py:class:: DurationField(*, required=True, widget=None, label=None, initial=None, help_text='', error_messages=None, show_hidden_initial=False, validators=(), localize=False, disabled=False, label_suffix=None)

   Bases: :py:obj:`Field`


   .. py:attribute:: default_error_messages


   .. py:method:: prepare_value(value)


   .. py:method:: to_python(value)


.. py:class:: RegexField(regex, **kwargs)

   Bases: :py:obj:`CharField`


   .. py:attribute:: regex


.. py:class:: EmailField(**kwargs)

   Bases: :py:obj:`CharField`


   .. py:attribute:: widget


   .. py:attribute:: default_validators


.. py:class:: FileField(*, max_length=None, allow_empty_file=False, **kwargs)

   Bases: :py:obj:`Field`


   .. py:attribute:: widget


   .. py:attribute:: default_error_messages


   .. py:attribute:: max_length
      :value: None



   .. py:attribute:: allow_empty_file
      :value: False



   .. py:method:: to_python(data)


   .. py:method:: clean(data, initial=None)

      Validate the given value and return its "cleaned" value as an
      appropriate Python object. Raise ValidationError for any errors.



   .. py:method:: bound_data(_, initial)

      Return the value that should be shown for this field on render of a
      bound form, given the submitted POST data for the field and the initial
      data, if any.

      For most fields, this will simply be data; FileFields need to handle it
      a bit differently.



   .. py:method:: has_changed(initial, data)

      Return True if data differs from initial.



.. py:class:: ImageField(*, max_length=None, allow_empty_file=False, **kwargs)

   Bases: :py:obj:`FileField`


   .. py:attribute:: default_validators


   .. py:attribute:: default_error_messages


   .. py:method:: to_python(data)

      Check that the file-upload field data contains a valid image (GIF, JPG,
      PNG, etc. -- whatever Pillow supports).



   .. py:method:: widget_attrs(widget)

      Given a Widget instance (*not* a Widget class), return a dictionary of
      any HTML attributes that should be added to the Widget, based on this
      Field.



.. py:class:: URLField(**kwargs)

   Bases: :py:obj:`CharField`


   .. py:attribute:: widget


   .. py:attribute:: default_error_messages


   .. py:attribute:: default_validators


   .. py:method:: to_python(value)

      Return a string.



.. py:class:: BooleanField(*, required=True, widget=None, label=None, initial=None, help_text='', error_messages=None, show_hidden_initial=False, validators=(), localize=False, disabled=False, label_suffix=None)

   Bases: :py:obj:`Field`


   .. py:attribute:: widget


   .. py:method:: to_python(value)

      Return a Python boolean object.



   .. py:method:: validate(value)


   .. py:method:: has_changed(initial, data)

      Return True if data differs from initial.



.. py:class:: NullBooleanField(*, required=True, widget=None, label=None, initial=None, help_text='', error_messages=None, show_hidden_initial=False, validators=(), localize=False, disabled=False, label_suffix=None)

   Bases: :py:obj:`BooleanField`


   A field whose valid values are None, True, and False. Clean invalid values
   to None.


   .. py:attribute:: widget


   .. py:method:: to_python(value)

      Explicitly check for the string 'True' and 'False', which is what a
      hidden field will submit for True and False, for 'true' and 'false',
      which are likely to be returned by JavaScript serializations of forms,
      and for '1' and '0', which is what a RadioField will submit. Unlike
      the Booleanfield, this field must check for True because it doesn't
      use the bool() function.



   .. py:method:: validate(value)


.. py:class:: ChoiceField(*, choices=(), **kwargs)

   Bases: :py:obj:`Field`


   .. py:attribute:: widget


   .. py:attribute:: default_error_messages


   .. py:attribute:: choices
      :value: ()



   .. py:method:: to_python(value)

      Return a string.



   .. py:method:: validate(value)

      Validate that the input is in self.choices.



   .. py:method:: valid_value(value)

      Check to see if the provided value is a valid choice.



.. py:class:: TypedChoiceField(*, coerce=lambda val: val, empty_value='', **kwargs)

   Bases: :py:obj:`ChoiceField`


   .. py:attribute:: coerce


   .. py:attribute:: empty_value
      :value: ''



   .. py:method:: clean(value)

      Validate the given value and return its "cleaned" value as an
      appropriate Python object. Raise ValidationError for any errors.



.. py:class:: MultipleChoiceField(*, choices=(), **kwargs)

   Bases: :py:obj:`ChoiceField`


   .. py:attribute:: hidden_widget


   .. py:attribute:: widget


   .. py:attribute:: default_error_messages


   .. py:method:: to_python(value)

      Return a string.



   .. py:method:: validate(value)

      Validate that the input is a list or tuple.



   .. py:method:: has_changed(initial, data)

      Return True if data differs from initial.



.. py:class:: TypedMultipleChoiceField(*, coerce=lambda val: val, **kwargs)

   Bases: :py:obj:`MultipleChoiceField`


   .. py:attribute:: coerce


   .. py:attribute:: empty_value


   .. py:method:: clean(value)

      Validate the given value and return its "cleaned" value as an
      appropriate Python object. Raise ValidationError for any errors.



   .. py:method:: validate(value)

      Validate that the input is a list or tuple.



.. py:class:: ComboField(fields, **kwargs)

   Bases: :py:obj:`Field`


   A Field whose clean() method calls multiple Field clean() methods.


   .. py:attribute:: fields


   .. py:method:: clean(value)

      Validate the given value against all of self.fields, which is a
      list of Field instances.



.. py:class:: MultiValueField(fields, *, require_all_fields=True, **kwargs)

   Bases: :py:obj:`Field`


   Aggregate the logic of multiple Fields.

   Its clean() method takes a "decompressed" list of values, which are then
   cleaned into a single value according to self.fields. Each value in
   this list is cleaned by the corresponding field -- the first value is
   cleaned by the first field, the second value is cleaned by the second
   field, etc. Once all fields are cleaned, the list of clean values is
   "compressed" into a single value.

   Subclasses should not have to implement clean(). Instead, they must
   implement compress(), which takes a list of valid values and returns a
   "compressed" version of those values -- a single value.

   You'll probably want to use this with MultiWidget.


   .. py:attribute:: default_error_messages


   .. py:attribute:: require_all_fields
      :value: True



   .. py:attribute:: fields


   .. py:method:: validate(value)


   .. py:method:: clean(value)

      Validate every value in the given list. A value is validated against
      the corresponding Field in self.fields.

      For example, if this MultiValueField was instantiated with
      fields=(DateField(), TimeField()), clean() would call
      DateField.clean(value[0]) and TimeField.clean(value[1]).



   .. py:method:: compress(data_list)
      :abstractmethod:


      Return a single value for the given list of values. The values can be
      assumed to be valid.

      For example, if this MultiValueField was instantiated with
      fields=(DateField(), TimeField()), this might return a datetime
      object created by combining the date and time in data_list.



   .. py:method:: has_changed(initial, data)

      Return True if data differs from initial.



.. py:class:: FilePathField(path, *, match=None, recursive=False, allow_files=True, allow_folders=False, **kwargs)

   Bases: :py:obj:`ChoiceField`


.. py:class:: SplitDateTimeField(*, input_date_formats=None, input_time_formats=None, **kwargs)

   Bases: :py:obj:`MultiValueField`


   Aggregate the logic of multiple Fields.

   Its clean() method takes a "decompressed" list of values, which are then
   cleaned into a single value according to self.fields. Each value in
   this list is cleaned by the corresponding field -- the first value is
   cleaned by the first field, the second value is cleaned by the second
   field, etc. Once all fields are cleaned, the list of clean values is
   "compressed" into a single value.

   Subclasses should not have to implement clean(). Instead, they must
   implement compress(), which takes a list of valid values and returns a
   "compressed" version of those values -- a single value.

   You'll probably want to use this with MultiWidget.


   .. py:attribute:: widget


   .. py:attribute:: hidden_widget


   .. py:attribute:: default_error_messages


   .. py:method:: compress(data_list)

      Return a single value for the given list of values. The values can be
      assumed to be valid.

      For example, if this MultiValueField was instantiated with
      fields=(DateField(), TimeField()), this might return a datetime
      object created by combining the date and time in data_list.



.. py:class:: GenericIPAddressField(*, protocol='both', unpack_ipv4=False, **kwargs)

   Bases: :py:obj:`CharField`


   .. py:attribute:: unpack_ipv4
      :value: False



   .. py:attribute:: default_validators


   .. py:method:: to_python(value)

      Return a string.



.. py:class:: SlugField(*, allow_unicode=False, **kwargs)

   Bases: :py:obj:`CharField`


   .. py:attribute:: default_validators


   .. py:attribute:: allow_unicode
      :value: False



.. py:class:: UUIDField(*, max_length=None, min_length=None, strip=True, empty_value='', **kwargs)

   Bases: :py:obj:`CharField`


   .. py:attribute:: default_error_messages


   .. py:method:: prepare_value(value)


   .. py:method:: to_python(value)

      Return a string.



.. py:class:: JSONField(encoder=None, decoder=None, **kwargs)

   Bases: :py:obj:`CharField`


   .. py:attribute:: default_error_messages


   .. py:attribute:: widget


   .. py:attribute:: encoder
      :value: None



   .. py:attribute:: decoder
      :value: None



   .. py:method:: to_python(value)

      Return a string.



   .. py:method:: bound_data(data, initial)

      Return the value that should be shown for this field on render of a
      bound form, given the submitted POST data for the field and the initial
      data, if any.

      For most fields, this will simply be data; FileFields need to handle it
      a bit differently.



   .. py:method:: prepare_value(value)


   .. py:method:: has_changed(initial, data)

      Return True if data differs from initial.



