django.db.models.lookups
========================

.. py:module:: django.db.models.lookups


Classes
-------

.. autoapisummary::

   django.db.models.lookups.Lookup
   django.db.models.lookups.Transform
   django.db.models.lookups.BuiltinLookup
   django.db.models.lookups.FieldGetDbPrepValueMixin
   django.db.models.lookups.FieldGetDbPrepValueIterableMixin
   django.db.models.lookups.PostgresOperatorLookup
   django.db.models.lookups.Exact
   django.db.models.lookups.IExact
   django.db.models.lookups.GreaterThan
   django.db.models.lookups.GreaterThanOrEqual
   django.db.models.lookups.LessThan
   django.db.models.lookups.LessThanOrEqual
   django.db.models.lookups.IntegerFieldFloatRounding
   django.db.models.lookups.IntegerGreaterThanOrEqual
   django.db.models.lookups.IntegerLessThan
   django.db.models.lookups.In
   django.db.models.lookups.PatternLookup
   django.db.models.lookups.Contains
   django.db.models.lookups.IContains
   django.db.models.lookups.StartsWith
   django.db.models.lookups.IStartsWith
   django.db.models.lookups.EndsWith
   django.db.models.lookups.IEndsWith
   django.db.models.lookups.Range
   django.db.models.lookups.IsNull
   django.db.models.lookups.Regex
   django.db.models.lookups.IRegex
   django.db.models.lookups.YearLookup
   django.db.models.lookups.YearExact
   django.db.models.lookups.YearGt
   django.db.models.lookups.YearGte
   django.db.models.lookups.YearLt
   django.db.models.lookups.YearLte
   django.db.models.lookups.UUIDTextMixin
   django.db.models.lookups.UUIDIExact
   django.db.models.lookups.UUIDContains
   django.db.models.lookups.UUIDIContains
   django.db.models.lookups.UUIDStartsWith
   django.db.models.lookups.UUIDIStartsWith
   django.db.models.lookups.UUIDEndsWith
   django.db.models.lookups.UUIDIEndsWith


Module Contents
---------------

.. py:class:: Lookup(lhs, rhs)

   Bases: :py:obj:`django.db.models.expressions.Expression`


   An expression that can be combined with other expressions.


   .. py:attribute:: lookup_name
      :value: None



   .. py:attribute:: prepare_rhs
      :value: True



   .. py:attribute:: can_use_none_as_rhs
      :value: False



   .. py:attribute:: rhs


   .. py:attribute:: lhs


   .. py:attribute:: bilateral_transforms


   .. py:method:: apply_bilateral_transforms(value)


   .. py:method:: batch_process_rhs(compiler, connection, rhs=None)


   .. py:method:: get_source_expressions()


   .. py:method:: set_source_expressions(new_exprs)


   .. py:method:: get_prep_lookup()


   .. py:method:: get_prep_lhs()


   .. py:method:: get_db_prep_lookup(value, connection)


   .. py:method:: process_lhs(compiler, connection, lhs=None)


   .. py:method:: process_rhs(compiler, connection)


   .. py:method:: rhs_is_direct_value()


   .. py:method:: get_group_by_cols()


   .. py:method:: as_oracle(compiler, connection)


   .. py:method:: output_field()

      Return the output type of this expressions.



   .. py:property:: identity


   .. py:method:: resolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)

      Provide the chance to do any preprocessing or validation before being
      added to the query.

      :param \* query: the backend query implementation
      :param \* allow_joins: boolean allowing or denying use of joins
                             in this query
      :param \* reuse: a set of reusable joins for multijoins
      :param \* summarize: a terminal aggregate clause
      :param \* for_save: whether this expression about to be used in a save or update

      Return: an Expression to be added to the query.



   .. py:method:: select_format(compiler, sql, params)

      Custom format for select clauses. For example, EXISTS expressions need
      to be wrapped in CASE WHEN on Oracle.



.. py:class:: Transform(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.query_utils.RegisterLookupMixin`, :py:obj:`django.db.models.expressions.Func`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: bilateral
      :value: False



   .. py:attribute:: arity
      :value: 1



   .. py:property:: lhs


   .. py:method:: get_bilateral_transforms()


.. py:class:: BuiltinLookup(lhs, rhs)

   Bases: :py:obj:`Lookup`


   An expression that can be combined with other expressions.


   .. py:method:: process_lhs(compiler, connection, lhs=None)


   .. py:method:: as_sql(compiler, connection)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: get_rhs_op(connection, rhs)


.. py:class:: FieldGetDbPrepValueMixin

   Some lookups require Field.get_db_prep_value() to be called on their
   inputs.


   .. py:attribute:: get_db_prep_lookup_value_is_iterable
      :value: False



   .. py:method:: get_db_prep_lookup(value, connection)


.. py:class:: FieldGetDbPrepValueIterableMixin

   Bases: :py:obj:`FieldGetDbPrepValueMixin`


   Some lookups require Field.get_db_prep_value() to be called on each value
   in an iterable.


   .. py:attribute:: get_db_prep_lookup_value_is_iterable
      :value: True



   .. py:method:: get_prep_lookup()


   .. py:method:: process_rhs(compiler, connection)


   .. py:method:: resolve_expression_parameter(compiler, connection, sql, param)


   .. py:method:: batch_process_rhs(compiler, connection, rhs=None)


.. py:class:: PostgresOperatorLookup(lhs, rhs)

   Bases: :py:obj:`Lookup`


   Lookup defined by operators on PostgreSQL.


   .. py:attribute:: postgres_operator
      :value: None



   .. py:method:: as_postgresql(compiler, connection)


.. py:class:: Exact(lhs, rhs)

   Bases: :py:obj:`FieldGetDbPrepValueMixin`, :py:obj:`BuiltinLookup`


   Some lookups require Field.get_db_prep_value() to be called on their
   inputs.


   .. py:attribute:: lookup_name
      :value: 'exact'



   .. py:method:: get_prep_lookup()


   .. py:method:: as_sql(compiler, connection)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



.. py:class:: IExact(lhs, rhs)

   Bases: :py:obj:`BuiltinLookup`


   An expression that can be combined with other expressions.


   .. py:attribute:: lookup_name
      :value: 'iexact'



   .. py:attribute:: prepare_rhs
      :value: False



   .. py:method:: process_rhs(qn, connection)


.. py:class:: GreaterThan(lhs, rhs)

   Bases: :py:obj:`FieldGetDbPrepValueMixin`, :py:obj:`BuiltinLookup`


   Some lookups require Field.get_db_prep_value() to be called on their
   inputs.


   .. py:attribute:: lookup_name
      :value: 'gt'



.. py:class:: GreaterThanOrEqual(lhs, rhs)

   Bases: :py:obj:`FieldGetDbPrepValueMixin`, :py:obj:`BuiltinLookup`


   Some lookups require Field.get_db_prep_value() to be called on their
   inputs.


   .. py:attribute:: lookup_name
      :value: 'gte'



.. py:class:: LessThan(lhs, rhs)

   Bases: :py:obj:`FieldGetDbPrepValueMixin`, :py:obj:`BuiltinLookup`


   Some lookups require Field.get_db_prep_value() to be called on their
   inputs.


   .. py:attribute:: lookup_name
      :value: 'lt'



.. py:class:: LessThanOrEqual(lhs, rhs)

   Bases: :py:obj:`FieldGetDbPrepValueMixin`, :py:obj:`BuiltinLookup`


   Some lookups require Field.get_db_prep_value() to be called on their
   inputs.


   .. py:attribute:: lookup_name
      :value: 'lte'



.. py:class:: IntegerFieldFloatRounding

   Allow floats to work as query values for IntegerField. Without this, the
   decimal portion of the float would always be discarded.


   .. py:method:: get_prep_lookup()


.. py:class:: IntegerGreaterThanOrEqual(lhs, rhs)

   Bases: :py:obj:`IntegerFieldFloatRounding`, :py:obj:`GreaterThanOrEqual`


   Allow floats to work as query values for IntegerField. Without this, the
   decimal portion of the float would always be discarded.


.. py:class:: IntegerLessThan(lhs, rhs)

   Bases: :py:obj:`IntegerFieldFloatRounding`, :py:obj:`LessThan`


   Allow floats to work as query values for IntegerField. Without this, the
   decimal portion of the float would always be discarded.


.. py:class:: In(lhs, rhs)

   Bases: :py:obj:`FieldGetDbPrepValueIterableMixin`, :py:obj:`BuiltinLookup`


   Some lookups require Field.get_db_prep_value() to be called on each value
   in an iterable.


   .. py:attribute:: lookup_name
      :value: 'in'



   .. py:method:: get_prep_lookup()


   .. py:method:: process_rhs(compiler, connection)


   .. py:method:: get_rhs_op(connection, rhs)


   .. py:method:: as_sql(compiler, connection)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: split_parameter_list_as_sql(compiler, connection)


.. py:class:: PatternLookup(lhs, rhs)

   Bases: :py:obj:`BuiltinLookup`


   An expression that can be combined with other expressions.


   .. py:attribute:: param_pattern
      :value: '%%%s%%'



   .. py:attribute:: prepare_rhs
      :value: False



   .. py:method:: get_rhs_op(connection, rhs)


   .. py:method:: process_rhs(qn, connection)


.. py:class:: Contains(lhs, rhs)

   Bases: :py:obj:`PatternLookup`


   An expression that can be combined with other expressions.


   .. py:attribute:: lookup_name
      :value: 'contains'



.. py:class:: IContains(lhs, rhs)

   Bases: :py:obj:`Contains`


   An expression that can be combined with other expressions.


   .. py:attribute:: lookup_name
      :value: 'icontains'



.. py:class:: StartsWith(lhs, rhs)

   Bases: :py:obj:`PatternLookup`


   An expression that can be combined with other expressions.


   .. py:attribute:: lookup_name
      :value: 'startswith'



   .. py:attribute:: param_pattern
      :value: '%s%%'



.. py:class:: IStartsWith(lhs, rhs)

   Bases: :py:obj:`StartsWith`


   An expression that can be combined with other expressions.


   .. py:attribute:: lookup_name
      :value: 'istartswith'



.. py:class:: EndsWith(lhs, rhs)

   Bases: :py:obj:`PatternLookup`


   An expression that can be combined with other expressions.


   .. py:attribute:: lookup_name
      :value: 'endswith'



   .. py:attribute:: param_pattern
      :value: '%%%s'



.. py:class:: IEndsWith(lhs, rhs)

   Bases: :py:obj:`EndsWith`


   An expression that can be combined with other expressions.


   .. py:attribute:: lookup_name
      :value: 'iendswith'



.. py:class:: Range(lhs, rhs)

   Bases: :py:obj:`FieldGetDbPrepValueIterableMixin`, :py:obj:`BuiltinLookup`


   Some lookups require Field.get_db_prep_value() to be called on each value
   in an iterable.


   .. py:attribute:: lookup_name
      :value: 'range'



   .. py:method:: get_rhs_op(connection, rhs)


.. py:class:: IsNull(lhs, rhs)

   Bases: :py:obj:`BuiltinLookup`


   An expression that can be combined with other expressions.


   .. py:attribute:: lookup_name
      :value: 'isnull'



   .. py:attribute:: prepare_rhs
      :value: False



   .. py:method:: as_sql(compiler, connection)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



.. py:class:: Regex(lhs, rhs)

   Bases: :py:obj:`BuiltinLookup`


   An expression that can be combined with other expressions.


   .. py:attribute:: lookup_name
      :value: 'regex'



   .. py:attribute:: prepare_rhs
      :value: False



   .. py:method:: as_sql(compiler, connection)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



.. py:class:: IRegex(lhs, rhs)

   Bases: :py:obj:`Regex`


   An expression that can be combined with other expressions.


   .. py:attribute:: lookup_name
      :value: 'iregex'



.. py:class:: YearLookup(lhs, rhs)

   Bases: :py:obj:`Lookup`


   An expression that can be combined with other expressions.


   .. py:method:: year_lookup_bounds(connection, year)


   .. py:method:: as_sql(compiler, connection)

      Responsible for returning a (sql, [params]) tuple to be included
      in the current query.

      Different backends can provide their own implementation, by
      providing an `as_{vendor}` method and patching the Expression:

      ```
      def override_as_sql(self, compiler, connection):
          # custom logic
          return super().as_sql(compiler, connection)
      setattr(Expression, 'as_' + connection.vendor, override_as_sql)
      ```

      :param \* compiler: the query compiler responsible for generating the query.
                          Must have a compile method, returning a (sql, [params]) tuple.
                          Calling compiler(value) will return a quoted `value`.
      :param \* connection: the database connection used for the current query.

      Return: (sql, params)
        Where `sql` is a string containing ordered sql parameters to be
        replaced with the elements of the list `params`.



   .. py:method:: get_direct_rhs_sql(connection, rhs)


   .. py:method:: get_bound_params(start, finish)
      :abstractmethod:



.. py:class:: YearExact(lhs, rhs)

   Bases: :py:obj:`YearLookup`, :py:obj:`Exact`


   An expression that can be combined with other expressions.


   .. py:method:: get_direct_rhs_sql(connection, rhs)


   .. py:method:: get_bound_params(start, finish)


.. py:class:: YearGt(lhs, rhs)

   Bases: :py:obj:`YearLookup`, :py:obj:`GreaterThan`


   An expression that can be combined with other expressions.


   .. py:method:: get_bound_params(start, finish)


.. py:class:: YearGte(lhs, rhs)

   Bases: :py:obj:`YearLookup`, :py:obj:`GreaterThanOrEqual`


   An expression that can be combined with other expressions.


   .. py:method:: get_bound_params(start, finish)


.. py:class:: YearLt(lhs, rhs)

   Bases: :py:obj:`YearLookup`, :py:obj:`LessThan`


   An expression that can be combined with other expressions.


   .. py:method:: get_bound_params(start, finish)


.. py:class:: YearLte(lhs, rhs)

   Bases: :py:obj:`YearLookup`, :py:obj:`LessThanOrEqual`


   An expression that can be combined with other expressions.


   .. py:method:: get_bound_params(start, finish)


.. py:class:: UUIDTextMixin

   Strip hyphens from a value when filtering a UUIDField on backends without
   a native datatype for UUID.


   .. py:method:: process_rhs(qn, connection)


.. py:class:: UUIDIExact(lhs, rhs)

   Bases: :py:obj:`UUIDTextMixin`, :py:obj:`IExact`


   Strip hyphens from a value when filtering a UUIDField on backends without
   a native datatype for UUID.


.. py:class:: UUIDContains(lhs, rhs)

   Bases: :py:obj:`UUIDTextMixin`, :py:obj:`Contains`


   Strip hyphens from a value when filtering a UUIDField on backends without
   a native datatype for UUID.


.. py:class:: UUIDIContains(lhs, rhs)

   Bases: :py:obj:`UUIDTextMixin`, :py:obj:`IContains`


   Strip hyphens from a value when filtering a UUIDField on backends without
   a native datatype for UUID.


.. py:class:: UUIDStartsWith(lhs, rhs)

   Bases: :py:obj:`UUIDTextMixin`, :py:obj:`StartsWith`


   Strip hyphens from a value when filtering a UUIDField on backends without
   a native datatype for UUID.


.. py:class:: UUIDIStartsWith(lhs, rhs)

   Bases: :py:obj:`UUIDTextMixin`, :py:obj:`IStartsWith`


   Strip hyphens from a value when filtering a UUIDField on backends without
   a native datatype for UUID.


.. py:class:: UUIDEndsWith(lhs, rhs)

   Bases: :py:obj:`UUIDTextMixin`, :py:obj:`EndsWith`


   Strip hyphens from a value when filtering a UUIDField on backends without
   a native datatype for UUID.


.. py:class:: UUIDIEndsWith(lhs, rhs)

   Bases: :py:obj:`UUIDTextMixin`, :py:obj:`IEndsWith`


   Strip hyphens from a value when filtering a UUIDField on backends without
   a native datatype for UUID.


