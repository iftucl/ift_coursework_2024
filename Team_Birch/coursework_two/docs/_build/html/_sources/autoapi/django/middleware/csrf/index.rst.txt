django.middleware.csrf
======================

.. py:module:: django.middleware.csrf

.. autoapi-nested-parse::

   Cross Site Request Forgery Middleware.

   This module provides a middleware that implements protection
   against request forgeries from other sites.



Attributes
----------

.. autoapisummary::

   django.middleware.csrf.logger
   django.middleware.csrf.invalid_token_chars_re
   django.middleware.csrf.REASON_BAD_ORIGIN
   django.middleware.csrf.REASON_NO_REFERER
   django.middleware.csrf.REASON_BAD_REFERER
   django.middleware.csrf.REASON_NO_CSRF_COOKIE
   django.middleware.csrf.REASON_CSRF_TOKEN_MISSING
   django.middleware.csrf.REASON_MALFORMED_REFERER
   django.middleware.csrf.REASON_INSECURE_REFERER
   django.middleware.csrf.REASON_INCORRECT_LENGTH
   django.middleware.csrf.REASON_INVALID_CHARACTERS
   django.middleware.csrf.CSRF_SECRET_LENGTH
   django.middleware.csrf.CSRF_TOKEN_LENGTH
   django.middleware.csrf.CSRF_ALLOWED_CHARS
   django.middleware.csrf.CSRF_SESSION_KEY


Exceptions
----------

.. autoapisummary::

   django.middleware.csrf.InvalidTokenFormat
   django.middleware.csrf.RejectRequest


Classes
-------

.. autoapisummary::

   django.middleware.csrf.CsrfViewMiddleware


Functions
---------

.. autoapisummary::

   django.middleware.csrf.get_token
   django.middleware.csrf.rotate_token


Module Contents
---------------

.. py:data:: logger

.. py:data:: invalid_token_chars_re

.. py:data:: REASON_BAD_ORIGIN
   :value: 'Origin checking failed - %s does not match any trusted origins.'


.. py:data:: REASON_NO_REFERER
   :value: 'Referer checking failed - no Referer.'


.. py:data:: REASON_BAD_REFERER
   :value: 'Referer checking failed - %s does not match any trusted origins.'


.. py:data:: REASON_NO_CSRF_COOKIE
   :value: 'CSRF cookie not set.'


.. py:data:: REASON_CSRF_TOKEN_MISSING
   :value: 'CSRF token missing.'


.. py:data:: REASON_MALFORMED_REFERER
   :value: 'Referer checking failed - Referer is malformed.'


.. py:data:: REASON_INSECURE_REFERER
   :value: 'Referer checking failed - Referer is insecure while host is secure.'


.. py:data:: REASON_INCORRECT_LENGTH
   :value: 'has incorrect length'


.. py:data:: REASON_INVALID_CHARACTERS
   :value: 'has invalid characters'


.. py:data:: CSRF_SECRET_LENGTH
   :value: 32


.. py:data:: CSRF_TOKEN_LENGTH
   :value: 64


.. py:data:: CSRF_ALLOWED_CHARS
   :value: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'


.. py:data:: CSRF_SESSION_KEY
   :value: '_csrftoken'


.. py:function:: get_token(request)

   Return the CSRF token required for a POST form. The token is an
   alphanumeric value. A new token is created if one is not already set.

   A side effect of calling this function is to make the csrf_protect
   decorator and the CsrfViewMiddleware add a CSRF cookie and a 'Vary: Cookie'
   header to the outgoing response.  For this reason, you may need to use this
   function lazily, as is done by the csrf context processor.


.. py:function:: rotate_token(request)

   Change the CSRF token in use for a request - should be done on login
   for security purposes.


.. py:exception:: InvalidTokenFormat(reason)

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


   .. py:attribute:: reason


.. py:exception:: RejectRequest(reason)

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


   .. py:attribute:: reason


.. py:class:: CsrfViewMiddleware

   Bases: :py:obj:`django.utils.deprecation.MiddlewareMixin`


   Require a present and correct csrfmiddlewaretoken for POST requests that
   have a CSRF cookie, and set an outgoing CSRF cookie.

   This middleware should be used in conjunction with the {% csrf_token %}
   template tag.


   .. py:method:: csrf_trusted_origins_hosts()


   .. py:method:: allowed_origins_exact()


   .. py:method:: allowed_origin_subdomains()

      A mapping of allowed schemes to list of allowed netlocs, where all
      subdomains of the netloc are allowed.



   .. py:method:: process_request(request)


   .. py:method:: process_view(request, callback, callback_args, callback_kwargs)


   .. py:method:: process_response(request, response)


