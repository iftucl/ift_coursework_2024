django.core.files.storage.base
==============================

.. py:module:: django.core.files.storage.base


Classes
-------

.. autoapisummary::

   django.core.files.storage.base.Storage


Module Contents
---------------

.. py:class:: Storage

   A base storage class, providing some default behaviors that all other
   storage systems can inherit or override, as necessary.


   .. py:method:: open(name, mode='rb')

      Retrieve the specified file from storage.



   .. py:method:: save(name, content, max_length=None)

      Save new content to the file specified by name. The content should be
      a proper File object or any Python file-like object, ready to be read
      from the beginning.



   .. py:method:: get_valid_name(name)

      Return a filename, based on the provided filename, that's suitable for
      use in the target storage system.



   .. py:method:: get_alternative_name(file_root, file_ext)

      Return an alternative filename, by adding an underscore and a random 7
      character alphanumeric string (before the file extension, if one
      exists) to the filename.



   .. py:method:: get_available_name(name, max_length=None)

      Return a filename that's free on the target storage system and
      available for new content to be written to.



   .. py:method:: generate_filename(filename)

      Validate the filename by calling get_valid_name() and return a filename
      to be passed to the save() method.



   .. py:method:: path(name)
      :abstractmethod:


      Return a local filesystem path where the file can be retrieved using
      Python's built-in open() function. Storage systems that can't be
      accessed using open() should *not* implement this method.



   .. py:method:: delete(name)
      :abstractmethod:


      Delete the specified file from the storage system.



   .. py:method:: exists(name)
      :abstractmethod:


      Return True if a file referenced by the given name already exists in the
      storage system, or False if the name is available for a new file.



   .. py:method:: listdir(path)
      :abstractmethod:


      List the contents of the specified path. Return a 2-tuple of lists:
      the first item being directories, the second item being files.



   .. py:method:: size(name)
      :abstractmethod:


      Return the total size, in bytes, of the file specified by name.



   .. py:method:: url(name)
      :abstractmethod:


      Return an absolute URL where the file's contents can be accessed
      directly by a web browser.



   .. py:method:: get_accessed_time(name)
      :abstractmethod:


      Return the last accessed time (as a datetime) of the file specified by
      name. The datetime will be timezone-aware if USE_TZ=True.



   .. py:method:: get_created_time(name)
      :abstractmethod:


      Return the creation time (as a datetime) of the file specified by name.
      The datetime will be timezone-aware if USE_TZ=True.



   .. py:method:: get_modified_time(name)
      :abstractmethod:


      Return the last modified time (as a datetime) of the file specified by
      name. The datetime will be timezone-aware if USE_TZ=True.



