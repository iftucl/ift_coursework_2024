django.contrib.admin.filters
============================

.. py:module:: django.contrib.admin.filters

.. autoapi-nested-parse::

   This encapsulates the logic for displaying filters in the Django admin.
   Filters are specified in models with the "list_filter" option.

   Each filter subclass knows how to display a filter for a field that passes a
   certain test -- e.g. being a DateField or ForeignKey.



Classes
-------

.. autoapisummary::

   django.contrib.admin.filters.ListFilter
   django.contrib.admin.filters.SimpleListFilter
   django.contrib.admin.filters.FieldListFilter
   django.contrib.admin.filters.RelatedFieldListFilter
   django.contrib.admin.filters.BooleanFieldListFilter
   django.contrib.admin.filters.ChoicesFieldListFilter
   django.contrib.admin.filters.DateFieldListFilter
   django.contrib.admin.filters.AllValuesFieldListFilter
   django.contrib.admin.filters.RelatedOnlyFieldListFilter
   django.contrib.admin.filters.EmptyFieldListFilter


Module Contents
---------------

.. py:class:: ListFilter(request, params, model, model_admin)

   .. py:attribute:: title
      :value: None



   .. py:attribute:: template
      :value: 'admin/filter.html'



   .. py:attribute:: used_parameters


   .. py:method:: has_output()
      :abstractmethod:


      Return True if some choices would be output for this filter.



   .. py:method:: choices(changelist)
      :abstractmethod:


      Return choices ready to be output in the template.

      `changelist` is the ChangeList to be displayed.



   .. py:method:: queryset(request, queryset)
      :abstractmethod:


      Return the filtered queryset.



   .. py:method:: expected_parameters()
      :abstractmethod:


      Return the list of parameter names that are expected from the
      request's query string and that will be used by this filter.



.. py:class:: SimpleListFilter(request, params, model, model_admin)

   Bases: :py:obj:`ListFilter`


   .. py:attribute:: parameter_name
      :value: None



   .. py:attribute:: lookup_choices


   .. py:method:: has_output()

      Return True if some choices would be output for this filter.



   .. py:method:: value()

      Return the value (in string format) provided in the request's
      query string for this filter, if any, or None if the value wasn't
      provided.



   .. py:method:: lookups(request, model_admin)
      :abstractmethod:


      Must be overridden to return a list of tuples (value, verbose value)



   .. py:method:: expected_parameters()

      Return the list of parameter names that are expected from the
      request's query string and that will be used by this filter.



   .. py:method:: choices(changelist)

      Return choices ready to be output in the template.

      `changelist` is the ChangeList to be displayed.



.. py:class:: FieldListFilter(field, request, params, model, model_admin, field_path)

   Bases: :py:obj:`ListFilter`


   .. py:attribute:: list_separator
      :value: ','



   .. py:attribute:: field


   .. py:attribute:: field_path


   .. py:attribute:: title


   .. py:method:: has_output()

      Return True if some choices would be output for this filter.



   .. py:method:: queryset(request, queryset)

      Return the filtered queryset.



   .. py:method:: register(test, list_filter_class, take_priority=False)
      :classmethod:



   .. py:method:: create(field, request, params, model, model_admin, field_path)
      :classmethod:



.. py:class:: RelatedFieldListFilter(field, request, params, model, model_admin, field_path)

   Bases: :py:obj:`FieldListFilter`


   .. py:attribute:: lookup_kwarg


   .. py:attribute:: lookup_kwarg_isnull


   .. py:attribute:: lookup_val


   .. py:attribute:: lookup_val_isnull


   .. py:attribute:: lookup_choices


   .. py:attribute:: title


   .. py:attribute:: empty_value_display


   .. py:property:: include_empty_choice

      Return True if a "(None)" choice should be included, which filters
      out everything except empty relationships.


   .. py:method:: has_output()

      Return True if some choices would be output for this filter.



   .. py:method:: expected_parameters()

      Return the list of parameter names that are expected from the
      request's query string and that will be used by this filter.



   .. py:method:: field_admin_ordering(field, request, model_admin)

      Return the model admin's ordering for related field, if provided.



   .. py:method:: field_choices(field, request, model_admin)


   .. py:method:: choices(changelist)

      Return choices ready to be output in the template.

      `changelist` is the ChangeList to be displayed.



.. py:class:: BooleanFieldListFilter(field, request, params, model, model_admin, field_path)

   Bases: :py:obj:`FieldListFilter`


   .. py:attribute:: lookup_kwarg


   .. py:attribute:: lookup_kwarg2


   .. py:attribute:: lookup_val


   .. py:attribute:: lookup_val2


   .. py:method:: expected_parameters()

      Return the list of parameter names that are expected from the
      request's query string and that will be used by this filter.



   .. py:method:: choices(changelist)

      Return choices ready to be output in the template.

      `changelist` is the ChangeList to be displayed.



.. py:class:: ChoicesFieldListFilter(field, request, params, model, model_admin, field_path)

   Bases: :py:obj:`FieldListFilter`


   .. py:attribute:: lookup_kwarg


   .. py:attribute:: lookup_kwarg_isnull


   .. py:attribute:: lookup_val


   .. py:attribute:: lookup_val_isnull


   .. py:method:: expected_parameters()

      Return the list of parameter names that are expected from the
      request's query string and that will be used by this filter.



   .. py:method:: choices(changelist)

      Return choices ready to be output in the template.

      `changelist` is the ChangeList to be displayed.



.. py:class:: DateFieldListFilter(field, request, params, model, model_admin, field_path)

   Bases: :py:obj:`FieldListFilter`


   .. py:attribute:: field_generic


   .. py:attribute:: date_params


   .. py:attribute:: lookup_kwarg_since


   .. py:attribute:: lookup_kwarg_until


   .. py:attribute:: links


   .. py:method:: expected_parameters()

      Return the list of parameter names that are expected from the
      request's query string and that will be used by this filter.



   .. py:method:: choices(changelist)

      Return choices ready to be output in the template.

      `changelist` is the ChangeList to be displayed.



.. py:class:: AllValuesFieldListFilter(field, request, params, model, model_admin, field_path)

   Bases: :py:obj:`FieldListFilter`


   .. py:attribute:: lookup_kwarg


   .. py:attribute:: lookup_kwarg_isnull


   .. py:attribute:: lookup_val


   .. py:attribute:: lookup_val_isnull


   .. py:attribute:: empty_value_display


   .. py:attribute:: lookup_choices


   .. py:method:: expected_parameters()

      Return the list of parameter names that are expected from the
      request's query string and that will be used by this filter.



   .. py:method:: choices(changelist)

      Return choices ready to be output in the template.

      `changelist` is the ChangeList to be displayed.



.. py:class:: RelatedOnlyFieldListFilter(field, request, params, model, model_admin, field_path)

   Bases: :py:obj:`RelatedFieldListFilter`


   .. py:method:: field_choices(field, request, model_admin)


.. py:class:: EmptyFieldListFilter(field, request, params, model, model_admin, field_path)

   Bases: :py:obj:`FieldListFilter`


   .. py:attribute:: lookup_kwarg


   .. py:attribute:: lookup_val


   .. py:method:: queryset(request, queryset)

      Return the filtered queryset.



   .. py:method:: expected_parameters()

      Return the list of parameter names that are expected from the
      request's query string and that will be used by this filter.



   .. py:method:: choices(changelist)

      Return choices ready to be output in the template.

      `changelist` is the ChangeList to be displayed.



