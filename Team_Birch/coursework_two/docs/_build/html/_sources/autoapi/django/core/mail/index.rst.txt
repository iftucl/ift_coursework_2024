django.core.mail
================

.. py:module:: django.core.mail

.. autoapi-nested-parse::

   Tools for sending email.



Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/django/core/mail/backends/index
   /autoapi/django/core/mail/message/index
   /autoapi/django/core/mail/utils/index


Functions
---------

.. autoapisummary::

   django.core.mail.get_connection
   django.core.mail.send_mail
   django.core.mail.send_mass_mail
   django.core.mail.mail_admins
   django.core.mail.mail_managers


Package Contents
----------------

.. py:function:: get_connection(backend=None, fail_silently=False, **kwds)

   Load an email backend and return an instance of it.

   If backend is None (default), use settings.EMAIL_BACKEND.

   Both fail_silently and other keyword arguments are used in the
   constructor of the backend.


.. py:function:: send_mail(subject, message, from_email, recipient_list, fail_silently=False, auth_user=None, auth_password=None, connection=None, html_message=None)

   Easy wrapper for sending a single message to a recipient list. All members
   of the recipient list will see the other recipients in the 'To' field.

   If from_email is None, use the DEFAULT_FROM_EMAIL setting.
   If auth_user is None, use the EMAIL_HOST_USER setting.
   If auth_password is None, use the EMAIL_HOST_PASSWORD setting.

   Note: The API for this method is frozen. New code wanting to extend the
   functionality should use the EmailMessage class directly.


.. py:function:: send_mass_mail(datatuple, fail_silently=False, auth_user=None, auth_password=None, connection=None)

   Given a datatuple of (subject, message, from_email, recipient_list), send
   each message to each recipient list. Return the number of emails sent.

   If from_email is None, use the DEFAULT_FROM_EMAIL setting.
   If auth_user and auth_password are set, use them to log in.
   If auth_user is None, use the EMAIL_HOST_USER setting.
   If auth_password is None, use the EMAIL_HOST_PASSWORD setting.

   Note: The API for this method is frozen. New code wanting to extend the
   functionality should use the EmailMessage class directly.


.. py:function:: mail_admins(subject, message, fail_silently=False, connection=None, html_message=None)

   Send a message to the admins, as defined by the ADMINS setting.


.. py:function:: mail_managers(subject, message, fail_silently=False, connection=None, html_message=None)

   Send a message to the managers, as defined by the MANAGERS setting.


