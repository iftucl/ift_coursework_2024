django.core.cache.backends.db
=============================

.. py:module:: django.core.cache.backends.db

.. autoapi-nested-parse::

   Database cache backend.



Classes
-------

.. autoapisummary::

   django.core.cache.backends.db.Options
   django.core.cache.backends.db.BaseDatabaseCache
   django.core.cache.backends.db.DatabaseCache


Module Contents
---------------

.. py:class:: Options(table)

   A class that will quack like a Django model _meta class.

   This allows cache operations to be controlled by the router


   .. py:attribute:: db_table


   .. py:attribute:: app_label
      :value: 'django_cache'



   .. py:attribute:: model_name
      :value: 'cacheentry'



   .. py:attribute:: verbose_name
      :value: 'cache entry'



   .. py:attribute:: verbose_name_plural
      :value: 'cache entries'



   .. py:attribute:: object_name
      :value: 'CacheEntry'



   .. py:attribute:: abstract
      :value: False



   .. py:attribute:: managed
      :value: True



   .. py:attribute:: proxy
      :value: False



   .. py:attribute:: swapped
      :value: False



.. py:class:: BaseDatabaseCache(table, params)

   Bases: :py:obj:`django.core.cache.backends.base.BaseCache`


   .. py:attribute:: cache_model_class


.. py:class:: DatabaseCache(table, params)

   Bases: :py:obj:`BaseDatabaseCache`


   .. py:attribute:: pickle_protocol
      :value: 5



   .. py:method:: get(key, default=None, version=None)


   .. py:method:: get_many(keys, version=None)


   .. py:method:: set(key, value, timeout=DEFAULT_TIMEOUT, version=None)


   .. py:method:: add(key, value, timeout=DEFAULT_TIMEOUT, version=None)


   .. py:method:: touch(key, timeout=DEFAULT_TIMEOUT, version=None)


   .. py:method:: delete(key, version=None)


   .. py:method:: delete_many(keys, version=None)


   .. py:method:: has_key(key, version=None)


   .. py:method:: clear()


