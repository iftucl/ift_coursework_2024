django.test.html
================

.. py:module:: django.test.html

.. autoapi-nested-parse::

   Compare two HTML documents.



Attributes
----------

.. autoapisummary::

   django.test.html.ASCII_WHITESPACE
   django.test.html.BOOLEAN_ATTRIBUTES


Exceptions
----------

.. autoapisummary::

   django.test.html.HTMLParseError


Classes
-------

.. autoapisummary::

   django.test.html.Element
   django.test.html.RootElement
   django.test.html.Parser


Functions
---------

.. autoapisummary::

   django.test.html.normalize_whitespace
   django.test.html.normalize_attributes
   django.test.html.parse_html


Module Contents
---------------

.. py:data:: ASCII_WHITESPACE

.. py:data:: BOOLEAN_ATTRIBUTES

.. py:function:: normalize_whitespace(string)

.. py:function:: normalize_attributes(attributes)

.. py:class:: Element(name, attributes)

   .. py:attribute:: name


   .. py:attribute:: attributes


   .. py:attribute:: children
      :value: []



   .. py:method:: append(element)


   .. py:method:: finalize()


   .. py:method:: count(element)


.. py:class:: RootElement

   Bases: :py:obj:`Element`


.. py:exception:: HTMLParseError

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


.. py:class:: Parser

   Bases: :py:obj:`html.parser.HTMLParser`


   Find tags and other markup and call handler functions.

   Usage:
       p = HTMLParser()
       p.feed(data)
       ...
       p.close()

   Start tags are handled by calling self.handle_starttag() or
   self.handle_startendtag(); end tags by self.handle_endtag().  The
   data between tags is passed from the parser to the derived class
   by calling self.handle_data() with the data as argument (the data
   may be split up in arbitrary chunks).  If convert_charrefs is
   True the character references are converted automatically to the
   corresponding Unicode character (and self.handle_data() is no
   longer split in chunks), otherwise they are passed by calling
   self.handle_entityref() or self.handle_charref() with the string
   containing respectively the named or numeric reference as the
   argument.


   .. py:attribute:: SELF_CLOSING_TAGS


   .. py:attribute:: root


   .. py:attribute:: open_tags
      :value: []



   .. py:attribute:: element_positions


   .. py:method:: error(msg)


   .. py:method:: format_position(position=None, element=None)


   .. py:property:: current


   .. py:method:: handle_startendtag(tag, attrs)


   .. py:method:: handle_starttag(tag, attrs)


   .. py:method:: handle_endtag(tag)


   .. py:method:: handle_data(data)


.. py:function:: parse_html(html)

   Take a string that contains HTML and turn it into a Python object structure
   that can be easily compared against other HTML on semantic equivalence.
   Syntactical differences like which quotation is used on arguments will be
   ignored.


