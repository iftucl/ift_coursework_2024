django.views.i18n
=================

.. py:module:: django.views.i18n


Attributes
----------

.. autoapisummary::

   django.views.i18n.LANGUAGE_QUERY_PARAMETER
   django.views.i18n.js_catalog_template


Classes
-------

.. autoapisummary::

   django.views.i18n.JavaScriptCatalog
   django.views.i18n.JSONCatalog


Functions
---------

.. autoapisummary::

   django.views.i18n.set_language
   django.views.i18n.get_formats


Module Contents
---------------

.. py:data:: LANGUAGE_QUERY_PARAMETER
   :value: 'language'


.. py:function:: set_language(request)

   Redirect to a given URL while setting the chosen language in the session
   (if enabled) and in a cookie. The URL and the language code need to be
   specified in the request parameters.

   Since this view changes how the user will see the rest of the site, it must
   only be accessed as a POST request. If called as a GET request, it will
   redirect to the page in the request (the 'next' parameter) without changing
   any state.


.. py:function:: get_formats()

   Return all formats strings required for i18n to work.


.. py:data:: js_catalog_template
   :value: Multiline-String

   .. raw:: html

      <details><summary>Show Value</summary>

   .. code-block:: python

      """
      {% autoescape off %}
      'use strict';
      {
        const globals = this;
        const django = globals.django || (globals.django = {});
      
        {% if plural %}
        django.pluralidx = function(n) {
          const v = {{ plural }};
          if (typeof v === 'boolean') {
            return v ? 1 : 0;
          } else {
            return v;
          }
        };
        {% else %}
        django.pluralidx = function(count) { return (count == 1) ? 0 : 1; };
        {% endif %}
      
        /* gettext library */
      
        django.catalog = django.catalog || {};
        {% if catalog_str %}
        const newcatalog = {{ catalog_str }};
        for (const key in newcatalog) {
          django.catalog[key] = newcatalog[key];
        }
        {% endif %}
      
        if (!django.jsi18n_initialized) {
          django.gettext = function(msgid) {
            const value = django.catalog[msgid];
            if (typeof value === 'undefined') {
              return msgid;
            } else {
              return (typeof value === 'string') ? value : value[0];
            }
          };
      
          django.ngettext = function(singular, plural, count) {
            const value = django.catalog[singular];
            if (typeof value === 'undefined') {
              return (count == 1) ? singular : plural;
            } else {
              return value.constructor === Array ? value[django.pluralidx(count)] : value;
            }
          };
      
          django.gettext_noop = function(msgid) { return msgid; };
      
          django.pgettext = function(context, msgid) {
            let value = django.gettext(context + '\x04' + msgid);
            if (value.includes('\x04')) {
              value = msgid;
            }
            return value;
          };
      
          django.npgettext = function(context, singular, plural, count) {
            let value = django.ngettext(context + '\x04' + singular, context + '\x04' + plural, count);
            if (value.includes('\x04')) {
              value = django.ngettext(singular, plural, count);
            }
            return value;
          };
      
          django.interpolate = function(fmt, obj, named) {
            if (named) {
              return fmt.replace(/%\(\w+\)s/g, function(match){return String(obj[match.slice(2,-2)])});
            } else {
              return fmt.replace(/%s/g, function(match){return String(obj.shift())});
            }
          };
      
      
          /* formatting library */
      
          django.formats = {{ formats_str }};
      
          django.get_format = function(format_type) {
            const value = django.formats[format_type];
            if (typeof value === 'undefined') {
              return format_type;
            } else {
              return value;
            }
          };
      
          /* add to global namespace */
          globals.pluralidx = django.pluralidx;
          globals.gettext = django.gettext;
          globals.ngettext = django.ngettext;
          globals.gettext_noop = django.gettext_noop;
          globals.pgettext = django.pgettext;
          globals.npgettext = django.npgettext;
          globals.interpolate = django.interpolate;
          globals.get_format = django.get_format;
      
          django.jsi18n_initialized = true;
        }
      };
      {% endautoescape %}
      """

   .. raw:: html

      </details>



.. py:class:: JavaScriptCatalog

   Bases: :py:obj:`django.views.generic.View`


   Return the selected language catalog as a JavaScript library.

   Receive the list of packages to check for translations in the `packages`
   kwarg either from the extra dictionary passed to the path() function or as
   a plus-sign delimited string from the request. Default is 'django.conf'.

   You can override the gettext domain for this view, but usually you don't
   want to do that as JavaScript messages go to the djangojs domain. This
   might be needed if you deliver your JavaScript source from Django templates.


   .. py:attribute:: domain
      :value: 'djangojs'



   .. py:attribute:: packages
      :value: None



   .. py:method:: get(request, *args, **kwargs)


   .. py:method:: get_paths(packages)


   .. py:method:: get_plural()


   .. py:method:: get_catalog()


   .. py:method:: get_context_data(**kwargs)


   .. py:method:: render_to_response(context, **response_kwargs)


.. py:class:: JSONCatalog

   Bases: :py:obj:`JavaScriptCatalog`


   Return the selected language catalog as a JSON object.

   Receive the same parameters as JavaScriptCatalog and return a response
   with a JSON object of the following format:

       {
           "catalog": {
               # Translations catalog
           },
           "formats": {
               # Language formats for date, time, etc.
           },
           "plural": '...'  # Expression for plural forms, or null.
       }


   .. py:method:: render_to_response(context, **response_kwargs)


