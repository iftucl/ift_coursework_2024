django.core.cache.backends.locmem
=================================

.. py:module:: django.core.cache.backends.locmem

.. autoapi-nested-parse::

   Thread-safe in-memory cache backend.



Classes
-------

.. autoapisummary::

   django.core.cache.backends.locmem.LocMemCache


Module Contents
---------------

.. py:class:: LocMemCache(name, params)

   Bases: :py:obj:`django.core.cache.backends.base.BaseCache`


   .. py:attribute:: pickle_protocol
      :value: 5



   .. py:method:: add(key, value, timeout=DEFAULT_TIMEOUT, version=None)

      Set a value in the cache if the key does not already exist. If
      timeout is given, use that timeout for the key; otherwise use the
      default cache timeout.

      Return True if the value was stored, False otherwise.



   .. py:method:: get(key, default=None, version=None)

      Fetch a given key from the cache. If the key does not exist, return
      default, which itself defaults to None.



   .. py:method:: set(key, value, timeout=DEFAULT_TIMEOUT, version=None)

      Set a value in the cache. If timeout is given, use that timeout for the
      key; otherwise use the default cache timeout.



   .. py:method:: touch(key, timeout=DEFAULT_TIMEOUT, version=None)

      Update the key's expiry time using timeout. Return True if successful
      or False if the key does not exist.



   .. py:method:: incr(key, delta=1, version=None)

      Add delta to value in the cache. If the key does not exist, raise a
      ValueError exception.



   .. py:method:: has_key(key, version=None)

      Return True if the key is in the cache and has not expired.



   .. py:method:: delete(key, version=None)

      Delete a key from the cache and return whether it succeeded, failing
      silently.



   .. py:method:: clear()

      Remove *all* values from the cache at once.



