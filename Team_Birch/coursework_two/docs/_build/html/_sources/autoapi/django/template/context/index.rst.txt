django.template.context
=======================

.. py:module:: django.template.context


Exceptions
----------

.. autoapisummary::

   django.template.context.ContextPopException


Classes
-------

.. autoapisummary::

   django.template.context.ContextDict
   django.template.context.BaseContext
   django.template.context.Context
   django.template.context.RenderContext
   django.template.context.RequestContext


Functions
---------

.. autoapisummary::

   django.template.context.make_context


Module Contents
---------------

.. py:exception:: ContextPopException

   Bases: :py:obj:`Exception`


   pop() has been called more times than push()


.. py:class:: ContextDict(context, *args, **kwargs)

   Bases: :py:obj:`dict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: context


.. py:class:: BaseContext(dict_=None)

   .. py:method:: push(*args, **kwargs)


   .. py:method:: pop()


   .. py:method:: set_upward(key, value)

      Set a variable in one of the higher contexts if it exists there,
      otherwise in the current context.



   .. py:method:: get(key, otherwise=None)


   .. py:method:: setdefault(key, default=None)


   .. py:method:: new(values=None)

      Return a new context with the same properties, but with only the
      values given in 'values' stored.



   .. py:method:: flatten()

      Return self.dicts as one dictionary.



.. py:class:: Context(dict_=None, autoescape=True, use_l10n=None, use_tz=None)

   Bases: :py:obj:`BaseContext`


   A stack container for variable context


   .. py:attribute:: autoescape
      :value: True



   .. py:attribute:: use_l10n
      :value: None



   .. py:attribute:: use_tz
      :value: None



   .. py:attribute:: template_name
      :value: 'unknown'



   .. py:attribute:: render_context


   .. py:attribute:: template
      :value: None



   .. py:method:: bind_template(template)


   .. py:method:: update(other_dict)

      Push other_dict to the stack of dictionaries in the Context



.. py:class:: RenderContext(dict_=None)

   Bases: :py:obj:`BaseContext`


   A stack container for storing Template state.

   RenderContext simplifies the implementation of template Nodes by providing a
   safe place to store state between invocations of a node's `render` method.

   The RenderContext also provides scoping rules that are more sensible for
   'template local' variables. The render context stack is pushed before each
   template is rendered, creating a fresh scope with nothing in it. Name
   resolution fails if a variable is not found at the top of the RequestContext
   stack. Thus, variables are local to a specific template and don't affect the
   rendering of other templates as they would if they were stored in the normal
   template context.


   .. py:attribute:: template
      :value: None



   .. py:method:: get(key, otherwise=None)


   .. py:method:: push_state(template, isolated_context=True)


.. py:class:: RequestContext(request, dict_=None, processors=None, use_l10n=None, use_tz=None, autoescape=True)

   Bases: :py:obj:`Context`


   This subclass of template.Context automatically populates itself using
   the processors defined in the engine's configuration.
   Additional processors can be specified as a list of callables
   using the "processors" keyword argument.


   .. py:attribute:: request


   .. py:method:: bind_template(template)


   .. py:method:: new(values=None)

      Return a new context with the same properties, but with only the
      values given in 'values' stored.



.. py:function:: make_context(context, request=None, **kwargs)

   Create a suitable Context from a plain dict and optionally an HttpRequest.


