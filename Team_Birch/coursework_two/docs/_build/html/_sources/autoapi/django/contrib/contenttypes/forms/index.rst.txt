django.contrib.contenttypes.forms
=================================

.. py:module:: django.contrib.contenttypes.forms


Classes
-------

.. autoapisummary::

   django.contrib.contenttypes.forms.BaseGenericInlineFormSet


Functions
---------

.. autoapisummary::

   django.contrib.contenttypes.forms.generic_inlineformset_factory


Module Contents
---------------

.. py:class:: BaseGenericInlineFormSet(data=None, files=None, instance=None, save_as_new=False, prefix=None, queryset=None, **kwargs)

   Bases: :py:obj:`django.forms.models.BaseModelFormSet`


   A formset for generic inline objects to a parent.


   .. py:attribute:: instance
      :value: None



   .. py:attribute:: rel_name


   .. py:attribute:: save_as_new
      :value: False



   .. py:method:: initial_form_count()

      Return the number of forms that are required in this FormSet.



   .. py:method:: get_default_prefix()
      :classmethod:



   .. py:method:: save_new(form, commit=True)

      Save and return a new model instance for the given form.



.. py:function:: generic_inlineformset_factory(model, form=ModelForm, formset=BaseGenericInlineFormSet, ct_field='content_type', fk_field='object_id', fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None, validate_max=False, for_concrete_model=True, min_num=None, validate_min=False, absolute_max=None, can_delete_extra=True)

   Return a ``GenericInlineFormSet`` for the given kwargs.

   You must provide ``ct_field`` and ``fk_field`` if they are different from
   the defaults ``content_type`` and ``object_id`` respectively.


