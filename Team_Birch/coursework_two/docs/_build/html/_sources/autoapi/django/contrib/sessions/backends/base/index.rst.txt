django.contrib.sessions.backends.base
=====================================

.. py:module:: django.contrib.sessions.backends.base


Attributes
----------

.. autoapisummary::

   django.contrib.sessions.backends.base.VALID_KEY_CHARS


Exceptions
----------

.. autoapisummary::

   django.contrib.sessions.backends.base.CreateError
   django.contrib.sessions.backends.base.UpdateError


Classes
-------

.. autoapisummary::

   django.contrib.sessions.backends.base.SessionBase


Module Contents
---------------

.. py:data:: VALID_KEY_CHARS
   :value: 'abcdefghijklmnopqrstuvwxyz0123456789'


.. py:exception:: CreateError

   Bases: :py:obj:`Exception`


   Used internally as a consistent exception type to catch from save (see the
   docstring for SessionBase.save() for details).


.. py:exception:: UpdateError

   Bases: :py:obj:`Exception`


   Occurs if Django tries to update a session that was deleted.


.. py:class:: SessionBase(session_key=None)

   Base class for all Session classes.


   .. py:attribute:: TEST_COOKIE_NAME
      :value: 'testcookie'



   .. py:attribute:: TEST_COOKIE_VALUE
      :value: 'worked'



   .. py:attribute:: accessed
      :value: False



   .. py:attribute:: modified
      :value: False



   .. py:attribute:: serializer


   .. py:property:: key_salt


   .. py:method:: get(key, default=None)


   .. py:method:: pop(key, default=__not_given)


   .. py:method:: setdefault(key, value)


   .. py:method:: set_test_cookie()


   .. py:method:: test_cookie_worked()


   .. py:method:: delete_test_cookie()


   .. py:method:: encode(session_dict)

      Return the given session dictionary serialized and encoded as a string.



   .. py:method:: decode(session_data)


   .. py:method:: update(dict_)


   .. py:method:: has_key(key)


   .. py:method:: keys()


   .. py:method:: values()


   .. py:method:: items()


   .. py:method:: clear()


   .. py:method:: is_empty()

      Return True when there is no session_key and the session is empty.



   .. py:attribute:: session_key


   .. py:method:: get_session_cookie_age()


   .. py:method:: get_expiry_age(**kwargs)

      Get the number of seconds until the session expires.

      Optionally, this function accepts `modification` and `expiry` keyword
      arguments specifying the modification and expiry of the session.



   .. py:method:: get_expiry_date(**kwargs)

      Get session the expiry date (as a datetime object).

      Optionally, this function accepts `modification` and `expiry` keyword
      arguments specifying the modification and expiry of the session.



   .. py:method:: set_expiry(value)

      Set a custom expiration for the session. ``value`` can be an integer,
      a Python ``datetime`` or ``timedelta`` object or ``None``.

      If ``value`` is an integer, the session will expire after that many
      seconds of inactivity. If set to ``0`` then the session will expire on
      browser close.

      If ``value`` is a ``datetime`` or ``timedelta`` object, the session
      will expire at that specific future time.

      If ``value`` is ``None``, the session uses the global session expiry
      policy.



   .. py:method:: get_expire_at_browser_close()

      Return ``True`` if the session is set to expire when the browser
      closes, and ``False`` if there's an expiry date. Use
      ``get_expiry_date()`` or ``get_expiry_age()`` to find the actual expiry
      date/age, if there is one.



   .. py:method:: flush()

      Remove the current session data from the database and regenerate the
      key.



   .. py:method:: cycle_key()

      Create a new session key, while retaining the current session data.



   .. py:method:: exists(session_key)
      :abstractmethod:


      Return True if the given session_key already exists.



   .. py:method:: create()
      :abstractmethod:


      Create a new session instance. Guaranteed to create a new object with
      a unique key and will have saved the result once (with empty data)
      before the method returns.



   .. py:method:: save(must_create=False)
      :abstractmethod:


      Save the session data. If 'must_create' is True, create a new session
      object (or raise CreateError). Otherwise, only update an existing
      object and don't create one (raise UpdateError if needed).



   .. py:method:: delete(session_key=None)
      :abstractmethod:


      Delete the session data under this key. If the key is None, use the
      current session key value.



   .. py:method:: load()
      :abstractmethod:


      Load the session data and return a dictionary.



   .. py:method:: clear_expired()
      :classmethod:

      :abstractmethod:


      Remove expired sessions from the session store.

      If this operation isn't possible on a given backend, it should raise
      NotImplementedError. If it isn't necessary, because the backend has
      a built-in expiration mechanism, it should be a no-op.



