django.utils.translation.trans_real
===================================

.. py:module:: django.utils.translation.trans_real

.. autoapi-nested-parse::

   Translation helper functions.



Attributes
----------

.. autoapisummary::

   django.utils.translation.trans_real.CONTEXT_SEPARATOR
   django.utils.translation.trans_real.ACCEPT_LANGUAGE_HEADER_MAX_LENGTH
   django.utils.translation.trans_real.accept_language_re
   django.utils.translation.trans_real.language_code_re
   django.utils.translation.trans_real.language_code_prefix_re


Classes
-------

.. autoapisummary::

   django.utils.translation.trans_real.TranslationCatalog
   django.utils.translation.trans_real.DjangoTranslation


Functions
---------

.. autoapisummary::

   django.utils.translation.trans_real.reset_cache
   django.utils.translation.trans_real.translation
   django.utils.translation.trans_real.activate
   django.utils.translation.trans_real.deactivate
   django.utils.translation.trans_real.deactivate_all
   django.utils.translation.trans_real.get_language
   django.utils.translation.trans_real.get_language_bidi
   django.utils.translation.trans_real.catalog
   django.utils.translation.trans_real.gettext
   django.utils.translation.trans_real.pgettext
   django.utils.translation.trans_real.gettext_noop
   django.utils.translation.trans_real.do_ntranslate
   django.utils.translation.trans_real.ngettext
   django.utils.translation.trans_real.npgettext
   django.utils.translation.trans_real.all_locale_paths
   django.utils.translation.trans_real.check_for_language
   django.utils.translation.trans_real.get_languages
   django.utils.translation.trans_real.get_supported_language_variant
   django.utils.translation.trans_real.get_language_from_path
   django.utils.translation.trans_real.get_language_from_request
   django.utils.translation.trans_real.parse_accept_lang_header


Module Contents
---------------

.. py:data:: CONTEXT_SEPARATOR
   :value: '\x04'


.. py:data:: ACCEPT_LANGUAGE_HEADER_MAX_LENGTH
   :value: 500


.. py:data:: accept_language_re

.. py:data:: language_code_re

.. py:data:: language_code_prefix_re

.. py:function:: reset_cache(*, setting, **kwargs)

   Reset global state when LANGUAGES setting has been changed, as some
   languages should no longer be accepted.


.. py:class:: TranslationCatalog(trans=None)

   Simulate a dict for DjangoTranslation._catalog so as multiple catalogs
   with different plural equations are kept separate.


   .. py:method:: items()


   .. py:method:: keys()


   .. py:method:: update(trans)


   .. py:method:: get(key, default=None)


   .. py:method:: plural(msgid, num)


.. py:class:: DjangoTranslation(language, domain=None, localedirs=None)

   Bases: :py:obj:`gettext.GNUTranslations`


   Set up the GNUTranslations context with regard to output charset.

   This translation object will be constructed out of multiple GNUTranslations
   objects by merging their catalogs. It will construct an object for the
   requested language and add a fallback to the default language, if it's
   different from the requested language.


   .. py:attribute:: domain
      :value: 'django'



   .. py:attribute:: plural


   .. py:method:: merge(other)

      Merge another translation into this catalog.



   .. py:method:: language()

      Return the translation language.



   .. py:method:: to_language()

      Return the translation language name.



   .. py:method:: ngettext(msgid1, msgid2, n)


.. py:function:: translation(language)

   Return a translation object in the default 'django' domain.


.. py:function:: activate(language)

   Fetch the translation object for a given language and install it as the
   current translation object for the current thread.


.. py:function:: deactivate()

   Uninstall the active translation object so that further _() calls resolve
   to the default translation object.


.. py:function:: deactivate_all()

   Make the active translation object a NullTranslations() instance. This is
   useful when we want delayed translations to appear as the original string
   for some reason.


.. py:function:: get_language()

   Return the currently selected language.


.. py:function:: get_language_bidi()

   Return selected language's BiDi layout.

   * False = left-to-right layout
   * True = right-to-left layout


.. py:function:: catalog()

   Return the current active catalog for further processing.
   This can be used if you need to modify the catalog or want to access the
   whole message catalog instead of just translating one string.


.. py:function:: gettext(message)

   Translate the 'message' string. It uses the current thread to find the
   translation object to use. If no current translation is activated, the
   message will be run through the default translation object.


.. py:function:: pgettext(context, message)

.. py:function:: gettext_noop(message)

   Mark strings for translation but don't translate them now. This can be
   used to store strings in global variables that should stay in the base
   language (because they might be used externally) and will be translated
   later.


.. py:function:: do_ntranslate(singular, plural, number, translation_function)

.. py:function:: ngettext(singular, plural, number)

   Return a string of the translation of either the singular or plural,
   based on the number.


.. py:function:: npgettext(context, singular, plural, number)

.. py:function:: all_locale_paths()

   Return a list of paths to user-provides languages files.


.. py:function:: check_for_language(lang_code)

   Check whether there is a global language file for the given language
   code. This is used to decide whether a user-provided language is
   available.

   lru_cache should have a maxsize to prevent from memory exhaustion attacks,
   as the provided language codes are taken from the HTTP request. See also
   <https://www.djangoproject.com/weblog/2007/oct/26/security-fix/>.


.. py:function:: get_languages()

   Cache of settings.LANGUAGES in a dictionary for easy lookups by key.
   Convert keys to lowercase as they should be treated as case-insensitive.


.. py:function:: get_supported_language_variant(lang_code, strict=False)

   Return the language code that's listed in supported languages, possibly
   selecting a more generic variant. Raise LookupError if nothing is found.

   If `strict` is False (the default), look for a country-specific variant
   when neither the language code nor its generic variant is found.

   lru_cache should have a maxsize to prevent from memory exhaustion attacks,
   as the provided language codes are taken from the HTTP request. See also
   <https://www.djangoproject.com/weblog/2007/oct/26/security-fix/>.


.. py:function:: get_language_from_path(path, strict=False)

   Return the language code if there's a valid language code found in `path`.

   If `strict` is False (the default), look for a country-specific variant
   when neither the language code nor its generic variant is found.


.. py:function:: get_language_from_request(request, check_path=False)

   Analyze the request to find what language the user wants the system to
   show. Only languages listed in settings.LANGUAGES are taken into account.
   If the user requests a sublanguage where we have a main language, we send
   out the main language.

   If check_path is True, the URL path prefix will be checked for a language
   code, otherwise this is skipped for backwards compatibility.


.. py:function:: parse_accept_lang_header(lang_string)

   Parse the value of the Accept-Language header up to a maximum length.

   The value of the header is truncated to a maximum length to avoid potential
   denial of service and memory exhaustion attacks. Excessive memory could be
   used if the raw value is very large as it would be cached due to the use of
   functools.lru_cache() to avoid repetitive parsing of common header values.


