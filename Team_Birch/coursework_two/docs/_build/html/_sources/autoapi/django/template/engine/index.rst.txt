django.template.engine
======================

.. py:module:: django.template.engine


Classes
-------

.. autoapisummary::

   django.template.engine.Engine


Module Contents
---------------

.. py:class:: Engine(dirs=None, app_dirs=False, context_processors=None, debug=False, loaders=None, string_if_invalid='', file_charset='utf-8', libraries=None, builtins=None, autoescape=True)

   .. py:attribute:: default_builtins
      :value: ['django.template.defaulttags', 'django.template.defaultfilters', 'django.template.loader_tags']



   .. py:attribute:: dirs
      :value: None



   .. py:attribute:: app_dirs
      :value: False



   .. py:attribute:: autoescape
      :value: True



   .. py:attribute:: context_processors
      :value: None



   .. py:attribute:: debug
      :value: False



   .. py:attribute:: loaders
      :value: None



   .. py:attribute:: string_if_invalid
      :value: ''



   .. py:attribute:: file_charset
      :value: 'utf-8'



   .. py:attribute:: libraries
      :value: None



   .. py:attribute:: template_libraries


   .. py:attribute:: builtins


   .. py:attribute:: template_builtins


   .. py:method:: get_default()
      :staticmethod:


      Return the first DjangoTemplates backend that's configured, or raise
      ImproperlyConfigured if none are configured.

      This is required for preserving historical APIs that rely on a
      globally available, implicitly configured engine such as:

      >>> from django.template import Context, Template
      >>> template = Template("Hello {{ name }}!")
      >>> context = Context({'name': "world"})
      >>> template.render(context)
      'Hello world!'



   .. py:method:: template_context_processors()


   .. py:method:: get_template_builtins(builtins)


   .. py:method:: get_template_libraries(libraries)


   .. py:method:: template_loaders()


   .. py:method:: get_template_loaders(template_loaders)


   .. py:method:: find_template_loader(loader)


   .. py:method:: find_template(name, dirs=None, skip=None)


   .. py:method:: from_string(template_code)

      Return a compiled Template object for the given template code,
      handling template inheritance recursively.



   .. py:method:: get_template(template_name)

      Return a compiled Template object for the given template name,
      handling template inheritance recursively.



   .. py:method:: render_to_string(template_name, context=None)

      Render the template specified by template_name with the given context.
      For use in Django's test suite.



   .. py:method:: select_template(template_name_list)

      Given a list of template names, return the first that can be loaded.



