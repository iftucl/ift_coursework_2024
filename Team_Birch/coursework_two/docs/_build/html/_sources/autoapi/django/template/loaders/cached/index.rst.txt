django.template.loaders.cached
==============================

.. py:module:: django.template.loaders.cached

.. autoapi-nested-parse::

   Wrapper class that takes a list of template loaders as an argument and attempts
   to load templates from them in order, caching the result.



Classes
-------

.. autoapisummary::

   django.template.loaders.cached.Loader


Module Contents
---------------

.. py:class:: Loader(engine, loaders)

   Bases: :py:obj:`django.template.loaders.base.Loader`


   .. py:attribute:: get_template_cache


   .. py:attribute:: loaders


   .. py:method:: get_dirs()


   .. py:method:: get_contents(origin)


   .. py:method:: get_template(template_name, skip=None)

      Perform the caching that gives this loader its name. Often many of the
      templates attempted will be missing, so memory use is of concern here.
      To keep it in check, caching behavior is a little complicated when a
      template is not found. See ticket #26306 for more details.

      With template debugging disabled, cache the TemplateDoesNotExist class
      for every missing template and raise a new instance of it after
      fetching it from the cache.

      With template debugging enabled, a unique TemplateDoesNotExist object
      is cached for each missing template to preserve debug data. When
      raising an exception, Python sets __traceback__, __context__, and
      __cause__ attributes on it. Those attributes can contain references to
      all sorts of objects up the call chain and caching them creates a
      memory leak. Thus, unraised copies of the exceptions are cached and
      copies of those copies are raised after they're fetched from the cache.



   .. py:method:: get_template_sources(template_name)


   .. py:method:: cache_key(template_name, skip=None)

      Generate a cache key for the template name and skip.

      If skip is provided, only origins that match template_name are included
      in the cache key. This ensures each template is only parsed and cached
      once if contained in different extend chains like:

          x -> a -> a
          y -> a -> a
          z -> a -> a



   .. py:method:: generate_hash(values)


   .. py:method:: reset()

      Empty the template cache.



