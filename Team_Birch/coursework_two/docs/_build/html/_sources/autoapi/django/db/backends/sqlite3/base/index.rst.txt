django.db.backends.sqlite3.base
===============================

.. py:module:: django.db.backends.sqlite3.base

.. autoapi-nested-parse::

   SQLite backend for the sqlite3 module in the standard library.



Attributes
----------

.. autoapisummary::

   django.db.backends.sqlite3.base.FORMAT_QMARK_REGEX


Classes
-------

.. autoapisummary::

   django.db.backends.sqlite3.base.DatabaseWrapper
   django.db.backends.sqlite3.base.SQLiteCursorWrapper


Functions
---------

.. autoapisummary::

   django.db.backends.sqlite3.base.decoder
   django.db.backends.sqlite3.base.adapt_date
   django.db.backends.sqlite3.base.adapt_datetime


Module Contents
---------------

.. py:function:: decoder(conv_func)

   Convert bytestrings from Python's sqlite3 interface to a regular string.


.. py:function:: adapt_date(val)

.. py:function:: adapt_datetime(val)

.. py:class:: DatabaseWrapper

   Bases: :py:obj:`django.db.backends.base.base.BaseDatabaseWrapper`


   .. py:attribute:: vendor
      :value: 'sqlite'



   .. py:attribute:: display_name
      :value: 'SQLite'



   .. py:attribute:: data_types


   .. py:attribute:: data_type_check_constraints


   .. py:attribute:: data_types_suffix


   .. py:attribute:: operators


   .. py:attribute:: pattern_esc
      :value: "REPLACE(REPLACE(REPLACE({}, '\\', '\\\\'), '%%', '\\%%'), '_', '\\_')"



   .. py:attribute:: pattern_ops


   .. py:attribute:: Database


   .. py:attribute:: SchemaEditorClass


   .. py:attribute:: client_class


   .. py:attribute:: creation_class


   .. py:attribute:: features_class


   .. py:attribute:: introspection_class


   .. py:attribute:: ops_class


   .. py:method:: get_connection_params()


   .. py:method:: get_database_version()


   .. py:method:: get_new_connection(conn_params)


   .. py:method:: create_cursor(name=None)


   .. py:method:: close()


   .. py:method:: disable_constraint_checking()


   .. py:method:: enable_constraint_checking()


   .. py:method:: check_constraints(table_names=None)

      Check each table name in `table_names` for rows with invalid foreign
      key references. This method is intended to be used in conjunction with
      `disable_constraint_checking()` and `enable_constraint_checking()`, to
      determine if rows with invalid references were entered while constraint
      checks were off.



   .. py:method:: is_usable()


   .. py:method:: is_in_memory_db()


.. py:data:: FORMAT_QMARK_REGEX

.. py:class:: SQLiteCursorWrapper

   Bases: :py:obj:`sqlite3.dbapi2.Cursor`


   Django uses the "format" and "pyformat" styles, but Python's sqlite3 module
   supports neither of these styles.

   This wrapper performs the following conversions:

   - "format" style to "qmark" style
   - "pyformat" style to "named" style

   In both cases, if you want to use a literal "%s", you'll need to use "%%s".


   .. py:method:: execute(query, params=None)


   .. py:method:: executemany(query, param_list)


   .. py:method:: convert_query(query, *, param_names=None)


