django.db.models.functions.math
===============================

.. py:module:: django.db.models.functions.math


Classes
-------

.. autoapisummary::

   django.db.models.functions.math.Abs
   django.db.models.functions.math.ACos
   django.db.models.functions.math.ASin
   django.db.models.functions.math.ATan
   django.db.models.functions.math.ATan2
   django.db.models.functions.math.Ceil
   django.db.models.functions.math.Cos
   django.db.models.functions.math.Cot
   django.db.models.functions.math.Degrees
   django.db.models.functions.math.Exp
   django.db.models.functions.math.Floor
   django.db.models.functions.math.Ln
   django.db.models.functions.math.Log
   django.db.models.functions.math.Mod
   django.db.models.functions.math.Pi
   django.db.models.functions.math.Power
   django.db.models.functions.math.Radians
   django.db.models.functions.math.Random
   django.db.models.functions.math.Round
   django.db.models.functions.math.Sign
   django.db.models.functions.math.Sin
   django.db.models.functions.math.Sqrt
   django.db.models.functions.math.Tan


Module Contents
---------------

.. py:class:: Abs(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'ABS'



   .. py:attribute:: lookup_name
      :value: 'abs'



.. py:class:: ACos(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'ACOS'



   .. py:attribute:: lookup_name
      :value: 'acos'



.. py:class:: ASin(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'ASIN'



   .. py:attribute:: lookup_name
      :value: 'asin'



.. py:class:: ATan(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'ATAN'



   .. py:attribute:: lookup_name
      :value: 'atan'



.. py:class:: ATan2(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`django.db.models.expressions.Func`


   An SQL function call.


   .. py:attribute:: function
      :value: 'ATAN2'



   .. py:attribute:: arity
      :value: 2



   .. py:method:: as_sqlite(compiler, connection, **extra_context)


.. py:class:: Ceil(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'CEILING'



   .. py:attribute:: lookup_name
      :value: 'ceil'



   .. py:method:: as_oracle(compiler, connection, **extra_context)


.. py:class:: Cos(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'COS'



   .. py:attribute:: lookup_name
      :value: 'cos'



.. py:class:: Cot(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'COT'



   .. py:attribute:: lookup_name
      :value: 'cot'



   .. py:method:: as_oracle(compiler, connection, **extra_context)


.. py:class:: Degrees(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'DEGREES'



   .. py:attribute:: lookup_name
      :value: 'degrees'



   .. py:method:: as_oracle(compiler, connection, **extra_context)


.. py:class:: Exp(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'EXP'



   .. py:attribute:: lookup_name
      :value: 'exp'



.. py:class:: Floor(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'FLOOR'



   .. py:attribute:: lookup_name
      :value: 'floor'



.. py:class:: Ln(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'LN'



   .. py:attribute:: lookup_name
      :value: 'ln'



.. py:class:: Log(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.FixDecimalInputMixin`, :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`django.db.models.expressions.Func`


   An SQL function call.


   .. py:attribute:: function
      :value: 'LOG'



   .. py:attribute:: arity
      :value: 2



   .. py:method:: as_sqlite(compiler, connection, **extra_context)


.. py:class:: Mod(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.FixDecimalInputMixin`, :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`django.db.models.expressions.Func`


   An SQL function call.


   .. py:attribute:: function
      :value: 'MOD'



   .. py:attribute:: arity
      :value: 2



.. py:class:: Pi(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`django.db.models.expressions.Func`


   An SQL function call.


   .. py:attribute:: function
      :value: 'PI'



   .. py:attribute:: arity
      :value: 0



   .. py:method:: as_oracle(compiler, connection, **extra_context)


.. py:class:: Power(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`django.db.models.expressions.Func`


   An SQL function call.


   .. py:attribute:: function
      :value: 'POWER'



   .. py:attribute:: arity
      :value: 2



.. py:class:: Radians(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'RADIANS'



   .. py:attribute:: lookup_name
      :value: 'radians'



   .. py:method:: as_oracle(compiler, connection, **extra_context)


.. py:class:: Random(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`django.db.models.expressions.Func`


   An SQL function call.


   .. py:attribute:: function
      :value: 'RANDOM'



   .. py:attribute:: arity
      :value: 0



   .. py:method:: as_mysql(compiler, connection, **extra_context)


   .. py:method:: as_oracle(compiler, connection, **extra_context)


   .. py:method:: as_sqlite(compiler, connection, **extra_context)


   .. py:method:: get_group_by_cols()


.. py:class:: Round(expression, precision=0, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.FixDecimalInputMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'ROUND'



   .. py:attribute:: lookup_name
      :value: 'round'



   .. py:attribute:: arity
      :value: None



   .. py:method:: as_sqlite(compiler, connection, **extra_context)


.. py:class:: Sign(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'SIGN'



   .. py:attribute:: lookup_name
      :value: 'sign'



.. py:class:: Sin(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'SIN'



   .. py:attribute:: lookup_name
      :value: 'sin'



.. py:class:: Sqrt(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'SQRT'



   .. py:attribute:: lookup_name
      :value: 'sqrt'



.. py:class:: Tan(*expressions, output_field=None, **extra)

   Bases: :py:obj:`django.db.models.functions.mixins.NumericOutputFieldMixin`, :py:obj:`django.db.models.lookups.Transform`


   RegisterLookupMixin() is first so that get_lookup() and get_transform()
   first examine self and then check output_field.


   .. py:attribute:: function
      :value: 'TAN'



   .. py:attribute:: lookup_name
      :value: 'tan'



