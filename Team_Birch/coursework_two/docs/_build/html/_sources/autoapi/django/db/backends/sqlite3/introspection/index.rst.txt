django.db.backends.sqlite3.introspection
========================================

.. py:module:: django.db.backends.sqlite3.introspection


Attributes
----------

.. autoapisummary::

   django.db.backends.sqlite3.introspection.FieldInfo
   django.db.backends.sqlite3.introspection.field_size_re


Classes
-------

.. autoapisummary::

   django.db.backends.sqlite3.introspection.FlexibleFieldLookupDict
   django.db.backends.sqlite3.introspection.DatabaseIntrospection


Functions
---------

.. autoapisummary::

   django.db.backends.sqlite3.introspection.get_field_size


Module Contents
---------------

.. py:data:: FieldInfo

.. py:data:: field_size_re

.. py:function:: get_field_size(name)

   Extract the size number from a "varchar(11)" type name


.. py:class:: FlexibleFieldLookupDict

   .. py:attribute:: base_data_types_reverse


.. py:class:: DatabaseIntrospection

   Bases: :py:obj:`django.db.backends.base.introspection.BaseDatabaseIntrospection`


   .. py:attribute:: data_types_reverse


   .. py:method:: get_field_type(data_type, description)


   .. py:method:: get_table_list(cursor)

      Return a list of table and view names in the current database.



   .. py:method:: get_table_description(cursor, table_name)

      Return a description of the table with the DB-API cursor.description
      interface.



   .. py:method:: get_sequences(cursor, table_name, table_fields=())


   .. py:method:: get_relations(cursor, table_name)

      Return a dictionary of {column_name: (ref_column_name, ref_table_name)}
      representing all foreign keys in the given table.



   .. py:method:: get_primary_key_columns(cursor, table_name)


   .. py:method:: get_constraints(cursor, table_name)

      Retrieve any constraints or keys (unique, pk, fk, check, index) across
      one or more columns.



