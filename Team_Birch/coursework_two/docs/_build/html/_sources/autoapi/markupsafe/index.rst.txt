markupsafe
==========

.. py:module:: markupsafe


Classes
-------

.. autoapisummary::

   markupsafe.Markup
   markupsafe.EscapeFormatter


Functions
---------

.. autoapisummary::

   markupsafe.escape
   markupsafe.escape_silent
   markupsafe.soft_str


Package Contents
----------------

.. py:function:: escape(s: Any, /) -> Markup

   Replace the characters ``&``, ``<``, ``>``, ``'``, and ``"`` in
   the string with HTML-safe sequences. Use this if you need to display
   text that might contain such characters in HTML.

   If the object has an ``__html__`` method, it is called and the
   return value is assumed to already be safe for HTML.

   :param s: An object to be converted to a string and escaped.
   :return: A :class:`Markup` string with the escaped text.


.. py:function:: escape_silent(s: Any | None, /) -> Markup

   Like :func:`escape` but treats ``None`` as the empty string.
   Useful with optional values, as otherwise you get the string
   ``'None'`` when the value is ``None``.

   >>> escape(None)
   Markup('None')
   >>> escape_silent(None)
   Markup('')


.. py:function:: soft_str(s: Any, /) -> str

   Convert an object to a string if it isn't already. This preserves
   a :class:`Markup` string rather than converting it back to a basic
   string, so it will still be marked as safe and won't be escaped
   again.

   >>> value = escape("<User 1>")
   >>> value
   Markup('&lt;User 1&gt;')
   >>> escape(str(value))
   Markup('&amp;lt;User 1&amp;gt;')
   >>> escape(soft_str(value))
   Markup('&lt;User 1&gt;')


.. py:class:: Markup

   Bases: :py:obj:`str`


   A string that is ready to be safely inserted into an HTML or XML
   document, either because it was escaped or because it was marked
   safe.

   Passing an object to the constructor converts it to text and wraps
   it to mark it safe without escaping. To escape the text, use the
   :meth:`escape` class method instead.

   >>> Markup("Hello, <em>World</em>!")
   Markup('Hello, <em>World</em>!')
   >>> Markup(42)
   Markup('42')
   >>> Markup.escape("Hello, <em>World</em>!")
   Markup('Hello &lt;em&gt;World&lt;/em&gt;!')

   This implements the ``__html__()`` interface that some frameworks
   use. Passing an object that implements ``__html__()`` will wrap the
   output of that method, marking it safe.

   >>> class Foo:
   ...     def __html__(self):
   ...         return '<a href="/foo">foo</a>'
   ...
   >>> Markup(Foo())
   Markup('<a href="/foo">foo</a>')

   This is a subclass of :class:`str`. It has the same methods, but
   escapes their arguments and returns a ``Markup`` instance.

   >>> Markup("<em>%s</em>") % ("foo & bar",)
   Markup('<em>foo &amp; bar</em>')
   >>> Markup("<em>Hello</em> ") + "<foo>"
   Markup('<em>Hello</em> &lt;foo&gt;')


   .. py:method:: join(iterable: collections.abc.Iterable[str | _HasHTML], /) -> typing_extensions.Self

      Concatenate any number of strings.

      The string whose method is called is inserted in between each given string.
      The result is returned as a new string.

      Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'



   .. py:method:: split(/, sep: SupportsIndex = None, maxsplit=-1) -> list[typing_extensions.Self]

      Return a list of the substrings in the string, using sep as the separator string.

        sep
          The separator used to split the string.

          When set to None (the default value), will split on any whitespace
          character (including \n \r \t \f and spaces) and will discard
          empty strings from the result.
        maxsplit
          Maximum number of splits.
          -1 (the default value) means no limit.

      Splitting starts at the front of the string and works to the end.

      Note, str.split() is mainly useful for data that has been intentionally
      delimited.  With natural text that includes punctuation, consider using
      the regular expression module.



   .. py:method:: rsplit(/, sep: SupportsIndex = None, maxsplit=-1) -> list[typing_extensions.Self]

      Return a list of the substrings in the string, using sep as the separator string.

        sep
          The separator used to split the string.

          When set to None (the default value), will split on any whitespace
          character (including \n \r \t \f and spaces) and will discard
          empty strings from the result.
        maxsplit
          Maximum number of splits.
          -1 (the default value) means no limit.

      Splitting starts at the end of the string and works to the front.



   .. py:method:: splitlines(/, keepends=False) -> list[typing_extensions.Self]

      Return a list of the lines in the string, breaking at line boundaries.

      Line breaks are not included in the resulting list unless keepends is given and
      true.



   .. py:method:: unescape(/) -> str

      Convert escaped markup back into a text string. This replaces
      HTML entities with the characters they represent.

      >>> Markup("Main &raquo; <em>About</em>").unescape()
      'Main » <em>About</em>'



   .. py:method:: striptags(/) -> str

      :meth:`unescape` the markup, remove tags, and normalize
      whitespace to single spaces.

      >>> Markup("Main &raquo;        <em>About</em>").striptags()
      'Main » About'



   .. py:method:: escape(s: Any, /) -> typing_extensions.Self
      :classmethod:


      Escape a string. Calls :func:`escape` and ensures that for
      subclasses the correct type is returned.



   .. py:method:: capitalize(/) -> typing_extensions.Self

      Return a capitalized version of the string.

      More specifically, make the first character have upper case and the rest lower
      case.



   .. py:method:: title(/) -> typing_extensions.Self

      Return a version of the string where each word is titlecased.

      More specifically, words start with uppercased characters and all remaining
      cased characters have lower case.



   .. py:method:: lower(/) -> typing_extensions.Self

      Return a copy of the string converted to lowercase.



   .. py:method:: upper(/) -> typing_extensions.Self

      Return a copy of the string converted to uppercase.



   .. py:method:: replace(old: str, new: str, count: SupportsIndex = -1, /) -> typing_extensions.Self

      Return a copy with all occurrences of substring old replaced by new.

        count
          Maximum number of occurrences to replace.
          -1 (the default value) means replace all occurrences.

      If the optional argument count is given, only the first count occurrences are
      replaced.



   .. py:method:: ljust(width: SupportsIndex, fillchar: str = ' ', /) -> typing_extensions.Self

      Return a left-justified string of length width.

      Padding is done using the specified fill character (default is a space).



   .. py:method:: rjust(width: SupportsIndex, fillchar: str = ' ', /) -> typing_extensions.Self

      Return a right-justified string of length width.

      Padding is done using the specified fill character (default is a space).



   .. py:method:: lstrip(chars: str | None = None, /) -> typing_extensions.Self

      Return a copy of the string with leading whitespace removed.

      If chars is given and not None, remove characters in chars instead.



   .. py:method:: rstrip(chars: str | None = None, /) -> typing_extensions.Self

      Return a copy of the string with trailing whitespace removed.

      If chars is given and not None, remove characters in chars instead.



   .. py:method:: center(width: SupportsIndex, fillchar: str = ' ', /) -> typing_extensions.Self

      Return a centered string of length width.

      Padding is done using the specified fill character (default is a space).



   .. py:method:: strip(chars: str | None = None, /) -> typing_extensions.Self

      Return a copy of the string with leading and trailing whitespace removed.

      If chars is given and not None, remove characters in chars instead.



   .. py:method:: translate(table: collections.abc.Mapping[int, str | int | None], /) -> str

      Replace each character in the string using the given translation table.

        table
          Translation table, which must be a mapping of Unicode ordinals to
          Unicode ordinals, strings, or None.

      The table must implement lookup/indexing via __getitem__, for instance a
      dictionary or list.  If this operation raises LookupError, the character is
      left untouched.  Characters mapped to None are deleted.



   .. py:method:: expandtabs(/, tabsize=8) -> typing_extensions.Self

      Return a copy where all tab characters are expanded using spaces.

      If tabsize is not given, a tab size of 8 characters is assumed.



   .. py:method:: swapcase(/) -> typing_extensions.Self

      Convert uppercase characters to lowercase and lowercase characters to uppercase.



   .. py:method:: zfill(width: SupportsIndex, /) -> typing_extensions.Self

      Pad a numeric string with zeros on the left, to fill a field of the given width.

      The string is never truncated.



   .. py:method:: casefold(/) -> typing_extensions.Self

      Return a version of the string suitable for caseless comparisons.



   .. py:method:: removeprefix(prefix: str, /) -> typing_extensions.Self

      Return a str with the given prefix string removed if present.

      If the string starts with the prefix string, return string[len(prefix):].
      Otherwise, return a copy of the original string.



   .. py:method:: removesuffix(suffix: str) -> typing_extensions.Self

      Return a str with the given suffix string removed if present.

      If the string ends with the suffix string and that suffix is not empty,
      return string[:-len(suffix)]. Otherwise, return a copy of the original
      string.



   .. py:method:: partition(sep: str, /) -> tuple[typing_extensions.Self, typing_extensions.Self, typing_extensions.Self]

      Partition the string into three parts using the given separator.

      This will search for the separator in the string.  If the separator is found,
      returns a 3-tuple containing the part before the separator, the separator
      itself, and the part after it.

      If the separator is not found, returns a 3-tuple containing the original string
      and two empty strings.



   .. py:method:: rpartition(sep: str, /) -> tuple[typing_extensions.Self, typing_extensions.Self, typing_extensions.Self]

      Partition the string into three parts using the given separator.

      This will search for the separator in the string, starting at the end. If
      the separator is found, returns a 3-tuple containing the part before the
      separator, the separator itself, and the part after it.

      If the separator is not found, returns a 3-tuple containing two empty strings
      and the original string.



   .. py:method:: format(*args: Any, **kwargs: Any) -> typing_extensions.Self

      S.format(*args, **kwargs) -> str

      Return a formatted version of S, using substitutions from args and kwargs.
      The substitutions are identified by braces ('{' and '}').



   .. py:method:: format_map(mapping: collections.abc.Mapping[str, Any], /) -> typing_extensions.Self

      S.format_map(mapping) -> str

      Return a formatted version of S, using substitutions from mapping.
      The substitutions are identified by braces ('{' and '}').



.. py:class:: EscapeFormatter(escape: _TPEscape)

   Bases: :py:obj:`string.Formatter`


   .. py:attribute:: escape
      :type:  _TPEscape


   .. py:method:: format_field(value: Any, format_spec: str) -> str


