wcwidth.wcwidth
===============

.. py:module:: wcwidth.wcwidth

.. autoapi-nested-parse::

   This is a python implementation of wcwidth() and wcswidth().

   https://github.com/jquast/wcwidth

   from Markus Kuhn's C code, retrieved from:

       http://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c

   This is an implementation of wcwidth() and wcswidth() (defined in
   IEEE Std 1002.1-2001) for Unicode.

   http://www.opengroup.org/onlinepubs/007904975/functions/wcwidth.html
   http://www.opengroup.org/onlinepubs/007904975/functions/wcswidth.html

   In fixed-width output devices, Latin characters all occupy a single
   "cell" position of equal width, whereas ideographic CJK characters
   occupy two such cells. Interoperability between terminal-line
   applications and (teletype-style) character terminals using the
   UTF-8 encoding requires agreement on which character should advance
   the cursor by how many cell positions. No established formal
   standards exist at present on which Unicode character shall occupy
   how many cell positions on character terminals. These routines are
   a first attempt of defining such behavior based on simple rules
   applied to data provided by the Unicode Consortium.

   For some graphical characters, the Unicode standard explicitly
   defines a character-cell width via the definition of the East Asian
   FullWidth (F), Wide (W), Half-width (H), and Narrow (Na) classes.
   In all these cases, there is no ambiguity about which width a
   terminal shall use. For characters in the East Asian Ambiguous (A)
   class, the width choice depends purely on a preference of backward
   compatibility with either historic CJK or Western practice.
   Choosing single-width for these characters is easy to justify as
   the appropriate long-term solution, as the CJK practice of
   displaying these characters as double-width comes from historic
   implementation simplicity (8-bit encoded characters were displayed
   single-width and 16-bit ones double-width, even for Greek,
   Cyrillic, etc.) and not any typographic considerations.

   Much less clear is the choice of width for the Not East Asian
   (Neutral) class. Existing practice does not dictate a width for any
   of these characters. It would nevertheless make sense
   typographically to allocate two character cells to characters such
   as for instance EM SPACE or VOLUME INTEGRAL, which cannot be
   represented adequately with a single-width glyph. The following
   routines at present merely assign a single-cell width to all
   neutral characters, in the interest of simplicity. This is not
   entirely satisfactory and should be reconsidered before
   establishing a formal standard in this area. At the moment, the
   decision which Not East Asian (Neutral) characters should be
   represented by double-width glyphs cannot yet be answered by
   applying a simple rule from the Unicode database content. Setting
   up a proper standard for the behavior of UTF-8 character terminals
   will require a careful analysis not only of each Unicode character,
   but also of each presentation form, something the author of these
   routines has avoided to do so far.

   http://www.unicode.org/unicode/reports/tr11/

   Latest version: http://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c



Functions
---------

.. autoapisummary::

   wcwidth.wcwidth.wcwidth
   wcwidth.wcwidth.wcswidth


Module Contents
---------------

.. py:function:: wcwidth(wc, unicode_version='auto')

   Given one Unicode character, return its printable length on a terminal.

   :param str wc: A single Unicode character.
   :param str unicode_version: A Unicode version number, such as
       ``'6.0.0'``. A list of version levels suported by wcwidth
       is returned by :func:`list_versions`.

       Any version string may be specified without error -- the nearest
       matching version is selected.  When ``latest`` (default), the
       highest Unicode version level is used.
   :return: The width, in cells, necessary to display the character of
       Unicode string character, ``wc``.  Returns 0 if the ``wc`` argument has
       no printable effect on a terminal (such as NUL '\0'), -1 if ``wc`` is
       not printable, or has an indeterminate effect on the terminal, such as
       a control character.  Otherwise, the number of column positions the
       character occupies on a graphic terminal (1 or 2) is returned.
   :rtype: int

   See :ref:`Specification` for details of cell measurement.


.. py:function:: wcswidth(pwcs, n=None, unicode_version='auto')

   Given a unicode string, return its printable length on a terminal.

   :param str pwcs: Measure width of given unicode string.
   :param int n: When ``n`` is None (default), return the length of the entire
       string, otherwise only the first ``n`` characters are measured. This
       argument exists only for compatibility with the C POSIX function
       signature. It is suggested instead to use python's string slicing
       capability, ``wcswidth(pwcs[:n])``
   :param str unicode_version: An explicit definition of the unicode version
       level to use for determination, may be ``auto`` (default), which uses
       the Environment Variable, ``UNICODE_VERSION`` if defined, or the latest
       available unicode version, otherwise.
   :rtype: int
   :returns: The width, in cells, needed to display the first ``n`` characters
       of the unicode string ``pwcs``.  Returns ``-1`` for C0 and C1 control
       characters!

   See :ref:`Specification` for details of cell measurement.


