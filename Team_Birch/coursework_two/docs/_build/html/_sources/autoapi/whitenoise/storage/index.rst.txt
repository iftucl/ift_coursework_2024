whitenoise.storage
==================

.. py:module:: whitenoise.storage


Exceptions
----------

.. autoapisummary::

   whitenoise.storage.MissingFileError


Classes
-------

.. autoapisummary::

   whitenoise.storage.CompressedStaticFilesStorage
   whitenoise.storage.CompressedManifestStaticFilesStorage


Module Contents
---------------

.. py:class:: CompressedStaticFilesStorage

   Bases: :py:obj:`django.contrib.staticfiles.storage.StaticFilesStorage`


   StaticFilesStorage subclass that compresses output files.


   .. py:method:: post_process(paths: dict[str, Any], dry_run: bool = False, **options: Any) -> _PostProcessT


   .. py:method:: create_compressor(**kwargs: Any) -> whitenoise.compress.Compressor


.. py:exception:: MissingFileError

   Bases: :py:obj:`ValueError`


   Inappropriate argument value (of correct type).


.. py:class:: CompressedManifestStaticFilesStorage(*args, **kwargs)

   Bases: :py:obj:`django.contrib.staticfiles.storage.ManifestStaticFilesStorage`


   Extends ManifestStaticFilesStorage instance to create compressed versions
   of its output files and, optionally, to delete the non-hashed files (i.e.
   those without the hash in their name)


   .. py:method:: post_process(*args, **kwargs)


   .. py:method:: post_process_with_compression(files)


   .. py:method:: hashed_name(*args, **kwargs)


   .. py:method:: start_tracking_new_files(new_files)


   .. py:method:: stop_tracking_new_files()


   .. py:property:: keep_only_hashed_files


   .. py:method:: delete_files(files_to_delete)


   .. py:method:: create_compressor(**kwargs)


   .. py:method:: compress_files(names)


   .. py:method:: make_helpful_exception(exception, name)

      If a CSS file contains references to images, fonts etc that can't be found
      then Django's `post_process` blows up with a not particularly helpful
      ValueError that leads people to think WhiteNoise is broken.

      Here we attempt to intercept such errors and reformat them to be more
      helpful in revealing the source of the problem.



