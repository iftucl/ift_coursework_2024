whitenoise.responders
=====================

.. py:module:: whitenoise.responders


Attributes
----------

.. autoapisummary::

   whitenoise.responders.NOT_ALLOWED_RESPONSE
   whitenoise.responders.NOT_MODIFIED_HEADERS


Exceptions
----------

.. autoapisummary::

   whitenoise.responders.NotARegularFileError
   whitenoise.responders.MissingFileError
   whitenoise.responders.IsDirectoryError


Classes
-------

.. autoapisummary::

   whitenoise.responders.Response
   whitenoise.responders.SlicedFile
   whitenoise.responders.StaticFile
   whitenoise.responders.Redirect
   whitenoise.responders.FileEntry


Module Contents
---------------

.. py:class:: Response(status, headers, file)

   .. py:attribute:: status


   .. py:attribute:: headers


   .. py:attribute:: file


.. py:data:: NOT_ALLOWED_RESPONSE

.. py:data:: NOT_MODIFIED_HEADERS
   :value: ('Cache-Control', 'Content-Location', 'Date', 'ETag', 'Expires', 'Vary')


.. py:class:: SlicedFile(fileobj, start, end)

   Bases: :py:obj:`io.BufferedIOBase`


   A file like wrapper to handle seeking to the start byte of a range request
   and to return no further output once the end byte of a range request has
   been reached.


   .. py:attribute:: fileobj


   .. py:attribute:: remaining


   .. py:method:: read(size=-1)

      Read and return up to n bytes.

      If the size argument is omitted, None, or negative, read and
      return all data until EOF.

      If the size argument is positive, and the underlying raw stream is
      not 'interactive', multiple raw reads may be issued to satisfy
      the byte count (unless EOF is reached first).
      However, for interactive raw streams (as well as sockets and pipes),
      at most one raw read will be issued, and a short result does not
      imply that EOF is imminent.

      Return an empty bytes object on EOF.

      Return None if the underlying raw stream was open in non-blocking
      mode and no data is available at the moment.



   .. py:method:: close()

      Flush and close the IO object.

      This method has no effect if the file is already closed.



.. py:class:: StaticFile(path, headers, encodings=None, stat_cache=None)

   .. py:attribute:: last_modified


   .. py:attribute:: etag


   .. py:attribute:: not_modified_response


   .. py:attribute:: alternatives
      :value: []



   .. py:method:: get_response(method, request_headers)


   .. py:method:: get_range_response(range_header, base_headers, file_handle)


   .. py:method:: get_byte_range(range_header, size)


   .. py:method:: parse_byte_range(range_header)
      :staticmethod:



   .. py:method:: get_range_not_satisfiable_response(file_handle, size)
      :staticmethod:



   .. py:method:: get_file_stats(path, encodings, stat_cache)
      :staticmethod:



   .. py:method:: get_headers(headers_list, files)


   .. py:method:: get_not_modified_response(headers)
      :staticmethod:



   .. py:method:: get_alternatives(base_headers, files)
      :staticmethod:



   .. py:method:: is_not_modified(request_headers)


   .. py:method:: get_path_and_headers(request_headers)


.. py:class:: Redirect(location, headers=None)

   .. py:attribute:: response


   .. py:method:: get_response(method, request_headers)


.. py:exception:: NotARegularFileError

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


.. py:exception:: MissingFileError

   Bases: :py:obj:`NotARegularFileError`


   Common base class for all non-exit exceptions.


.. py:exception:: IsDirectoryError

   Bases: :py:obj:`MissingFileError`


   Common base class for all non-exit exceptions.


.. py:class:: FileEntry(path, stat_cache=None)

   .. py:attribute:: path


   .. py:attribute:: size


   .. py:attribute:: mtime


   .. py:method:: stat_regular_file(path, stat_function)
      :staticmethod:


      Wrap `stat_function` to raise appropriate errors if `path` is not a
      regular file



