whitenoise.base
===============

.. py:module:: whitenoise.base


Classes
-------

.. autoapisummary::

   whitenoise.base.WhiteNoise


Functions
---------

.. autoapisummary::

   whitenoise.base.scantree


Module Contents
---------------

.. py:class:: WhiteNoise(application, root=None, prefix=None, *, autorefresh: bool = False, max_age: int | None = 60, allow_all_origins: bool = True, charset: str = 'utf-8', mimetypes: dict[str, str] | None = None, add_headers_function: Callable[[wsgiref.headers.Headers, str, str], None] | None = None, index_file: str | bool | None = None, immutable_file_test: Callable | str | None = None)

   .. py:attribute:: FOREVER
      :value: 315360000



   .. py:attribute:: autorefresh
      :value: False



   .. py:attribute:: max_age
      :value: 60



   .. py:attribute:: allow_all_origins
      :value: True



   .. py:attribute:: charset
      :value: 'utf-8'



   .. py:attribute:: add_headers_function
      :value: None



   .. py:attribute:: media_types


   .. py:attribute:: application


   .. py:attribute:: files


   .. py:attribute:: directories
      :value: []



   .. py:method:: serve(static_file, environ, start_response)
      :staticmethod:



   .. py:method:: add_files(root, prefix=None)


   .. py:method:: update_files_dictionary(root, prefix)


   .. py:method:: add_file_to_dictionary(url, path, stat_cache=None)


   .. py:method:: find_file(url)


   .. py:method:: candidate_paths_for_url(url)


   .. py:method:: find_file_at_path(path, url)


   .. py:method:: url_is_canonical(url)
      :staticmethod:


      Check that the URL path is in canonical format i.e. has normalised
      slashes and no path traversal elements



   .. py:method:: is_compressed_variant(path, stat_cache=None)
      :staticmethod:



   .. py:method:: get_static_file(path, url, stat_cache=None)


   .. py:method:: add_mime_headers(headers, path, url)


   .. py:method:: add_cache_headers(headers, path, url)


   .. py:method:: immutable_file_test(path, url)

      This should be implemented by sub-classes (see e.g. WhiteNoiseMiddleware)
      or by setting the `immutable_file_test` config option



   .. py:method:: redirect(from_url, to_url)

      Return a relative 302 redirect

      We use relative redirects as we don't know the absolute URL the app is
      being hosted under



.. py:function:: scantree(root)

   Recurse the given directory yielding (pathname, os.stat(pathname)) pairs


