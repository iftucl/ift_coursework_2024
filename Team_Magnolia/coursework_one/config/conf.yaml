version: '3.5'

services:
  # =====================================
  # 1) MongoDB
  # =====================================
  mongo_db:
    container_name: mongo_db_cw
    image: mongo:latest
    ports:
      - "27019:27017"
    # No environment variables needed unless you want an admin user
    # For teacher to connect: "mongodb://localhost:27019"

  # =====================================
  # 2) PostgreSQL
  # =====================================
  postgres_db:
    container_name: postgres_db_cw
    image: postgres:10.5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - "5439:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Teacher can connect via psql: "psql -h localhost -p 5439 -U postgres"

  # =====================================
  # 3) pgAdmin (to manage PostgreSQL visually)
  # =====================================
  pgadmin:
    container_name: pg_admin_cw
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5051:80"
    # Access at http://localhost:5051
    # Then add a server with host="postgres_db", port=5432, user="postgres", pass="postgres"
    depends_on:
      - postgres_db

  # =====================================
  # 4) MinIO (S3-compatible object store)
  # =====================================
  miniocw:
    container_name: miniocw
    image: minio/minio
    environment:
      - MINIO_ROOT_USER=ift_bigdata
      - MINIO_ROOT_PASSWORD=minio_password
      - MINIO_DOMAIN=miniocw
    ports:
      - "9000:9000"
      - "9001:9001"
    command: ["server", "/data", "--console-address", ":9001"]
    # Teacher can open http://localhost:9001 to see MinIO Console
    # Login: ift_bigdata / minio_password

  # =====================================
  # 5) MinIO Client (to auto-configure bucket/policy)
  # =====================================
  minio_client_cw:
    container_name: minio_client_cw
    image: minio/mc
    depends_on:
      - miniocw
    entrypoint: >
      /bin/bash -c "
      echo 'Waiting for MinIO to come online...';
      until (mc config host add myminio http://miniocw:9000 ift_bigdata minio_password) do echo '...waiting...' && sleep 2; done;
      echo 'Creating bucket if not exist...';
      mc mb myminio/csreport || true;
      mc anonymous set public myminio/csreport;
      echo 'MinIO client setup complete. Tail logs now.';
      tail -f /dev/null
      "

  # =====================================
  # 6) Zookeeper
  # =====================================
  zookeeper:
    container_name: zookeeper_cw
    image: confluentinc/cp-zookeeper:latest
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    # Additional environment variables if needed

  # =====================================
  # 7) Kafka
  # =====================================
  kafka:
    container_name: kafka_cw
    image: confluentinc/cp-kafka:latest
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper

  # =====================================
  # 8) (Optional) PostgreSQL Seeding
  # =====================================
  # If you actually need this container to run .sql scripts, 
  # adjust environment to match 'postgres_db' host & port
  postgres_seed:
    container_name: postgres_seed_cw
    build:
      context: .
      dockerfile: ./000.Database/SQL/Dockerfile
    restart: on-failure
    environment:
      POSTGRES_DATABASE: postgres
      POSTGRES_HOST: postgres_db   # referencing the service name
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    depends_on:
      postgres_db:
        condition: service_healthy

# =====================================
# Named volumes
# =====================================
volumes:
  postgres-data:

# =====================================
# If you want them all in one network, or just default bridged
# =====================================
# networks:
#   default:
#     name: iceberg_net
