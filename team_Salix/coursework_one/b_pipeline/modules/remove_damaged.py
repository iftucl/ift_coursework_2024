"""
Damaged PDF Cleanup Module

This module is responsible for cleaning up damaged PDF files and their associated
empty directories based on the validation report generated by the PDF check module.
"""

import os
import pandas as pd
import shutil

def remove_damaged_files():
    """
    Remove damaged PDF files and their empty directories.
    
    This function:
    1. Reads the PDF check report to identify damaged files
    2. Removes each damaged file
    3. Cleans up empty year directories
    4. Cleans up empty company directories
    
    The function processes the report from b_pipeline/bresult/pdf_check_report.csv
    and removes files marked as 'Damaged'. After removing files, it checks if the
    parent directories are empty and removes them if they are.
    
    Returns:
        None
    """

    # Get current script directory
    script_dir = os.path.dirname(os.path.abspath(__file__))

    # Set report file path (b_pipeline/bresult/pdf_check_report.csv)
    b_pipeline_dir = os.path.dirname(os.path.dirname(__file__))  # Get b_pipeline directory
    report_file = os.path.join(b_pipeline_dir, "bresult", "pdf_check_report.csv")

    # Print path for debugging
    print(f"Looking for report at: {report_file}")

    if not os.path.exists(report_file):
        print("Error: Check report file not found")
        return
        
    df = pd.read_csv(report_file)
    damaged_files = df[df['status'] == 'Damaged']
    
    if damaged_files.empty:
        print("No damaged files found")
        return
        
    print(f"\nFound {len(damaged_files)} damaged files")
    
    # Remove damaged files
    for _, row in damaged_files.iterrows():
        file_path = row['file_path']
        company = row['company']
        year = row['year']
        year_dir = os.path.dirname(file_path)  # Year directory
        company_dir = os.path.dirname(year_dir)  # Company directory
        
        try:
            # Remove file
            if os.path.exists(file_path):
                os.remove(file_path)
                print(f"✓ File removed: {file_path}")
            
            # If year directory is empty, remove it
            if os.path.exists(year_dir) and not os.listdir(year_dir):
                os.rmdir(year_dir)
                print(f"✓ Empty directory removed: {year_dir}")
            
            # If company directory is empty, remove it
            if os.path.exists(company_dir) and not os.listdir(company_dir):
                os.rmdir(company_dir)
                print(f"✓ Empty directory removed: {company_dir}")        
                
        except Exception as e:
            print(f"❌ Failed to remove {file_path}: {str(e)}")
    
    print("\nCleanup completed!")

if __name__ == "__main__":
    remove_damaged_files() 