version: '3.5'

services:
    mongo_db:
      container_name: mongo_db_cw
      image: mongo:latest
      ports:
        - 27019:27017
      networks:
        - iceberg_net

    postgres_db:
      container_name: postgres_db_cw
      image: postgres:10.5        
      environment: 
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=postgres
        - PGUSER=postgres
        - POSTGRES_DB=fift
      logging:
        options:
          max-size: 10m
          max-file: "3"
      ports:
        - '5439:5432'
      volumes:
        - ./postgres-data:/var/lib/postgresql/data
      healthcheck:
        test: ["CMD-SHELL", "pg_isready"]
        interval: 10s
        timeout: 5s
        retries: 5  
      networks:
        - iceberg_net      

    postgres_seed:
      container_name: postgres_seed_cw
      restart: on-failure
      environment:
        POSTGRES_DATABASE: postgres_feeder
        POSTGRES_HOST: postgres_db_cw
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
      depends_on:
        postgres_db:
          condition: service_healthy
      build: 
        context: ..
        dockerfile: 000.Database/SQL/Dockerfile
      networks:
        - iceberg_net

    pgadmin:
      container_name: pg_admin_cw
      image: dpage/pgadmin4
      restart: always
      environment:
        PGADMIN_DEFAULT_EMAIL: admin@admin.com
        PGADMIN_DEFAULT_PASSWORD: root
      ports:
        - "5051:80"
      networks:
        - iceberg_net

    miniocw:
      image: minio/minio
      container_name: miniocw
      networks:
       - iceberg_net
      environment:
        - MINIO_ROOT_USER=ift_bigdata
        - MINIO_ROOT_PASSWORD=minio_password
        - MINIO_DOMAIN=miniocw
      ports:
        - 9001:9001
        - 9000:9000
      command: ["server", "/data", "--console-address", ":9001"]

    minio_client_cw:
      container_name: minio_client_cw
      networks:
        - iceberg_net
      depends_on:
        - miniocw
        - postgres_db
      image: minio/mc
      environment:
        - AWS_ACCESS_KEY_ID=ift_bigdata
        - AWS_SECRET_ACCESS_KEY=minio_password
        - AWS_REGION=us-east-1
        - MINIO_ENDPOINT=http://miniocw:9000 
        - POSTGRES_HOST=postgres_db_cw
      entrypoint: >
        /bin/bash -c "
        until (/usr/bin/mc config host add minio http://miniocw:9000 ift_bigdata minio_password) do echo '...waiting...' && sleep 1; done;
        sleep 10 && /usr/bin/mc rm -r --force minio/csr-reports;
        sleep 10 && /usr/bin/mc mb minio/csr-reports;
        mc anonymous set public minio/csr-reports
        tail -f /dev/null
        "

networks:
  iceberg_net:
    driver: bridge