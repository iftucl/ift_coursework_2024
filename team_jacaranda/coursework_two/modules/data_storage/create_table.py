import psycopg2
from psycopg2.extras import execute_values

# --- PostgreSQL Configuration ---
db_config = {
    "dbname": "fift",
    "user": "postgres",
    "password": "postgres",
    "host": "host.docker.internal",
    "port": 5439
}

# --- Create Tables and Insert Data ---
def create_table_and_insert_data():
    
    # Create CSR_indicators Table (Indicators Table)
    create_indicators_table_sql = """
    CREATE TABLE IF NOT EXISTS csr_reporting.CSR_indicators (
        indicator_id SERIAL PRIMARY KEY,
        indicator_name VARCHAR(255),
        theme VARCHAR(100),
        unit VARCHAR(50),
        description TEXT,
        keywords TEXT[],
        is_target BOOLEAN
    );
    """
    
    # Create CSR_Data Table (Data Records Table)
    create_data_table_sql = """
    CREATE TABLE IF NOT EXISTS csr_reporting.CSR_Data (
        data_id SERIAL PRIMARY KEY,
        security VARCHAR(255),
        report_year INT,
        indicator_id INT,
        indicator_name VARCHAR(255),
        value_raw TEXT,
        unit_raw VARCHAR(50),
        value_standardized NUMERIC,
        unit_standardized VARCHAR(50),
        source_excerpt JSONB,
        extraction_time TIMESTAMP,
        pdf_page TEXT,
        llm_response_raw TEXT,
        unit_conversion TEXT,
        FOREIGN KEY (indicator_id) REFERENCES csr_reporting.CSR_indicators (indicator_id)
    );
    """

    try:
        # Connect to the database and execute SQL statements
        conn = psycopg2.connect(**db_config)
        cur = conn.cursor()

        # Create both tables
        cur.execute(create_indicators_table_sql)
        cur.execute(create_data_table_sql)
        conn.commit()

        print("‚úÖ Tables CSR_indicators and CSR_Data created successfully.")
    except Exception as e:
        print(f"‚ùå Error occurred: {e}")

# --- Insert Data ---
    # Raw Indicator Keywords (for reuse by target indicators)
    keywords_dict = {
        "Total GHG Emissions": ["Total GHG emissions", "Carbon emissions", "Greenhouse gas emissions", "CO‚ÇÇ emissions", "GHG emissions"],
        "Carbon Intensity": ["Carbon intensity", "Carbon emissions per unit revenue", "Carbon emissions per dollar", "Emissions intensity", "GHG intensity"],
        "Renewable Energy Usage Ratio": ["Renewable energy usage", "Renewable energy ratio", "Solar energy usage", "Wind energy usage", "Percentage of renewable energy", "Green energy"],
        "Energy Intensity": ["Energy intensity", "Energy consumption per revenue", "Energy efficiency", "Energy usage per unit of output"],
        "Water Replenishment": ["Water replenishment", "Water recovery rate", "Water recycling rate", "Water return", "Water reinjection"],
        "Packaging Recyclable": ["Recyclable packaging", "Packaging recyclability", "Sustainable packaging", "Green packaging", "Recyclable materials", "Recyclable content in packaging", "Packaging recyclable content", "Recycled materials in packaging", "Recycled content"],
        "Waste Reduced": ["Waste reduction", "Waste prevented", "Waste prevention", "Waste minimization", "Waste avoidance", "Waste management", "Recycling rates"]
    }

    indicators_data = [
        # üåç Climate Change
        ("Total GHG Emissions", "Climate Change", "metric tons CO‚ÇÇe",
         "Measures the total greenhouse gas emissions generated by the company in production, operations, supply chain, etc., covering Scope 1 (direct emissions), Scope 2 (indirect emissions), and Scope 3 (supply chain emissions).",
         keywords_dict["Total GHG Emissions"], False),
        ("Total GHG Emissions Target", "Climate Change", None,
         "The company sets targets for greenhouse gas emissions reduction (e.g., 'Reduce by 20% by 2030').",
         keywords_dict["Total GHG Emissions"], True),
        ("Scope 1 Emissions", "Climate Change", "metric tons CO‚ÇÇe", "Scope 1: Direct greenhouse gas emissions from company operations.", ["Scope 1"], False),
        ("Scope 2 Emissions", "Climate Change", "metric tons CO‚ÇÇe", "Scope 2: Indirect emissions from energy use within the company.", ["Scope 2"], False),
        ("Scope 3 Emissions", "Climate Change", "metric tons CO‚ÇÇe", "Scope 3: Greenhouse gas emissions from the supply chain.", ["Scope 3"], False),
        ("Carbon Intensity", "Climate Change", "g CO‚ÇÇe / $ revenue",
         "Measures the carbon emissions per unit of revenue, helping to evaluate the company's energy efficiency and environmental impact.",
         keywords_dict["Carbon Intensity"], False),
        ("Carbon Intensity Target", "Climate Change", None,
         "The company sets a target to reduce carbon intensity (e.g., 'Reduce by 5% annually').",
         keywords_dict["Carbon Intensity"], True),
        ("Carbon Neutrality Target", "Climate Change", None,
         "The company's target for achieving net-zero carbon emissions through emission reductions and carbon offsets.",
         ["Carbon neutrality", "Net-zero carbon emissions", "Carbon offsetting", "Zero carbon target", "Carbon reduction targets"], True),

        # ‚ö° Energy
        ("Renewable Energy Usage Ratio", "Energy", "%", "Measures the proportion of renewable energy in the company's total energy consumption.",
         keywords_dict["Renewable Energy Usage Ratio"], False),
        ("Renewable Energy Usage Target", "Energy", None,
         "The company sets a target for the percentage of renewable energy usage.",
         keywords_dict["Renewable Energy Usage Ratio"], True),
        ("Energy Intensity", "Energy", "kWh / $ revenue", "Measures energy consumption per unit of revenue.",
         keywords_dict["Energy Intensity"], False),
        ("Energy Intensity Target", "Energy", None,
         "The company sets a target for energy consumption intensity.",
         keywords_dict["Energy Intensity"], True),

        # üíß Water Resources
        ("Water Reduction Target", "Water Resources", None,
         "The company's target for reducing water resource usage.",
         ["Water consumption reduction", "Water usage target", "Water reduction goals", "Water conservation targets"], True),
        ("Water Replenishment", "Water Resources", "%", "Measures the percentage of water used by the company that is replenished or returned to the environment.",
         keywords_dict["Water Replenishment"], False),
        ("Water Replenishment Target", "Water Resources", None,
         "The company's target for water replenishment rate.",
         keywords_dict["Water Replenishment"], True),

        # üì¶ Packaging
        ("Packaging Recyclable", "Packaging", "%", "Measures the proportion of recyclable components in product packaging.",
         keywords_dict["Packaging Recyclable"], False),
        ("Packaging Recyclable Target", "Packaging", None,
         "The company sets a target for the proportion of recyclable packaging.",
         keywords_dict["Packaging Recyclable"], True),

        # üöÆ Waste
        ("Waste Reduced", "Waste", "%", "Measures the reduction in waste across various categories.",
         keywords_dict["Waste Reduced"], False),
        ("Waste Reduction Target", "Waste", None,
         "The company sets a target for waste reduction.",
         keywords_dict["Waste Reduced"], True)
    ]

    try:
        # Insert data
        insert_sql = """
        INSERT INTO csr_reporting.CSR_indicators (indicator_name, theme, unit, description, keywords, is_target)
        VALUES %s;
        """
        execute_values(cur, insert_sql, indicators_data)
        conn.commit()

        print("‚úÖ Data inserted into CSR_indicators table successfully.")
    except Exception as e:
        print(f"‚ùå Error occurred: {e}")
    finally:
        if conn:
            cur.close()
            conn.close()

if __name__ == "__main__":
    create_table_and_insert_data()
