version: '3.5'

services:
    mongo_db:
      container_name: mongo_db_cw
      image: mongo:latest
      ports:
        - "27017:27017"
      healthcheck:
        test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
        interval: 10s
        timeout: 5s
        retries: 5
    postgres_db:
        container_name: postgres_db_cw
        image: postgres:10.5
        environment:
          - POSTGRES_USER=postgres
          - POSTGRES_PASSWORD=postgres
          - PGUSER=postgres
        logging:
          options:
            max-size: 10m
            max-file: "3"
        ports:
          - '5439:5432'
        volumes:
          - ./postgres-data:/var/lib/postgresql/data
        healthcheck:
          test: ["CMD-SHELL", "pg_isready"]
          interval: 10s
          timeout: 5s
          retries: 5
    postgres_seed:
      container_name: postgres_seed_cw
      restart: on-failure
      environment:
        POSTGRES_DATABASE: postgres_feeder
        POSTGRES_HOST: postgres_feeder
        POSTGRES_PORT: 5439
        POSTGRES_USER: postgres_feeder
        POSTGRES_PASSWORD: postgres_feeder
      depends_on:
        postgres_db:
          condition: service_healthy
      build:
        dockerfile: ./000.Database/SQL/Dockerfile
    pgadmin:
      container_name: pg_admin_cw
      image: dpage/pgadmin4
      restart: always
      environment:
        PGADMIN_DEFAULT_EMAIL: admin@admin.com
        PGADMIN_DEFAULT_PASSWORD: root
      ports:
        - "5051:80"
    miniocw:
      image: minio/minio
      container_name: miniocw
      environment:
        - MINIO_ROOT_USER=ift_bigdata
        - MINIO_ROOT_PASSWORD=minio_password
        - MINIO_DOMAIN=miniocw
      ports:
        - "9000:9000"
        - "9001:9001"
      command: ["server", "/data", "--console-address", ":9001"]
      healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:9001/minio/health/live" ]
        interval: 10s
        timeout: 5s
        retries: 5
    minio_client_cw:
      container_name: minio_client_cw
      depends_on:
        - miniocw
      image: minio/mc
      environment:
        - AWS_ACCESS_KEY_ID=ift_bigdata
        - AWS_SECRET_ACCESS_KEY=minio_password
        - AWS_REGION=us-east-1
      entrypoint: >
        /bin/bash -c "
        until (/usr/bin/mc config host add minio http://miniocw:9000 ift_bigdata minio_password) do echo '...waiting...' && sleep 1; done;
        sleep 10 && /usr/bin/mc rm -r --force minio/csr-reports1;
        sleep 10 && /usr/bin/mc mb minio/csr-reports1;
        mc anonymous set public minio/csr-reports1;
        tail -f /dev/null
        "
    jenkins:
      build:
        context: ./team_sakura/coursework_one  # Specify the directory where `Dockerfile_Jenkins` is located
        dockerfile: Dockerfile_Jenkins  # Use a custom Dockerfile name
      container_name: jenkins
      restart: always
      user: root
      ports:
        - "8081:8080"
        - "50001:50000"
      volumes:
        - jenkins_home:/var/jenkins_home
        - /var/run/docker.sock:/var/run/docker.sock
        - ./jenkins_home:/var/jenkins_home

    pipeline_runner:
        build:
          context: ./team_sakura/coursework_one
          dockerfile: Dockerfile_pipeline                # Use `Dockerfile` to build the image
        container_name: pipeline_runner
        restart: unless-stopped
        volumes:
          - ./team_sakura/coursework_one:/app    # Mount the code directory
          - ./000.Database/SQL:/app/000.Database/SQL   # Ensure the database directory is accessible
          - ./team_sakura/coursework_one/a_pipeline/config:/app/a_pipeline/config  # Ensure the config directory is accessible
          - ./team_sakura/coursework_one/a_pipeline/config/conf.yaml:/app/a_pipeline/config/conf.yaml  # Mount conf.yaml file
        environment:
          - CONF_PATH=./a_pipeline/config/conf.yaml
          - DOCKER_ENV=true
        working_dir: /app
        command: tail -f /dev/null  # Keep the container running
        depends_on:
          mongo_db:
            condition: service_healthy
          miniocw:
            condition: service_healthy


volumes:
    jenkins_home:

